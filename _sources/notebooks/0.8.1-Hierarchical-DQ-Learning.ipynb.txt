{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 0.8.1 Hierarchical DQ Learning\n",
    "\n",
    "Quickly put together a reinforcement learning how DQNs perform when run on tasks with a hierarchical structure such as the one laid out in [this](http://ski.clps.brown.edu/papers/CollinsFrank_Cognition.pdf) paper."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "toc-hr-collapsed": true
   },
   "source": [
    "## Boilerplate\n",
    "\n",
    "The following subsections are largely boilerplate code, so skip around as needed."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Jupyter Extensions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Load [watermark](https://github.com/rasbt/watermark) to see the state of the machine and environment that's running the notebook. To make sense of the options, take a look at the [usage](https://github.com/rasbt/watermark#usage) section of the readme."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The watermark extension is already loaded. To reload it, use:\n",
      "  %reload_ext watermark\n",
      "Thu Jun 13 2019 00:56:49 \n",
      "\n",
      "CPython 3.6.8\n",
      "IPython 7.3.0\n",
      "\n",
      "numpy 1.16.2\n",
      "matplotlib 3.0.2\n",
      "seaborn 0.9.0\n",
      "tensorflow 1.10.0\n",
      "\n",
      "compiler   : GCC 7.3.0\n",
      "system     : Linux\n",
      "release    : 4.18.0-21-generic\n",
      "machine    : x86_64\n",
      "processor  : x86_64\n",
      "CPU cores  : 8\n",
      "interpreter: 64bit\n",
      "Git hash   : 9b138876ec01744f4f4b303641c4f9be4079437e\n",
      "Git branch : master\n"
     ]
    }
   ],
   "source": [
    "# Load `watermark` extension\n",
    "%load_ext watermark\n",
    "# Display the status of the machine and packages. Add more as necessary.\n",
    "%watermark -v -n -m -g -b -t -p numpy,matplotlib,seaborn,tensorflow"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Load [autoreload](https://ipython.org/ipython-doc/3/config/extensions/autoreload.html) which will always reload modules marked with `%aimport`.\n",
    "\n",
    "This behavior can be inverted by running `autoreload 2` which will set everything to be auto-reloaded *except* for modules marked with `%aimport`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load `autoreload` extension\n",
    "%load_ext autoreload\n",
    "# Set autoreload behavior\n",
    "%autoreload 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Load `matplotlib` in one of the more `jupyter`-friendly [rich-output modes](https://ipython.readthedocs.io/en/stable/interactive/plotting.html). Some options (that may or may not have worked) are `inline`, `notebook`, and `gtk`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set the matplotlib mode.\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Imports"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Static imports that shouldn't necessarily change throughout the notebook."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Standard library imports\n",
    "import logging\n",
    "import os\n",
    "from pathlib import Path\n",
    "from copy import deepcopy\n",
    "from pprint import pprint\n",
    "\n",
    "# Third party\n",
    "import IPython as ipy\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import tensorflow as tf\n",
    "from pstar import pdict"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Local imports that may or may not be autoreloaded. This section contains things that will likely have to be re-imported multiple times, and have additions or subtractions made throughout the project."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Utility functions\n",
    "%aimport leabratf.utils\n",
    "from leabratf.utils import setup_logging\n",
    "%aimport leabratf.constants\n",
    "from leabratf.constants import DIR_DATA_PROC"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Initial Setup"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Set [seaborn defaults](https://seaborn.pydata.org/generated/seaborn.set.html) for matplotlib."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "sns.set()\n",
    "sns.set_context(\"notebook\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Set up the logger configuration to something more useful than baseline. Creates log files for the different log levels in the `logs` directory.\n",
    "\n",
    "See `logging.yml` for the exact logging configuration."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Run base logger setup\n",
    "setup_logging()\n",
    "# Define a logger object\n",
    "logger = logging.getLogger('leabratf')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "toc-hr-collapsed": true
   },
   "source": [
    "## Task Definitions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Constants"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "N_COLORS = 5\n",
    "N_SHAPES = 4\n",
    "N_ACTIONS = 4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Phase Colors and Shapes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [],
   "source": [
    "# All the colors and shapes\n",
    "all_colors = [0, 1, 2, 3, 4]\n",
    "all_shapes = [1 ,2, 3, 4]\n",
    "\n",
    "# Phase A\n",
    "phase_a_colors = [0, 1, 2, 2]\n",
    "phase_a_shapes = [1, 2]\n",
    "\n",
    "# Phase B\n",
    "phase_b_colors = [0, 1, 2, 2]\n",
    "phase_b_shapes = [3, 4]\n",
    "\n",
    "# Phase C\n",
    "phase_c_colors = [3, 4]\n",
    "phase_c_shapes = [3, 4]\n",
    "\n",
    "# Phase Pairs\n",
    "phase_color_shape_pairs = {\n",
    "    'Phase A' : (phase_a_colors, phase_a_shapes),\n",
    "    'Phase B' : (phase_b_colors, phase_b_shapes),\n",
    "    'Phase C' : (phase_c_colors, phase_c_shapes),\n",
    "}\n",
    "\n",
    "# Color lines correspond to a particular horizontal line\n",
    "# # colors are not uniformly selected for\n",
    "# Shapes corespond to a particular vertical line\n",
    "# Color, Shape combinations correspond to a particular action 1-4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Task-Sets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define the constants\n",
    "# TS Colors\n",
    "ts1_colors = [0, 1]\n",
    "ts2_colors = [2]\n",
    "ts_old_colors = [3]\n",
    "ts_new_colors = [4]\n",
    "\n",
    "ts_color_shape_pairs = {\n",
    "    'TS 1 Phase A' : (ts1_colors, phase_a_shapes),\n",
    "    'TS 2 Phase A' : (ts2_colors, phase_a_shapes),\n",
    "    'TS 1 Phase B' : (ts1_colors, phase_b_shapes),\n",
    "    'TS 2 Phase B' : (ts2_colors, phase_b_shapes),\n",
    "    'TS Old Phase C' : (ts_old_colors, phase_c_shapes),\n",
    "    'TS New Phase C' : (ts_new_colors, phase_c_shapes),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Action Mapping"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "action_dictonary_ts1 = {\n",
    "    # (Color, Shape) : Action\n",
    "    #      Phase A       |       Phase B\n",
    "    (0,1) : 1, (0,2) : 2, (0,3) : 1, (0,4) : 3, # TS 1\n",
    "    (1,1) : 1, (1,2) : 2, (1,3) : 1, (1,4) : 3, # TS 1\n",
    "    (2,1) : 3, (2,2) : 4, (2,3) : 4, (2,4) : 2, # TS 2\n",
    "    #                    |       Phase C\n",
    "                          (3,3) : 1, (3,4) : 3, # TS Old\n",
    "                          (4,3) : 1, (4,4) : 2} # TS New"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "action_dictonary_ts2 = {\n",
    "    # (Color, Shape) : Action\n",
    "    #      Phase A       |       Phase B\n",
    "    (0,1) : 1, (0,2) : 2, (0,3) : 1, (0,4) : 3, # TS 1\n",
    "    (1,1) : 1, (1,2) : 2, (1,3) : 1, (1,4) : 3, # TS 1\n",
    "    (2,1) : 3, (2,2) : 4, (2,3) : 4, (2,4) : 2, # TS 2\n",
    "    #                    |       Phase C\n",
    "                          (3,3) : 4, (3,4) : 2, # TS Old\n",
    "                          (4,3) : 1, (4,4) : 2} # TS New"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "toc-hr-collapsed": true
   },
   "source": [
    "## Data Generation Functions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Phase Label Generation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "def explicit_phase_labels(phase_colors,\n",
    "                          phase_shapes,\n",
    "                          n_colors=N_COLORS,\n",
    "                          n_shapes=N_SHAPES,\n",
    "                         ):\n",
    "    # Meshgrid across the colors and shapes\n",
    "    choices = np.array(np.meshgrid(phase_colors, phase_shapes)).T.reshape(-1,2)\n",
    "    # Turn them into one hot vectors\n",
    "    color_choices = np.eye(n_colors)[choices[:,0]]\n",
    "    shape_choices = np.eye(n_shapes)[choices[:,1] - 1]\n",
    "    # Reshape to the desired shape\n",
    "    color_choices = color_choices.reshape((len(color_choices), n_colors, 1))\n",
    "    shape_choices = shape_choices.reshape((len(shape_choices), n_shapes, 1))\n",
    "    \n",
    "    return color_choices, shape_choices"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Action Selection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "def actions(color_choices, shape_choices, action_dict=action_dictonary_ts1, \n",
    "            n_actions=N_ACTIONS):\n",
    "    \"\"\"Implements the mapping from shapes and colors to actions\"\"\"\n",
    "    # Make binary from one hot and increment shape by 1\n",
    "    color_binarized = integer_labels(color_choices)\n",
    "    shape_binarized = [i+1 for i in integer_labels(shape_choices)]\n",
    "    # Compile into a list of tuples\n",
    "    label_tuples = [(color, shape) for color, shape in zip(\n",
    "        color_binarized, shape_binarized)]\n",
    "    # Substitute based on the action dictionary\n",
    "    integer_actions = [action_dict[key] for key in label_tuples]\n",
    "    return np.eye(n_actions)[np.array(integer_actions)-1]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Helper Functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {},
   "outputs": [],
   "source": [
    "def integer_labels(labels):\n",
    "    \"\"\"Turns one-hot labels to integers\"\"\"\n",
    "    return [np.where(r==1)[0][0] for r in labels]\n",
    "    \n",
    "def input_array(color_choices, shape_choices, \n",
    "                n_shapes=N_SHAPES, n_colors=N_COLORS):\n",
    "    \"\"\"Turns one-hot labels to 2D input arrays with lines\"\"\"\n",
    "    # Full Color array\n",
    "    color_array = np.tile(color_choices, n_shapes)\n",
    "    # Full Shape Array\n",
    "    shape_array = np.transpose(\n",
    "        np.tile(shape_choices, n_colors),\n",
    "        [0, 2, 1])\n",
    "        \n",
    "    # Full data with both\n",
    "    x_data = np.maximum(color_array, shape_array)\n",
    "    return x_data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "toc-hr-collapsed": false
   },
   "source": [
    "## Making the Datasets"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "toc-hr-collapsed": true
   },
   "source": [
    "### Generating the Phase Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {},
   "outputs": [],
   "source": [
    "phase_datasets = {}\n",
    "for phase, phase_pair in phase_color_shape_pairs.items():\n",
    "    choices = explicit_phase_labels(*phase_pair)\n",
    "    inputs = input_array(*choices)\n",
    "    labels = actions(*choices)\n",
    "    phase_datasets[phase] = (inputs, labels)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Generating the Task-Set Datasets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "metadata": {},
   "outputs": [],
   "source": [
    "ts_datasets = {}\n",
    "for ts, ts_pair in ts_color_shape_pairs.items():\n",
    "    choices = explicit_phase_labels(*ts_pair)\n",
    "    inputs = input_array(*choices)\n",
    "    labels = actions(*choices)\n",
    "    ts_datasets[ts] = (inputs, labels)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Tensorflow Datasets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "metadata": {},
   "outputs": [],
   "source": [
    "def make_tf_ts_datasets(datasets, init_ops=None):\n",
    "    # The first step of the setup is that each of the datasets (training, validation, and \n",
    "    # testing) are turned into their own `Dataset` objects.\n",
    "    tf_datasets = pdict()\n",
    "    for data, name in zip(datasets, ['train', 'ts']):\n",
    "        for key in data.keys():\n",
    "            tf_datasets[key] = tf.data.Dataset.from_tensor_slices(\n",
    "                data[key]).repeat().shuffle(len(data[key][0])).batch(\n",
    "                1 if name=='train' else len(data[key][0]))\n",
    "    \n",
    "    # Next, let's define the iterators for each of the datasets, and then add their \n",
    "    # initializations to the `init_ops` list.\n",
    "    # Training iterator\n",
    "    iterators = pdict({name : data.make_initializable_iterator()\n",
    "                      for name, data in tf_datasets.items()})\n",
    "\n",
    "    # Add the initiatlizations to the init opts\n",
    "    init_ops = init_ops or []\n",
    "    init_ops += [iter.initializer for iter in iterators.values()]\n",
    "    \n",
    "    first_dataset = list(tf_datasets.values())[0] \n",
    "    output_types, output_shapes = first_dataset.output_types, first_dataset.output_shapes\n",
    "    \n",
    "    # And finally, the interesting part. Rather than creating separate next elements for \n",
    "    # the model, the `tf.data` API has a string handler iterator so we can contextually \n",
    "    # switch the active `Dataset` object, resulting in different values being used for `x` \n",
    "    # and `y`.\n",
    "\n",
    "    # The way this is done is by defining a `tf.placeholder` variable, which is used \n",
    "    # first to create a string handler iterator, and later to hold the dataset-indicating \n",
    "    # string handle. The string handler iterator is what then changes the values of `x` and \n",
    "    # `y`, naturally also supplying them using the `get_next` method.\n",
    "    # The placeholder variable of type string\n",
    "    handle = tf.placeholder(tf.string, shape=[])\n",
    "    \n",
    "    # Iterator from string handle\n",
    "    handle_iterator = tf.data.Iterator.from_string_handle(\n",
    "        handle, output_types, output_shapes)\n",
    "\n",
    "    # x and y that will be used in the graph\n",
    "    x, y = handle_iterator.get_next()\n",
    "    \n",
    "    return x, y, iterators, handle, init_ops"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Recreating Old Plots"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "metadata": {},
   "outputs": [],
   "source": [
    "N_INPUTS = N_COLORS * N_SHAPES\n",
    "N_HIDDEN_1 = 100 \n",
    "N_OUTPUTS = 4\n",
    "TF_DEVICE = '/device:CPU:0'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Oreilly Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {},
   "outputs": [],
   "source": [
    "def oreilly_model(inputs):\n",
    "    # Reshape for hidden layer\n",
    "    inputs = tf.reshape(inputs, shape=[-1, N_INPUTS])\n",
    "    # Single hidden layer\n",
    "    inputs = tf.sigmoid(tf.add(tf.matmul(inputs, weights['h1']), biases['b1']))\n",
    "    # Output layer\n",
    "    inputs = tf.add(tf.matmul(inputs, weights['out']), biases['out'])\n",
    "    # Reshape for labels\n",
    "    return tf.reshape(inputs, shape=[-1, N_OUTPUTS])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Main Graph Definitions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Cleanup any residual nodes\n",
    "tf.reset_default_graph()\n",
    "init_ops = []\n",
    "\n",
    "# Weights and biases\n",
    "weights = pdict({\n",
    "    'h1': tf.get_variable(\n",
    "        name='w_h1', \n",
    "        shape=[N_INPUTS, N_HIDDEN_1],\n",
    "        initializer=tf.contrib.layers.xavier_initializer(),\n",
    "        dtype=tf.float64),\n",
    "    'out': tf.get_variable(\n",
    "        name='w_out', \n",
    "        shape=[N_HIDDEN_1, N_OUTPUTS],\n",
    "        initializer=tf.contrib.layers.xavier_initializer(),\n",
    "        dtype=tf.float64),\n",
    "})\n",
    "biases = pdict({\n",
    "    'b1': tf.get_variable(\n",
    "        name=\"b_1\", \n",
    "        shape=[N_HIDDEN_1], \n",
    "        initializer=tf.zeros_initializer(),\n",
    "        dtype=tf.float64),\n",
    "    'out': tf.get_variable(\n",
    "        name=\"b_out\", \n",
    "        shape=[N_OUTPUTS], \n",
    "        initializer=tf.zeros_initializer(),\n",
    "        dtype=tf.float64),\n",
    "})\n",
    "\n",
    "with tf.device(TF_DEVICE):\n",
    "    # Get the relevant dataset nodes\n",
    "    x, y, iterators, handler, init_ops = make_tf_ts_datasets(\n",
    "        (phase_datasets, ts_datasets), init_ops)\n",
    "\n",
    "    # Build the model\n",
    "    logits = oreilly_model(x)\n",
    "    # Ensure y is cast to the same type as logits\n",
    "    labels = tf.cast(y, logits.dtype)\n",
    "    \n",
    "    # We will keep this in for now\n",
    "    # Define alpha as placeholder variable\n",
    "    alpha_ph = tf.placeholder(tf.float32, shape=[])\n",
    "\n",
    "    # Define loss and optimizer\n",
    "    loss_op = tf.reduce_mean(tf.losses.softmax_cross_entropy(\n",
    "        labels, logits))\n",
    "\n",
    "    # Define some intermediate nodes\n",
    "    predictions = tf.nn.softmax(logits)\n",
    "    rounded_predictions = tf.round(predictions)\n",
    "    equal_labels_and_preds = tf.equal(rounded_predictions, labels)\n",
    "    \n",
    "    # Accuracy \n",
    "    sample_acc = tf.reduce_all(equal_labels_and_preds, axis=1)\n",
    "    accuracy = tf.reduce_mean(tf.cast(sample_acc, tf.float64))\n",
    " \n",
    "    # Adam\n",
    "    train_op_adam = tf.train.AdamOptimizer(alpha_ph).minimize(loss_op)\n",
    "    # Adadelta \n",
    "    train_op_adadelta = tf.train.AdadeltaOptimizer(alpha_ph).minimize(loss_op)\n",
    "    # RMSProp\n",
    "    train_op_rmsprop = tf.train.RMSPropOptimizer(alpha_ph).minimize(loss_op)\n",
    "    # SGD\n",
    "    train_op_sgd = tf.train.GradientDescentOptimizer(alpha_ph).minimize(loss_op)\n",
    "    \n",
    "# And now add these to a dictionary\n",
    "optimizer_dict = pdict({\n",
    "    'Adam' : train_op_adam,\n",
    "    'Adadelta' : train_op_adadelta,\n",
    "    'RMSProp' : train_op_rmsprop,\n",
    "    'sgd' : train_op_sgd,\n",
    "})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### TF Helper Functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {},
   "outputs": [],
   "source": [
    "def new_session(*args, **kwargs):\n",
    "    # Try to close the globally defined session if it isn't already\n",
    "    try:\n",
    "        if not sess._closed:\n",
    "            sess.close()\n",
    "    # If it doesn't exist, then just pass\n",
    "    except NameError:\n",
    "        pass\n",
    "    # Return the new instance\n",
    "    return tf.Session(*args, **kwargs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Based on code from \n",
    "# https://codereview.stackexchange.com/questions/169870/decorator-to-measure-execution-time-of-a-function\n",
    "from functools import wraps\n",
    "from time import time\n",
    "import datetime\n",
    "\n",
    "def timing(func):\n",
    "    @wraps(func)\n",
    "    def wrapper(*args, **kwargs):\n",
    "        start = time()\n",
    "        result = func(*args, **kwargs)\n",
    "        end = time()\n",
    "        logger.info('Elapsed time: {}'.format(\n",
    "            datetime.timedelta(seconds=end-start)))\n",
    "        return result\n",
    "    return wrapper"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Training Function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {},
   "outputs": [],
   "source": [
    "@timing\n",
    "def train_exp(\n",
    "    sess, \n",
    "    lr=0.0033, \n",
    "    epochs=100,\n",
    "    train_op=optimizer_dict['Adam'], \n",
    "    init_ops=None,\n",
    "    verbose=False,\n",
    "    phases=['a'],\n",
    "    n_train=None,\n",
    "    n_val=5,\n",
    "):\n",
    "    log_level = logger.info if verbose else logger.debug\n",
    "    log_level(f'Beginning training using learning rate {lr}, {train_op.name} '\n",
    "              f'training routine, for {epochs} epochs')\n",
    "    # Ensure this is an int\n",
    "    epochs = int(epochs)\n",
    "    # Dict with the various metrics we care about while training\n",
    "    phase_metrics = pdict()\n",
    "    \n",
    "    # Run the initialization ops\n",
    "    init_ops = init_ops or []\n",
    "    if tf.global_variables_initializer() not in init_ops:\n",
    "        init_ops += [tf.global_variables_initializer(), \n",
    "                     tf.local_variables_initializer()]\n",
    "    sess.run(init_ops)\n",
    "    \n",
    "    # Define training and validation handlers\n",
    "    handles = pdict({name : sess.run(iterators[name].string_handle())\n",
    "                    for name in iterators.keys()})\n",
    "    \n",
    "    for i, phase in enumerate(phases):\n",
    "        n_train = len(phase_datasets[phase][0])\n",
    "        epoch_metrics = pdict(\n",
    "            {key : pdict({'loss':[], 'accuracy':[]})\n",
    "             for key in ts_datasets.keys()})\n",
    "        epoch_metrics['encounter'] = []\n",
    "        training_metrics = pdict(\n",
    "            {key : pdict({'loss':[], 'accuracy':[]})\n",
    "             for key in ts_datasets.keys()})\n",
    "        \n",
    "        for epoch in range(epochs):\n",
    "            for _ in range(n_train):\n",
    "                # Training op and compute metrics\n",
    "                _ = sess.run(\n",
    "                    train_op, \n",
    "                    feed_dict={alpha_ph: lr, handler: handles[phase]})\n",
    "                \n",
    "                for met_key in ts_datasets.keys():\n",
    "                    metrics = sess.run(\n",
    "                        [loss_op, accuracy],\n",
    "                        feed_dict={handler: handles[met_key]})\n",
    "                    # Record\n",
    "                    for key, metric in zip(['loss', 'accuracy'], metrics):\n",
    "                        training_metrics[met_key][key].append(metric)\n",
    "\n",
    "            if not epoch % n_val or epoch == epochs - 1:\n",
    "                for ts_key in ts_datasets.keys():\n",
    "                    for metric, values in training_metrics[ts_key].items():\n",
    "                        epoch_metrics[ts_key][metric].append(np.mean(values))\n",
    "                epoch_metrics['encounter'].append(epoch + i*epochs)\n",
    "                log_level(f'Completed Epoch {epoch} for {phase}')\n",
    "                training_metrics = pdict(\n",
    "                    {key : pdict({'loss':[], 'accuracy':[]})\n",
    "                     for key in ts_datasets.keys()})\n",
    "        \n",
    "        phase_metrics[phase] = epoch_metrics\n",
    "        log_level(f'Completed {phase}')\n",
    "\n",
    "    return phase_metrics"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Running the Experiment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%%time\n",
    "N_MODELS = 100\n",
    "sess = new_session()\n",
    "all_ts_phase_metrics = [train_exp(\n",
    "    sess, \n",
    "    phases=phase_datasets.keys(),\n",
    "    lr=0.00333, \n",
    "    epochs=25,\n",
    "    train_op=optimizer_dict['Adam'], \n",
    "    init_ops=init_ops,\n",
    "    verbose=False,\n",
    "    n_train=None,\n",
    "    n_val=1,\n",
    ") for _ in range(N_MODELS)]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "toc-hr-collapsed": true
   },
   "source": [
    "### Plotting TS1 for TS Old Data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Plotting Functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_multiple_models(all_ts_phase_metrics, dataset_to_plot, title=None):\n",
    "    model_average = True\n",
    "    \n",
    "    # Empty lists for the long form data\n",
    "    long_epochs, long_metrics, long_hues, long_units = [], [], [], []\n",
    "\n",
    "    # Loop through each model's data\n",
    "    for i, model_metrics in enumerate(all_ts_phase_metrics):\n",
    "        # Plot the number of epochs according to the data with the shortest\n",
    "        # number of epochs.\n",
    "        # Add to the long form lists\n",
    "        samples = []\n",
    "        for phase, phase_metrics in model_metrics.items():\n",
    "            for dataname in dataset_to_plot:\n",
    "                n_epochs = len(phase_metrics['encounter'])\n",
    "                label = dataname\n",
    "                units = i\n",
    "                long_epochs += phase_metrics['encounter']\n",
    "                long_metrics += phase_metrics[dataname]['accuracy']\n",
    "                long_hues += [f'{dataname}']*n_epochs\n",
    "                long_units += [units]*n_epochs\n",
    "\n",
    "    if model_average:\n",
    "        sns.lineplot(x=long_epochs, y=long_metrics, hue=long_hues, \n",
    "                     estimator='mean')\n",
    "    # Plot each line individually\n",
    "    else:\n",
    "        sns.lineplot(x=long_epochs, y=long_metrics, hue=long_hues, \n",
    "                     estimator=None, units=long_units)\n",
    "\n",
    "    for vline in [n_epochs, n_epochs*2]:\n",
    "        plt.axvline(vline, linestyle='--')\n",
    "\n",
    "    if title:\n",
    "        plt.title(title)\n",
    "    plt.xlabel('Number of Phase Encounters')\n",
    "    plt.ylabel('Accuracy')\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "toc-hr-collapsed": true
   },
   "source": [
    "#### Full Plots Using TS1 for TS Old"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "datasets_to_plot = [['TS 1 Phase A', 'TS 2 Phase A'],\n",
    "                    ['TS 1 Phase B', 'TS 2 Phase B'],\n",
    "                    ['TS Old Phase C', 'TS New Phase C']]\n",
    "titles = ['TS 1 and 2 Phase A Full Training',\n",
    "          'TS 1 and 2 Phase B Full Training',\n",
    "          'TS1 for TS Old and TS New Phase C Full Training']\n",
    "for dataset, title in zip(datasets_to_plot, titles):\n",
    "    plot_multiple_models(all_ts_phase_metrics, dataset,\n",
    "                         title=title)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Rerunning TS2 for TS Old"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "toc-hr-collapsed": true
   },
   "source": [
    "#### Redeclaring Relevant Stuff"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {},
   "outputs": [],
   "source": [
    "phase_datasets_ts2 = {}\n",
    "for phase, phase_pair in phase_color_shape_pairs.items():\n",
    "    choices = explicit_phase_labels(*phase_pair)\n",
    "    inputs = input_array(*choices)\n",
    "    labels = actions(*choices,\n",
    "                     action_dict=action_dictonary_ts2)\n",
    "    phase_datasets_ts2[phase] = (inputs, labels)\n",
    "    \n",
    "ts_datasets_ts2 = {}\n",
    "for ts, ts_pair in ts_color_shape_pairs.items():\n",
    "    choices = explicit_phase_labels(*ts_pair)\n",
    "    inputs = input_array(*choices)\n",
    "    labels = actions(*choices,\n",
    "                     action_dict=action_dictonary_ts2)\n",
    "    ts_datasets_ts2[ts] = (inputs, labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Cleanup any residual nodes\n",
    "tf.reset_default_graph()\n",
    "init_ops = []\n",
    "\n",
    "# Weights and biases\n",
    "weights = pdict({\n",
    "    'h1': tf.get_variable(\n",
    "        name='w_h1', \n",
    "        shape=[N_INPUTS, N_HIDDEN_1],\n",
    "        initializer=tf.contrib.layers.xavier_initializer(),\n",
    "        dtype=tf.float64),\n",
    "    'out': tf.get_variable(\n",
    "        name='w_out', \n",
    "        shape=[N_HIDDEN_1, N_OUTPUTS],\n",
    "        initializer=tf.contrib.layers.xavier_initializer(),\n",
    "        dtype=tf.float64),\n",
    "})\n",
    "biases = pdict({\n",
    "    'b1': tf.get_variable(\n",
    "        name=\"b_1\", \n",
    "        shape=[N_HIDDEN_1], \n",
    "        initializer=tf.zeros_initializer(),\n",
    "        dtype=tf.float64),\n",
    "    'out': tf.get_variable(\n",
    "        name=\"b_out\", \n",
    "        shape=[N_OUTPUTS], \n",
    "        initializer=tf.zeros_initializer(),\n",
    "        dtype=tf.float64),\n",
    "})\n",
    "\n",
    "with tf.device(TF_DEVICE):\n",
    "    # Get the relevant dataset nodes\n",
    "    x, y, iterators, handler, init_ops = make_tf_ts_datasets(\n",
    "        (phase_datasets_ts2, ts_datasets_ts2), init_ops)\n",
    "\n",
    "    # Build the model\n",
    "    logits = oreilly_model(x)\n",
    "    # Ensure y is cast to the same type as logits\n",
    "    labels = tf.cast(y, logits.dtype)\n",
    "    \n",
    "    # We will keep this in for now\n",
    "    # Define alpha as placeholder variable\n",
    "    alpha_ph = tf.placeholder(tf.float32, shape=[])\n",
    "\n",
    "    # Define loss and optimizer\n",
    "    loss_op = tf.reduce_mean(tf.losses.softmax_cross_entropy(\n",
    "        labels, logits))\n",
    "\n",
    "    # Define some intermediate nodes\n",
    "    predictions = tf.nn.softmax(logits)\n",
    "    rounded_predictions = tf.round(predictions)\n",
    "    equal_labels_and_preds = tf.equal(rounded_predictions, labels)\n",
    "    \n",
    "    # Accuracy \n",
    "    sample_acc = tf.reduce_all(equal_labels_and_preds, axis=1)\n",
    "    accuracy = tf.reduce_mean(tf.cast(sample_acc, tf.float64))\n",
    " \n",
    "    # Adam\n",
    "    train_op_adam = tf.train.AdamOptimizer(alpha_ph).minimize(loss_op)\n",
    "    # Adadelta \n",
    "    train_op_adadelta = tf.train.AdadeltaOptimizer(alpha_ph).minimize(loss_op)\n",
    "    # RMSProp\n",
    "    train_op_rmsprop = tf.train.RMSPropOptimizer(alpha_ph).minimize(loss_op)\n",
    "    # SGD\n",
    "    train_op_sgd = tf.train.GradientDescentOptimizer(alpha_ph).minimize(loss_op)\n",
    "    \n",
    "# And now add these to a dictionary\n",
    "optimizer_dict = pdict({\n",
    "    'Adam' : train_op_adam,\n",
    "    'Adadelta' : train_op_adadelta,\n",
    "    'RMSProp' : train_op_rmsprop,\n",
    "    'sgd' : train_op_sgd,\n",
    "})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%%time\n",
    "N_MODELS = 100\n",
    "sess = new_session()\n",
    "all_ts_phase_metrics_ts2 = [train_exp(\n",
    "    sess, \n",
    "    phases=phase_datasets.keys(),\n",
    "    lr=0.00333, \n",
    "    epochs=25,\n",
    "    train_op=optimizer_dict['Adam'], \n",
    "    init_ops=init_ops,\n",
    "    verbose=False,\n",
    "    n_train=None,\n",
    "    n_val=1,\n",
    ") for _ in range(N_MODELS)]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Plots for TS2 for TS Old"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAY8AAAEcCAYAAAA/aDgKAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4yLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvOIA7rQAAIABJREFUeJzsvXm4FNWd8P85VV29d99947IKCEQBUdyCRgMuqDAa4/JGR3+jEVyivk4mbyLRuMxM4jBvZibvqIlL5kl0dDIzbjDgGqPRiPsGhB1k5+57r1VddX5/1L1XrnChL9ylb9/zeR4e+lafqvpWdff51vd8NyGllCgUCoVC0Qe0oRZAoVAoFMMPpTwUCoVC0WeU8lAoFApFn1HKQ6FQKBR9RikPhUKhUPQZpTwUCoVC0WeU8lAMGz744AO+8Y1vDPh5nn/+eb7zne8M+HlygT179jBlyhQymQwA11xzDc8888ygnPuuu+7ikUce6fexisHBM9QCKAaeWbNmdb9OJpN4vV50XQfg/vvv5+yzz+aBBx7g7bffJpFIUF5ezre//W0WL1580OP95Cc/4cMPP2Tnzp387Gc/49JLLx2U6zgUTU1N/PSnP+XDDz8kmUwyefJklixZwsyZMw86/sEHH+SRRx7pvheTJk3iRz/6UY97lQs8+OCDPPTQQzzzzDPMmDHjkOO6rqeLW265hUWLFvWLHPfccw8rVqwAwLIspJTd5zrppJP49a9/3edj/vSnPx2QsYrBQSmPEcBnn33W/Xru3Ln8/d//PV//+te7ty1ZsoREIsFLL71EJBJh+/btbNmypdfjTZ06lQsvvJD/+3//74DK3RcSiQTTp0/nzjvvpKSkhGeffZbFixfzxhtvEAqFDrrPBRdcwM9//nMsy+Jf/uVfuO222/jTn/40yJL3jpSS5cuXU1hYyAsvvHBI5QFfXs9A8Ld/+7f87d/+LeAqqp07dx7yXJlMBo9HTS/5jFq2UrB27VoWLlxIQUEBmqYxceJE5s+f3+v4q6++mtNPPx2fz3fYY//xj3/kkksu4cQTT+Sss87iwQcf7H6va8nkhRde4Oyzz+bUU0/lV7/6Vff7qVSKO++8k5NPPpkLL7yQtWvX9nqeMWPGcN1111FeXo6u61x55ZVYlsX27dsPK6NhGHzrW9+ioaGBlpaW7u1Lly7l5JNPZu7cubz11lvd25977jkuuOACZs2axbx58/jP//zP7veam5u58cYbmT17NqeccgpXXXUVjuMAUFdXx2233cZpp53G3LlzefLJJw8p18cff0x9fT0//vGPeemllzBN87DXcjDmzp3Lu+++2/33gw8+yA9+8IMjOlZv7Ny5kylTpvDcc89x9tlnc/311+M4Drfffjtz5sxh9uzZXHPNNWzbtq17nx/84Afd34d3332XuXPn8vjjj3PaaadxxhlnsGzZsiMa29zczOLFiznxxBO57LLL+Od//meuueaafr1ehVIeCmDmzJn8y7/8C8899xw7duzo12MHAgGWLl3Kxx9/zKOPPsrvfvc7Xn/99R5jPvnkE1555RWeeOIJHn744e4J5qGHHmLXrl38/ve/59/+7d96TBCHY8OGDViWxbhx4w471jRNnn/+eSorKykuLgZgzZo1TJgwgffff58bbriBu+66i65KPiUlJTz66KN8+umnPPDAAzzwwAOsW7cOgN/85jdUVFTw3nvvsWrVKr7//e8jhMBxHG6++WamTJnC22+/zRNPPMETTzxxSEvnhRde4Jvf/CYXXngh4CriXOfjjz/m5Zdf5rHHHgPg7LPP5tVXX2XVqlVMnjyZ//N//k+v+9bW1pJOp/nTn/7E/fffz3333UcsFuvz2Pvuu49IJMK7777Lz372M1544YX+v1CFUh4K14excOFCnn76aS666CLOPffcHk/aR8Opp57KlClT0DSNqVOnctFFF/Hhhx/2GHPrrbfi9/uZOnUqU6dOZePGjQC8/PLL3HTTTRQWFlJVVZX102MsFuOHP/wht956K5FIpNdxr7zyCrNnz+ass85i3bp1PPzww93vjRo1iiuuuAJd17utksbGRsCdEMeOHYsQglNOOYU5c+bw8ccfA+DxeGhoaGDfvn0YhsHs2bMRQrB27Vqam5u59dZb8Xq9jBkzhiuuuIKXXnrpoLIlk0leeeUVFi5ciGEYnH/++YedBLuup+tfXV1dVverP7ntttsIBAL4/X40TePSSy8lHA7j8/m49dZbWbduHYlE4qD7+nw+br75ZgzDYN68eXi93l4tx97GWpbF66+/zv/+3/8bv9/Psccey8UXXzyQlzxiUYuSCvx+PzfddBM33XQTsViMxx57jDvuuIM333yTwsLCozr26tWr+fnPf86WLVuwLAvTNA9YEistLe1+HQgEuieX+vp6qqqqut8bNWrUYc+XSqW46aabmDlzJjfeeOMhx86fP7/XdfuvygR0y/XWW2/x8MMPs2PHDhzHIZVKceyxxwLw3e9+l4ceeojrr78egCuvvJLFixezd+9e6uvrmT17dvdxbdvu8ff+/P73v8fj8XRHly1cuJDrrruO5ubmbuuoL9czWOz/edm2zT/90z/x6quv0tLSgqa5z6otLS0Eg8ED9i0qKuoO5AD3e9mboultbFNTE7ZtU1lZ2UOm1atXH/W1KXqilIeiB+FwmBtvvJFHH32UPXv2HLXy+Ju/+Rv+8i//kl//+tf4fD5++tOf9vArHIqysjJqamqYPHkyADU1NYccb5om3/ve96ioqOh27vY3pmly++23s3TpUubNm4dhGNxyyy3dS1rhcJg777yTO++8ky1btnDttdcyffp0qqqqGD16NK+99lpW51m2bBmJRIJvfvObgOs8tyyLlStXcu211/ZJ5kAgQDKZ7P67oaGhT/v3BSFE9+tly5Z1L9FVV1fT0tLC6aefzkAW8i4pKUHTNOrq6hgzZgxw+O+N4shQy1YKHn74YdasWYNpmqTTaZ588kmi0SgTJkw46PiucVJKMpkM6XS62yn8VeLxOAUFBfh8PtasWcPKlSuzluuCCy7gscceo62tjdraWv793/+917GWZXH77bfj8/lYunRp91Nuf2OaJqZpUlxcjMfj4a233mLVqlXd77/55pvs3LkTKSXhcBhd19E0jRkzZhAOh3nsscdIpVLYts3mzZtZs2bNAeeoq6vjvffe45FHHmHZsmUsW7aM5cuXs2jRoj75fbqYOnUqL730EpZlsXbtWl599dWjugfZEo/H8Xq9FBYWkkwm+cUvfjHg5zQMg3POOYd//dd/JZVKsWXLFv7nf/5nwM87ElHKQ4EQgh//+MecdtppnHnmmbz77rs8+uijvYa4fve732XGjBl89tln/OQnP2HGjBl89NFHBx1777338q//+q/MmjWLhx9+mAsuuCBruW699VZGjRrFvHnzuP766w+5dv3ZZ5/x5ptvsmrVKk4++WRmzZrFrFmzun0R/UU4HObuu+/mjjvu4OSTT2blypXMnTu3+/2dO3dy3XXXMWvWLK688kq+853vcOqpp6LrOr/61a/YuHEj8+bN47TTTuPuu+8+qEN4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3377LVu2bOGzzz5j5cqVjZ5/9913SUtLIz09nYEDBzJp0iQ2b97cDpE27bXXXqNPnz6kp6f7/mVkZLR3WM169913+eUvf9neYUitRCYPqRFd13n77bfbOwy/1S/tcK5ycnLo2LEjdru92dcMGDCAnTt3sn37dm655RZ+97vfUV5efr6htprrr7+enTt3+v5t3769vUMKGI/H094hSKeRyUNq5J577mHp0qVUVlY2ei47O5tevXo1+EO+8847WbFiBeD9dnn77bfzwgsvkJGRwdVXX82OHTt49913GT16NMOGDWP16tUN9llWVsZdd91Feno6d9xxBzk5Ob7nDh06xF133cWQIUPIysriww8/9D03Z84cnn76aaZNm8aAAQPYunVro3gLCgq4//77GTJkCNdccw3vvPMO4G1NPfnkk3z33Xekp6fz6quvnvGcqKrK5MmTqaur48SJE77Hly5dyrBhwxg5ciSrVq3yPf7pp59y4403MnDgQEaPHs1rr73me87pdDJ79mwyMzPJyMhg8uTJFBcXA97iQI8//jgjR45k1KhRvPzyy34nxXq9evVi+fLlXHvttQwePJi5c+dy+pzgd955h+uvv5709HTGjx/PDz/8AHjP+Z133klGRgY33HAD//rXv3zbnP5ZQ+PWRHPHPHToEE8//bTvfNe3kFwuF/PmzWPMmDEMHz6cp556irq6OuDUrcFFixYxYsQIHnvsMUpLS7nvvvvIyMhgyJAhTJ06FcMwWnR+pPNzyS/JLjV2xRVXMGTIEJYsWcKsWbP83n737t3ceuutbN26lVdffZWHH36Yq666io0bN7Jt2zZmzJjBtddeS2hoKAAffPABixYton///syfP5/Zs2ezfPlyampquPvuu5k5cyaLFy/mwIED3H333fTo0YMePXoA3jWAFi1axH//93/jdrsbxfLII4/QvXt3vvjiCw4fPsxdd91Fp06duPXWWzGZTKxYsYLly5ef9T15PB5WrFiB3W4nNTWVvXv3UlxcTFVVFZ9//jlffvklM2fOZNy4cURGRhISEsK8efPo0aMHP/74I3fffTdpaWmMGzeO1atX43A4+PTTT7FYLOzbt8+3xMujjz5KXFwcGzZsoLa2lvvuu4/k5GRuv/12vz8H8CaxlStX4nA4uPnmm7nqqqu48sor+eijj3jttddYuHAhffv25fjx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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "datasets_to_plot = [['TS 1 Phase A', 'TS 2 Phase A'],\n",
    "                    ['TS 1 Phase B', 'TS 2 Phase B'],\n",
    "                    ['TS Old Phase C', 'TS New Phase C']]\n",
    "titles = ['TS 1 and 2 Phase A Full Training',\n",
    "          'TS 1 and 2 Phase B Full Training',\n",
    "          'TS2 for TS Old and TS New Phase C Full Training']\n",
    "for dataset, title in zip(datasets_to_plot, titles):\n",
    "    plot_multiple_models(all_ts_phase_metrics_ts2, dataset,\n",
    "                         title=title)"
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
