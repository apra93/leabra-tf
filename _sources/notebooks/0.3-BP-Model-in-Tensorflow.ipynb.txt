{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 0.3 BP Model in Tensorflow"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Boilerplate\n",
    "\n",
    "The following subsections are largely boilerplate code, so skip around as needed."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Jupyter Extensions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Load [watermark](https://github.com/rasbt/watermark) to see the state of the machine and environment that's running the notebook. To make sense of the options, take a look at the [usage](https://github.com/rasbt/watermark#usage) section of the readme."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sun Mar 03 2019 01:37:24 \n",
      "\n",
      "CPython 3.6.8\n",
      "IPython 7.3.0\n",
      "\n",
      "numpy 1.16.2\n",
      "matplotlib 3.0.3\n",
      "seaborn 0.9.0\n",
      "tensorflow 1.12.0\n",
      "\n",
      "compiler   : GCC 7.3.0\n",
      "system     : Linux\n",
      "release    : 4.4.0-130-generic\n",
      "machine    : x86_64\n",
      "processor  : x86_64\n",
      "CPU cores  : 12\n",
      "interpreter: 64bit\n",
      "Git hash   : edd22d45c1c38e765037bf04d03c4caf4494dc66\n",
      "Git branch : master\n"
     ]
    }
   ],
   "source": [
    "# Load `watermark` extension\n",
    "%load_ext watermark\n",
    "# Display the status of the machine and packages. Add more as necessary.\n",
    "%watermark -v -n -m -g -b -t -p numpy,matplotlib,seaborn,tensorflow"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Load [autoreload](https://ipython.org/ipython-doc/3/config/extensions/autoreload.html) which will always reload modules marked with `%aimport`.\n",
    "\n",
    "This behavior can be inverted by running `autoreload 2` which will set everything to be auto-reloaded *except* for modules marked with `%aimport`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load `autoreload` extension\n",
    "%load_ext autoreload\n",
    "# Set autoreload behavior\n",
    "%autoreload 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Load `matplotlib` in one of the more `jupyter`-friendly [rich-output modes](https://ipython.readthedocs.io/en/stable/interactive/plotting.html). Some options (that may or may not have worked) are `inline`, `notebook`, and `gtk`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set the matplotlib mode\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Imports"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Static imports that shouldn't necessarily change throughout the notebook."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Standard library imports\n",
    "import os\n",
    "import logging\n",
    "from functools import reduce\n",
    "\n",
    "# Third party\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras import models, layers, initializers, optimizers\n",
    "from tqdm import tqdm"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Local imports that may or may not be autoreloaded. This section contains things that will likely have to be re-imported multiple times, and have additions or subtractions made throughout the project."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Task script\n",
    "%aimport leabratf.tasks.combinatorics.combigen\n",
    "import leabratf.tasks.combinatorics.combigen as cg\n",
    "# Visualization for the task\n",
    "%aimport leabratf.visualization.combigen_heatmap\n",
    "import leabratf.visualization.combigen_heatmap as cgh\n",
    "# Utility functions\n",
    "%aimport leabratf.utils\n",
    "from leabratf.utils import setup_logging\n",
    "%aimport leabratf.constants\n",
    "from leabratf.constants import DIR_MODELS"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Initial Setup"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Set [seaborn defaults](https://seaborn.pydata.org/generated/seaborn.set.html) for matplotlib."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "sns.set()\n",
    "sns.set_context(\"notebook\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Set up the logger configuration to something more useful than baseline. Creates log files for the different log levels in the `logs` directory.\n",
    "\n",
    "See `logging.yml` for the exact logging configuration."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Run base logger setup\n",
    "# setup_logging()\n",
    "# Define a logger object\n",
    "logger = logging.getLogger('leabratf')\n",
    "# Don't propagate messages\n",
    "logger.propagate = False\n",
    "\n",
    "tf.logging.set_verbosity(logging.INFO)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Global Variables"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Combigen Task Variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Number of slots in a training set\n",
    "STACK = 4\n",
    "# Size of each axis in the input array\n",
    "SIZE = 5\n",
    "# Number of axes to use per slot\n",
    "DIMS = 2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Data Parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Number of epochs to train for\n",
    "EPOCHS = 500\n",
    "# Number of samples in the training set\n",
    "N_TRAIN= 100\n",
    "# Number of samples in the validation set\n",
    "N_VAL = 50\n",
    "# Number of samples in the testing set\n",
    "N_TEST = 500"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Datasets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Training Data\n",
    "Y_TRAIN = cg.generate_labels(n_samples=N_TRAIN, stack=STACK, size=SIZE, dims=DIMS)\n",
    "X_TRAIN = cg.inverse_transform(Y_TRAIN)\n",
    "# Validation Data\n",
    "Y_VAL = cg.generate_labels(n_samples=N_VAL, stack=STACK, size=SIZE, dims=DIMS)\n",
    "X_VAL = cg.inverse_transform(Y_VAL)\n",
    "# Testing data\n",
    "Y_TEST = cg.generate_labels(n_samples=N_TEST, stack=STACK, size=SIZE, dims=DIMS)\n",
    "X_TEST = cg.inverse_transform(Y_TEST)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Network Parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Learning rate\n",
    "ALPHA = 0.01\n",
    "# Batch size\n",
    "BATCH_SIZE = 1\n",
    "# Number of parameters in the inputs\n",
    "N_INPUTS = STACK * SIZE ** DIMS\n",
    "# Number of hidden units\n",
    "N_HIDDEN_1 = 100\n",
    "# Number of parameters in the labels\n",
    "N_OUTPUTS = STACK * SIZE * DIMS"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Training Parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 231,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Number of times to print an update\n",
    "N_UPDATES = 5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Background\n",
    "\n",
    "This section goes over some of the background information for the notebook using results from previous notebooks. Skip around as needed."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### The Combigen Task\n",
    "\n",
    "Quickly remind ourselves what the task looks like before diving in."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 40 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cgh.visualize_combigen(5)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Keras Implementation\n",
    "\n",
    "In nb-0.2.x, the O'Reilly BP model was implemented in keras with the code having this general structure:\n",
    "\n",
    "```\n",
    "def bp_model_bce(hidden_units=100, stack=STACK, size=SIZE, dims=DIMS):\n",
    "    \"\"\"Builds and returns the model\"\"\"\n",
    "    model = models.Sequential()\n",
    "    model.add(layers.Reshape((stack*size*size,), name='Initial_reshape'))\n",
    "    # Single hidden layer\n",
    "    model.add(layers.Dense(hidden_units, activation='sigmoid', name='Hidden_Layer'))\n",
    "    # Output layer\n",
    "    model.add(layers.Dense(stack*size*dims, activation='sigmoid', name='Output_Layer'))\n",
    "    # Reshape to match the labels\n",
    "    model.add(layers.Reshape((stack, size, dims), name='Output_reshape'))\n",
    "    \n",
    "    # Loss and optimizer to use, along with metrics to track\n",
    "    model.compile(optimizer=optimizers.SGD(lr=0.01), \n",
    "                  loss='binary_crossentropy', \n",
    "                  metrics=['accuracy'])\n",
    "    return model\n",
    "```\n",
    "\n",
    "With the main difference between models tested in nb-0.2.1 being the loss functions. The two most interesting models had the following training curves:\n",
    "\n",
    "**Binary cross-entropy loss with stochastic gradient descent**\n",
    "\n",
    "\n",
    "![BCE_SGD](images/nb0.2.1_bce_sgd_5000_epochs.png)\n",
    "\n",
    "\n",
    "**Mean-squared-error loss with stochastic gradient descent**\n",
    "\n",
    "\n",
    "![MSE_SGD](images/nb0.2.1_mse_sgd_5000_epochs.png)\n",
    "\n",
    "\n",
    "Some things to note are that the models were trained to 10 times the number of epochs as O'Reilly did (500). However, a dotted vertical line was added at the 500 epoch mark to make it clear what the model's performance would have looked like."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Tensorflow BP Model\n",
    "\n",
    "Using the results of the keras implementation as the benchmark for this model, let's rewrite the model using pure tensorflow. Let's start by defining the weights and associated biases."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Variables\n",
    "\n",
    "Straight forward section where we define the weights and biases as `tf.Variable`s. Additionally, create an empty list that will contain the initialization operations to be performed at the start of a session."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 296,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Weights and biases\n",
    "weights = {\n",
    "    'h1': tf.Variable(tf.random_normal([N_INPUTS, N_HIDDEN_1])),\n",
    "    'out': tf.Variable(tf.random_normal([N_HIDDEN_1, N_OUTPUTS]))\n",
    "}\n",
    "biases = {\n",
    "    'b1': tf.Variable(tf.random_normal([N_HIDDEN_1])),\n",
    "    'out': tf.Variable(tf.random_normal([N_OUTPUTS]))\n",
    "}\n",
    "\n",
    "# List for initialization operations\n",
    "init_ops = [tf.global_variables_initializer()]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Datasets\n",
    "\n",
    "Now let's use the `tf.data` API to wrap our task data. \n",
    "\n",
    "The first step of the setup is that each of the datasets (training, validation, and testing) are turned into their own `Dataset` objects."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 288,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Training dataset\n",
    "dataset_train = tf.data.Dataset.from_tensor_slices(\n",
    "    (X_TRAIN, Y_TRAIN)).repeat().batch(BATCH_SIZE)\n",
    "# Validation dataset\n",
    "dataset_val = tf.data.Dataset.from_tensor_slices(\n",
    "    (X_VAL, Y_VAL)).repeat().batch(N_VAL)\n",
    "# Testing dataset\n",
    "dataset_test = tf.data.Dataset.from_tensor_slices(\n",
    "    (X_TEST, Y_TEST)).repeat().batch(N_TEST)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, let's define the iterators for each of the datasets, and then add their initializations to the `init_ops` list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 289,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Training iterator\n",
    "train_iter = dataset_train.make_initializable_iterator()\n",
    "# Validation iterator\n",
    "val_iter = dataset_val.make_initializable_iterator()\n",
    "# Testing iterator\n",
    "test_iter = dataset_test.make_initializable_iterator()\n",
    "\n",
    "# Add the initiatlizations to the init opts\n",
    "init_ops += [train_iter.initializer, val_iter.initializer, test_iter.initializer]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And finally, the interesting part.\n",
    "\n",
    "Rather than creating separate next elements for the model, the `tf.data` API has a string handler iterator so we can contextually switch the active `Dataset` object, resulting in different values being used for `x` and `y`.\n",
    "\n",
    "The way this is done is by defining a `tf.placeholder` variable, which is used first to create a string handler iterator, and later to hold the dataset-indicating string handle. The string handler iterator is what then changes the values of `x` and `y`, naturally also supplying them using the `get_next` method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 291,
   "metadata": {},
   "outputs": [],
   "source": [
    "# The placeholder variable of type string\n",
    "handle = tf.placeholder(tf.string, shape=[])\n",
    "# Iterator from string handle\n",
    "iterator = tf.data.Iterator.from_string_handle(\n",
    "    handle, dataset_train.output_types, \n",
    "    dataset_train.output_shapes)\n",
    "# x and y that will be used in the graph\n",
    "x, y = iterator.get_next()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### O'Reilly Model\n",
    "\n",
    "The architecture is the same as before, with one slight change. The output layer no longer has the sigmoid activation, but only because it is baked into the loss function `tf.nn.sigmoid_cross_entropy_with_logits`, which naturally takes in logits.\n",
    "\n",
    "Note that when instantiating the model, `x` is passed in as the inputs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 292,
   "metadata": {},
   "outputs": [],
   "source": [
    "def oreilly_model(inputs):\n",
    "    # Reshape for hidden layer\n",
    "    inputs = tf.reshape(inputs, shape=[-1, N_INPUTS])\n",
    "    # Single hidden layer\n",
    "    inputs = tf.sigmoid(tf.add(tf.matmul(inputs, weights['h1']), biases['b1']))\n",
    "    # Output layer\n",
    "    inputs = tf.add(tf.matmul(inputs, weights['out']), biases['out'])\n",
    "    # Reshape for labels\n",
    "    return tf.reshape(inputs, shape=[-1, STACK, SIZE, DIMS])\n",
    "\n",
    "# Build the model\n",
    "logits = oreilly_model(x)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### The Loss Function\n",
    "\n",
    "For the loss, we'll use binary cross entropy with vanilla gradient descent."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 295,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Ensure y is cast to the same type as logits\n",
    "labels = tf.cast(y, logits.dtype)\n",
    "\n",
    "# Define loss and optimizer\n",
    "loss_op = tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(\n",
    "    logits=logits, labels=labels))\n",
    "optimizer = tf.train.GradientDescentOptimizer(learning_rate=ALPHA)\n",
    "\n",
    "# train_op = optimizer.minimize(loss_op, global_step=tf.train.get_global_step())\n",
    "train_op = optimizer.minimize(loss_op)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Metrics\n",
    "\n",
    "The last few ops to define before training are the metrics. In particular, O'Reilly defines accuracy to be the fraction of samples where the model was on the correct side of 0.5 for all elements in the outputs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get the number of correct predictions\n",
    "correct_pred = tf.reduce_all(tf.equal(tf.round(tf.sigmoid(logits)), labels), \n",
    "                             axis=(1,2,3))\n",
    "# Evaluate the accuracy of the model\n",
    "accuracy_op = tf.reduce_mean(tf.cast(correct_pred, tf.float16))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Training the Model\n",
    "\n",
    "Train the model for `EPOCHS` epochs, saving the relevant metrics along the way."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 283,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Completed epoch 1/500. Metrics:\n",
      "                     Loss       Accuracy\n",
      "    Epoch:          2.7881       0.0000\n",
      "    Validation:     2.6322       0.0000\n",
      "\n",
      "Completed epoch 101/500. Metrics:\n",
      "                     Loss       Accuracy\n",
      "    Epoch:          0.6243       0.0000\n",
      "    Validation:     0.8457       0.0000\n",
      "\n",
      "Completed epoch 201/500. Metrics:\n",
      "                     Loss       Accuracy\n",
      "    Epoch:          0.3976       0.0000\n",
      "    Validation:     0.6830       0.0000\n",
      "\n",
      "Completed epoch 301/500. Metrics:\n",
      "                     Loss       Accuracy\n",
      "    Epoch:          0.2768       0.0000\n",
      "    Validation:     0.5896       0.0000\n",
      "\n",
      "Completed epoch 401/500. Metrics:\n",
      "                     Loss       Accuracy\n",
      "    Epoch:          0.2047       0.0400\n",
      "    Validation:     0.5280       0.0000\n",
      "\n",
      "Completed epoch 500/500. Metrics:\n",
      "                     Loss       Accuracy\n",
      "    Epoch:          0.1589       0.1300\n",
      "    Validation:     0.4845       0.0000\n",
      "\n",
      "Optimization Finished!\n",
      "Testing Accuracy: 0.0\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "# Start training\n",
    "with tf.Session() as sess:\n",
    "    # Dict with the various metrics we care about\n",
    "    metrics = {'loss':[], 'acc':[], 'val_loss':[], 'val_acc':[]}\n",
    "    # Run the initialization ops\n",
    "    sess.run(init_ops)\n",
    "    # Define training and validation handlers\n",
    "    training_handle, validation_handle, testing_handle = sess.run(\n",
    "        [train_iter.string_handle(),\n",
    "         val_iter.string_handle(),\n",
    "         test_iter.string_handle()])\n",
    "    \n",
    "    for epoch in range(EPOCHS):\n",
    "        epoch_loss, epoch_acc = np.zeros([N_TRAIN]), np.zeros([N_TRAIN])\n",
    "        # Run the training step\n",
    "        for i in range(N_TRAIN):\n",
    "            _, epoch_loss[i], epoch_acc[i] = sess.run([train_op, loss_op, accuracy_op],\n",
    "                                                       feed_dict={handle: training_handle})\n",
    "        loss, acc = np.mean((epoch_loss, epoch_acc), axis=1)\n",
    "        \n",
    "        # Calculate validation accuracy and loss\n",
    "        val_loss, val_acc = sess.run([loss_op, accuracy_op],\n",
    "                                     feed_dict={handle: validation_handle})\n",
    "        # Record\n",
    "        for key, value in zip(metrics.keys(), [loss, acc, val_loss, val_acc]):\n",
    "            metrics[key].append(value)\n",
    "            \n",
    "        # Selectively display the epoch number\n",
    "        if not epoch % (EPOCHS / N_UPDATES) or epoch == EPOCHS - 1:\n",
    "            print(('Completed epoch {0}/{1}. Metrics:\\n' + \n",
    "                   '                     Loss       Accuracy\\n' +\n",
    "                   '    Epoch:      {2:10.4f}   {3:10.4f}\\n' +\n",
    "                   '    Validation: {4:10.4f}   {5:10.4f}\\n').format(\n",
    "                      epoch+1, EPOCHS, loss, acc, val_loss, val_acc))\n",
    "\n",
    "    print(\"Optimization Finished!\")\n",
    "    # Calculate accuracy for MNIST test images\n",
    "    print(\"Testing Accuracy:\", sess.run(accuracy_op, feed_dict={handle: testing_handle}))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 284,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def plot_history(history):\n",
    "    for key, array in history.items():\n",
    "        plt.plot(array, label=key)\n",
    "    plt.title('Training History')\n",
    "    plt.xlabel('Epochs')\n",
    "    if len(array) > EPOCHS:\n",
    "        plt.axvline(EPOCHS, linestyle='--', label='500 Epochs')\n",
    "    plt.legend()\n",
    "    \n",
    "plot_history(metrics)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 286,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Completed epoch 1/5000. Metrics:\n",
      "                     Loss       Accuracy\n",
      "    Epoch:          2.7965       0.0000\n",
      "    Validation:     2.7782       0.0000\n",
      "\n",
      "Completed epoch 1001/5000. Metrics:\n",
      "                     Loss       Accuracy\n",
      "    Epoch:          0.0753       0.7500\n",
      "    Validation:     0.3770       0.0000\n",
      "\n",
      "Completed epoch 2001/5000. Metrics:\n",
      "                     Loss       Accuracy\n",
      "    Epoch:          0.0327       1.0000\n",
      "    Validation:     0.2981       0.0000\n",
      "\n",
      "Completed epoch 3001/5000. Metrics:\n",
      "                     Loss       Accuracy\n",
      "    Epoch:          0.0209       1.0000\n",
      "    Validation:     0.2639       0.0000\n",
      "\n",
      "Completed epoch 4001/5000. Metrics:\n",
      "                     Loss       Accuracy\n",
      "    Epoch:          0.0154       1.0000\n",
      "    Validation:     0.2436       0.0200\n",
      "\n",
      "Completed epoch 5000/5000. Metrics:\n",
      "                     Loss       Accuracy\n",
      "    Epoch:          0.0121       1.0000\n",
      "    Validation:     0.2297       0.0200\n",
      "\n",
      "Optimization Finished!\n",
      "Testing Accuracy: 0.024\n",
      "CPU times: user 24min 22s, sys: 2min 28s, total: 26min 50s\n",
      "Wall time: 15min 33s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "total_epochs = 10 * EPOCHS\n",
    "\n",
    "metrics = {'loss':[], 'acc':[], 'val_loss':[], 'val_acc':[]}\n",
    "# Start training\n",
    "with tf.Session() as sess:\n",
    "    # Run the initialization ops\n",
    "    sess.run(init_ops)\n",
    "    # Define training and validation handlers\n",
    "    training_handle, validation_handle, testing_handle = sess.run(\n",
    "        [train_iter.string_handle(),\n",
    "         val_iter.string_handle(),\n",
    "         test_iter.string_handle()])\n",
    "    \n",
    "    for epoch in range(total_epochs):\n",
    "        epoch_loss, epoch_acc = np.zeros([N_TRAIN]), np.zeros([N_TRAIN])\n",
    "        # Run the training step\n",
    "        for i in range(N_TRAIN):\n",
    "            _, epoch_loss[i], epoch_acc[i] = sess.run([train_op, loss_op, accuracy_op],\n",
    "                                                  feed_dict={handle: training_handle})\n",
    "        loss, acc = np.mean((epoch_loss, epoch_acc), axis=1)\n",
    "        \n",
    "        # Calculate validation accuracy and loss\n",
    "        val_loss, val_acc = sess.run([loss_op, accuracy_op],\n",
    "                                     feed_dict={handle: validation_handle})\n",
    "        # Record\n",
    "        for key, value in zip(metrics.keys(), [loss, acc, val_loss, val_acc]):\n",
    "            metrics[key].append(value)\n",
    "            \n",
    "        # Selectively display the epoch number\n",
    "        if not epoch % (total_epochs / N_UPDATES) or epoch == total_epochs - 1:\n",
    "            print(('Completed epoch {0}/{1}. Metrics:\\n' + \n",
    "                   '                     Loss       Accuracy\\n' +\n",
    "                   '    Epoch:      {2:10.4f}   {3:10.4f}\\n' +\n",
    "                   '    Validation: {4:10.4f}   {5:10.4f}\\n').format(\n",
    "                      epoch+1, total_epochs, loss, acc, val_loss, val_acc))\n",
    "\n",
    "    print(\"Optimization Finished!\")\n",
    "    # Calculate accuracy for MNIST test images\n",
    "    print(\"Testing Accuracy:\", sess.run(accuracy_op, feed_dict={handle: testing_handle}))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 287,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_history(metrics)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
