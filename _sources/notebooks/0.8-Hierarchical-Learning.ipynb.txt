{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 0.8 Hierarchical Learning\n",
    "\n",
    "Quickly put together a model to see how neural networks perform when run on tasks with a heirarchical structure such as the one laid out in [this](http://ski.clps.brown.edu/papers/CollinsFrank_Cognition.pdf) paper."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Boilerplate\n",
    "\n",
    "The following subsections are largely boilerplate code, so skip around as needed."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Jupyter Extensions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Load [watermark](https://github.com/rasbt/watermark) to see the state of the machine and environment that's running the notebook. To make sense of the options, take a look at the [usage](https://github.com/rasbt/watermark#usage) section of the readme."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Thu Jun 06 2019 16:35:02 \n",
      "\n",
      "CPython 3.6.8\n",
      "IPython 7.3.0\n",
      "\n",
      "numpy 1.16.2\n",
      "matplotlib 3.0.2\n",
      "seaborn 0.9.0\n",
      "tensorflow 1.10.0\n",
      "\n",
      "compiler   : GCC 7.3.0\n",
      "system     : Linux\n",
      "release    : 4.18.0-20-generic\n",
      "machine    : x86_64\n",
      "processor  : x86_64\n",
      "CPU cores  : 8\n",
      "interpreter: 64bit\n",
      "Git hash   : 0acecbc0d8d21d0b2ddae2d03e5b9a2ba46c9778\n",
      "Git branch : master\n"
     ]
    }
   ],
   "source": [
    "# Load `watermark` extension\n",
    "%load_ext watermark\n",
    "# Display the status of the machine and packages. Add more as necessary.\n",
    "%watermark -v -n -m -g -b -t -p numpy,matplotlib,seaborn,tensorflow"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Load [autoreload](https://ipython.org/ipython-doc/3/config/extensions/autoreload.html) which will always reload modules marked with `%aimport`.\n",
    "\n",
    "This behavior can be inverted by running `autoreload 2` which will set everything to be auto-reloaded *except* for modules marked with `%aimport`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load `autoreload` extension\n",
    "%load_ext autoreload\n",
    "# Set autoreload behavior\n",
    "%autoreload 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Load `matplotlib` in one of the more `jupyter`-friendly [rich-output modes](https://ipython.readthedocs.io/en/stable/interactive/plotting.html). Some options (that may or may not have worked) are `inline`, `notebook`, and `gtk`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set the matplotlib mode.\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Imports"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Static imports that shouldn't necessarily change throughout the notebook."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Standard library imports\n",
    "import logging\n",
    "import os\n",
    "from pathlib import Path\n",
    "from copy import deepcopy\n",
    "from pprint import pprint\n",
    "\n",
    "# Third party\n",
    "import IPython as ipy\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import tensorflow as tf\n",
    "from pstar import pdict"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Local imports that may or may not be autoreloaded. This section contains things that will likely have to be re-imported multiple times, and have additions or subtractions made throughout the project."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Utility functions\n",
    "%aimport leabratf.utils\n",
    "from leabratf.utils import setup_logging\n",
    "%aimport leabratf.constants\n",
    "from leabratf.constants import DIR_DATA_PROC"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Initial Setup"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Set [seaborn defaults](https://seaborn.pydata.org/generated/seaborn.set.html) for matplotlib."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "sns.set()\n",
    "sns.set_context(\"notebook\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Set up the logger configuration to something more useful than baseline. Creates log files for the different log levels in the `logs` directory.\n",
    "\n",
    "See `logging.yml` for the exact logging configuration."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Run base logger setup\n",
    "setup_logging()\n",
    "# Define a logger object\n",
    "logger = logging.getLogger('leabratf')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Task Definitions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Constants"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "N_COLORS = 5\n",
    "N_SHAPES = 4\n",
    "N_ACTIONS = 4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Phase Colors and Shapes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# All the colors and shapes\n",
    "all_colors = [0, 1, 2, 3, 4]\n",
    "all_shapes = [1 ,2, 3, 4]\n",
    "\n",
    "# Phase A\n",
    "phase_a_colors = [0, 1, 2]\n",
    "phase_a_shapes = [1, 2]\n",
    "\n",
    "# Phase B\n",
    "phase_b_colors = [0, 1, 2]\n",
    "phase_b_shapes = [3, 4]\n",
    "\n",
    "# Phase C\n",
    "phase_c_colors = [3, 4]\n",
    "phase_c_shapes = [3, 4]\n",
    "\n",
    "# Color lines correspond to a particular horizontal line\n",
    "# # colors are not uniformly selected for\n",
    "# Shapes corespond to a particular vertical line\n",
    "# Color, Shape combinations correspond to a particular action 1-4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Action Mapping\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "action_dictonary = {\n",
    "    # (Color,Shape) : Action\n",
    "    #      Phase A       |       Phase B\n",
    "    (0,1) : 1, (0,2) : 2, (0,3) : 1, (0,4) : 3, # TS 1\n",
    "    (1,1) : 1, (1,2) : 2, (1,3) : 1, (1,4) : 3, # TS 1\n",
    "    (2,1) : 3, (2,2) : 4, (2,3) : 4, (2,4) : 2, # TS 2\n",
    "    #                    |       Phase C\n",
    "                          (3,3) : 1, (3,4) : 3, # TS Old\n",
    "                          (4,3) : 1, (4,4) : 2} # TS New"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Generation Functions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Phase"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "def phase_labels(n_samples,\n",
    "                 phase_colors,\n",
    "                 phase_shapes,\n",
    "                 p_colors,\n",
    "                 p_shapes,\n",
    "                 n_colors=N_COLORS,\n",
    "                 n_shapes=N_SHAPES,\n",
    "                ):\n",
    "    \"\"\"Base label generator.\"\"\"\n",
    "    # N Color samples\n",
    "    color_choices = np.eye(n_colors)[np.random.choice(\n",
    "        phase_colors,\n",
    "        size=n_samples,\n",
    "        replace=True,\n",
    "        p=p_colors,\n",
    "    )].reshape((n_samples, n_colors, 1))\n",
    "    # N Shape samples\n",
    "    shape_choices = np.eye(n_shapes)[np.random.choice(\n",
    "        [s-1 for s in phase_shapes],\n",
    "        size=n_samples,\n",
    "        replace=True,\n",
    "        p=p_shapes,\n",
    "    )].reshape((n_samples, n_shapes, 1))\n",
    "    # Return the choices\n",
    "    return color_choices, shape_choices    \n",
    "\n",
    "def phase_a_labels(n_samples=120, \n",
    "                   colors=phase_a_colors,\n",
    "                   shapes=phase_a_shapes,\n",
    "                   p_colors=None,\n",
    "                   p_shapes=None,\n",
    "                ):\n",
    "    \"\"\"Label generator with defaults for phase a\"\"\"\n",
    "    # Color and shape probabilities\n",
    "    p_colors = p_colors or [.25, .25, .5]\n",
    "    p_shapes = p_shapes or [.5, .5]\n",
    "    return phase_labels(n_samples, colors, shapes, \n",
    "                        p_colors, p_shapes)\n",
    "\n",
    "def phase_b_labels(n_samples=120, \n",
    "                   colors=phase_b_colors,\n",
    "                   shapes=phase_b_shapes,\n",
    "                   p_colors=None,\n",
    "                   p_shapes=None,\n",
    "                ):\n",
    "    \"\"\"Label generator with defaults for phase b\"\"\"\n",
    "    # Color and shape probabilities\n",
    "    p_colors = p_colors or [.25, .25, .5]\n",
    "    p_shapes = p_shapes or [.5, .5]\n",
    "    return phase_labels(n_samples, colors, shapes, \n",
    "                        p_colors, p_shapes)\n",
    "\n",
    "def phase_c_labels(n_samples=120, \n",
    "                   colors=phase_c_colors,\n",
    "                   shapes=phase_c_shapes,\n",
    "                   p_colors=None,\n",
    "                   p_shapes=None,\n",
    "                ):\n",
    "    \"\"\"Label generator with defaults for phase c\"\"\"\n",
    "    # Color and shape probabilities\n",
    "    p_colors = p_colors or [.5, .5]\n",
    "    p_shapes = p_shapes or [.5, .5]\n",
    "    return phase_labels(n_samples, colors, shapes, \n",
    "                        p_colors, p_shapes)\n",
    "\n",
    "phase_labels_funcs = pdict({\n",
    "    'a' : phase_a_labels,\n",
    "    'b' : phase_b_labels,\n",
    "    'c' : phase_c_labels\n",
    "}) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Helper Functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "def integer_labels(labels):\n",
    "    \"\"\"Turns one-hot labels to integers\"\"\"\n",
    "    return [np.where(r==1)[0][0] for r in labels]\n",
    "    \n",
    "def input_array(color_choices, shape_choices, \n",
    "                n_shapes=N_SHAPES, n_colors=N_COLORS):\n",
    "    \"\"\"Turns one-hot labels to 2D input arrays with lines\"\"\"\n",
    "    # Full Color array\n",
    "    color_array = np.tile(color_choices, n_shapes)\n",
    "    # Full Shape Array\n",
    "    shape_array = np.transpose(\n",
    "        np.tile(shape_choices, n_colors),\n",
    "        [0, 2, 1])\n",
    "        \n",
    "    # Full data with both\n",
    "    x_data = np.maximum(color_array, shape_array)\n",
    "    return x_data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Action Selection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "def actions(color_choices, shape_choices, action_dict=None, n_actions=N_ACTIONS):\n",
    "    \"\"\"Implements the mapping from shapes and colors to actions\"\"\"\n",
    "    # Create the action dictionary to compare to\n",
    "    action_dict = action_dict or action_dictonary\n",
    "    # Make binary from one hot and increment shape by 1\n",
    "    color_binarized = integer_labels(color_choices)\n",
    "    shape_binarized = [i+1 for i in integer_labels(shape_choices)]\n",
    "    # Compile into a list of tuples\n",
    "    label_tuples = [(color, shape) for color, shape in zip(\n",
    "        color_binarized, shape_binarized)]\n",
    "    # Substitute based on the action dictionary\n",
    "    integer_actions = [action_dict[key] for key in label_tuples]\n",
    "    return np.eye(n_actions)[np.array(integer_actions)-1]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Making the Datasets"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Generating the Phase Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "datasets = [pdict(), pdict()]\n",
    "for key in phase_labels_funcs.keys():\n",
    "    for dataset in datasets:\n",
    "        choices = phase_labels_funcs[key]()\n",
    "        inputs = input_array(*choices)\n",
    "        labels = actions(*choices)\n",
    "        dataset[key] = (inputs, labels)\n",
    "train_dataset, test_dataset = datasets"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Tensorflow Datasets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "def make_tf_datasets(datasets, init_ops=None):\n",
    "    # The first step of the setup is that each of the datasets (training, validation, and \n",
    "    # testing) are turned into their own `Dataset` objects.\n",
    "    tf_datasets = pdict()\n",
    "    for data, name in zip(datasets, ['train', 'test']):\n",
    "        for key in data.keys():\n",
    "            tf_datasets[f'{name}_{key}'] = tf.data.Dataset.from_tensor_slices(\n",
    "                data[key]).repeat().batch(1 if name=='train' \n",
    "                                          else len(data[key][0]))\n",
    "    \n",
    "    # Next, let's define the iterators for each of the datasets, and then add their \n",
    "    # initializations to the `init_ops` list.\n",
    "    # Training iterator\n",
    "    iterators = pdict({name : data.make_initializable_iterator()\n",
    "                      for name, data in tf_datasets.items()})\n",
    "\n",
    "    # Add the initiatlizations to the init opts\n",
    "    init_ops = init_ops or []\n",
    "    init_ops += [iter.initializer for iter in iterators.values()]\n",
    "    \n",
    "    first_dataset = list(tf_datasets.values())[0] \n",
    "    output_types, output_shapes = first_dataset.output_types, first_dataset.output_shapes\n",
    "    \n",
    "    # And finally, the interesting part. Rather than creating separate next elements for \n",
    "    # the model, the `tf.data` API has a string handler iterator so we can contextually \n",
    "    # switch the active `Dataset` object, resulting in different values being used for `x` \n",
    "    # and `y`.\n",
    "\n",
    "    # The way this is done is by defining a `tf.placeholder` variable, which is used \n",
    "    # first to create a string handler iterator, and later to hold the dataset-indicating \n",
    "    # string handle. The string handler iterator is what then changes the values of `x` and \n",
    "    # `y`, naturally also supplying them using the `get_next` method.\n",
    "    # The placeholder variable of type string\n",
    "    handle = tf.placeholder(tf.string, shape=[])\n",
    "    \n",
    "    # Iterator from string handle\n",
    "    handle_iterator = tf.data.Iterator.from_string_handle(\n",
    "        handle, output_types, output_shapes)\n",
    "\n",
    "    # x and y that will be used in the graph\n",
    "    x, y = handle_iterator.get_next()\n",
    "    \n",
    "    return x, y, iterators, handle, init_ops"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Graph Definitions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### TF Variables\n",
    "\n",
    "Straight forward section where we define the weights and biases. One thing to note is that the weights are initialized using the `tf.contrib.layers.xavier_initializer`. \n",
    "\n",
    "Additionally, create an empty list that will contain the initialization operations to be performed at the start of a session."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "N_INPUTS = N_COLORS * N_SHAPES\n",
    "N_HIDDEN_1 = 100 \n",
    "N_OUTPUTS = 4\n",
    "\n",
    "# Cleanup any residual nodes\n",
    "tf.reset_default_graph()\n",
    "init_ops = []\n",
    "\n",
    "# Weights and biases\n",
    "weights = pdict({\n",
    "    'h1': tf.get_variable(\n",
    "        name='w_h1', \n",
    "        shape=[N_INPUTS, N_HIDDEN_1],\n",
    "        initializer=tf.contrib.layers.xavier_initializer(),\n",
    "        dtype=tf.float64),\n",
    "    'out': tf.get_variable(\n",
    "        name='w_out', \n",
    "        shape=[N_HIDDEN_1, N_OUTPUTS],\n",
    "        initializer=tf.contrib.layers.xavier_initializer(),\n",
    "        dtype=tf.float64),\n",
    "})\n",
    "biases = pdict({\n",
    "    'b1': tf.get_variable(\n",
    "        name=\"b_1\", \n",
    "        shape=[N_HIDDEN_1], \n",
    "        initializer=tf.zeros_initializer(),\n",
    "        dtype=tf.float64),\n",
    "    'out': tf.get_variable(\n",
    "        name=\"b_out\", \n",
    "        shape=[N_OUTPUTS], \n",
    "        initializer=tf.zeros_initializer(),\n",
    "        dtype=tf.float64),\n",
    "})\n",
    "\n",
    "init_ops = []"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model and Metrics\n",
    "\n",
    "The architecture is the same as previous notebooks. See `nb-0.3` for more details."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "def oreilly_model(inputs):\n",
    "    # Reshape for hidden layer\n",
    "    inputs = tf.reshape(inputs, shape=[-1, N_INPUTS])\n",
    "    # Single hidden layer\n",
    "    inputs = tf.sigmoid(tf.add(tf.matmul(inputs, weights['h1']), biases['b1']))\n",
    "    # Output layer\n",
    "    inputs = tf.add(tf.matmul(inputs, weights['out']), biases['out'])\n",
    "    # Reshape for labels\n",
    "    return tf.reshape(inputs, shape=[-1, N_OUTPUTS])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "TF_DEVICE = '/device:CPU:0'\n",
    "with tf.device(TF_DEVICE):\n",
    "    # Get the relevant dataset nodes\n",
    "    x, y, iterators, handler, init_ops = make_tf_datasets(\n",
    "        datasets, init_ops)\n",
    "\n",
    "    # Build the model\n",
    "    logits = oreilly_model(x)\n",
    "    # Ensure y is cast to the same type as logits\n",
    "    labels = tf.cast(y, logits.dtype)\n",
    "    \n",
    "    # We will keep this in for now\n",
    "    # Define alpha as placeholder variable\n",
    "    alpha_ph = tf.placeholder(tf.float32, shape=[])\n",
    "\n",
    "    # Define loss and optimizer\n",
    "    loss_op = tf.reduce_mean(tf.losses.softmax_cross_entropy(\n",
    "        labels, logits))\n",
    "\n",
    "    # Define some intermediate nodes\n",
    "    predictions = tf.nn.softmax(logits)\n",
    "    rounded_predictions = tf.round(predictions)\n",
    "    equal_labels_and_preds = tf.equal(rounded_predictions, labels)\n",
    "    \n",
    "    # Accuracy \n",
    "    sample_acc = tf.reduce_all(equal_labels_and_preds, axis=1)\n",
    "    accuracy = tf.reduce_mean(tf.cast(sample_acc, tf.float64))\n",
    " \n",
    "#     # Elemental Accuracy \n",
    "#     el_acc_op = tf.reduce_mean(tf.cast(equal_labels_and_preds, tf.float32))\n",
    "#     # Axis Accuracy\n",
    "#     axis_acc_op = tf.reduce_mean(tf.cast(axis_acc, tf.float32))\n",
    "#     # Slot Accuracy\n",
    "#     slot_acc_op = tf.reduce_mean(tf.cast(slot_acc, tf.float32))\n",
    "#     # Sample Accuracy\n",
    "#     sample_acc_op = tf.reduce_mean(tf.cast(sample_acc, tf.float32))\n",
    "    \n",
    "#     # metric ops\n",
    "#     met_op_names = ['loss', 'el_acc', 'ax_acc', 'sl_acc', 'sm_acc']\n",
    "#     met_ops = [loss_op, el_acc_op, axis_acc_op, slot_acc_op, sample_acc_op]\n",
    "#     # Put them in a dict\n",
    "#     met_op_dict = pdict({name : op for name, op in zip(met_op_names, met_ops)})\n",
    "\n",
    "#     # Generic metrics dict\n",
    "#     generic_metrics_dict = lambda : pdict({name : [] \n",
    "#                                            for name in met_op_names+['epoch']})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.23333333333333334"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "phase = 'a'\n",
    "def test_func(init_ops):\n",
    "    with tf.Session() as sess:\n",
    "        if tf.global_variables_initializer() not in init_ops:\n",
    "            init_ops += [tf.global_variables_initializer(), \n",
    "                         tf.local_variables_initializer()]\n",
    "        sess.run(init_ops)\n",
    "        handles = pdict({name : sess.run(iterators[name].string_handle())\n",
    "                    for name in iterators.keys()})\n",
    "        return sess.run(accuracy, feed_dict={handler: handles[f'test_{phase}']})\n",
    "test_func(init_ops)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "### Varying the Optimizer\n",
    "\n",
    "Let's create several different training operations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "with tf.device(TF_DEVICE):\n",
    "    # Adam\n",
    "    train_op_adam = tf.train.AdamOptimizer(alpha_ph).minimize(loss_op)\n",
    "    # Adadelta \n",
    "    train_op_adadelta = tf.train.AdadeltaOptimizer(alpha_ph).minimize(loss_op)\n",
    "    # RMSProp\n",
    "    train_op_rmsprop = tf.train.RMSPropOptimizer(alpha_ph).minimize(loss_op)\n",
    "    # SGD\n",
    "    train_op_sgd = tf.train.GradientDescentOptimizer(alpha_ph).minimize(loss_op)\n",
    "    \n",
    "# And now add these to a dictionary\n",
    "optimizer_dict = pdict({\n",
    "    'Adam' : train_op_adam,\n",
    "    'Adadelta' : train_op_adadelta,\n",
    "    'RMSProp' : train_op_rmsprop,\n",
    "    'sgd' : train_op_sgd,\n",
    "})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### New Session Function\n",
    "\n",
    "In the event that we do not want to immediately close sessions, we won't be using the context handler but will still need to grab new sessions as necessary. So let's quickly write a function that will properly run `sess.close()` if a previous session exists and then return a new `tf.Session` instance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "def new_session(*args, **kwargs):\n",
    "    # Try to close the globally defined session if it isn't already\n",
    "    try:\n",
    "        if not sess._closed:\n",
    "            sess.close()\n",
    "    # If it doesn't exist, then just pass\n",
    "    except NameError:\n",
    "        pass\n",
    "    # Return the new instance\n",
    "    return tf.Session(*args, **kwargs)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Defining the Training Function\n",
    "\n",
    "Let's define a function that runs the training routine and accepts the number of epochs as the inputs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Based on code from \n",
    "# https://codereview.stackexchange.com/questions/169870/decorator-to-measure-execution-time-of-a-function\n",
    "from functools import wraps\n",
    "from time import time\n",
    "import datetime\n",
    "\n",
    "def timing(func):\n",
    "    @wraps(func)\n",
    "    def wrapper(*args, **kwargs):\n",
    "        start = time()\n",
    "        result = func(*args, **kwargs)\n",
    "        end = time()\n",
    "        logger.info('Elapsed time: {}'.format(\n",
    "            datetime.timedelta(seconds=end-start)))\n",
    "        return result\n",
    "    return wrapper"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "@timing\n",
    "def train_exp(\n",
    "    sess, \n",
    "    lr=0.0033, \n",
    "    epochs=100,\n",
    "    train_op=optimizer_dict['Adam'], \n",
    "    init_ops=None,\n",
    "    verbose=False,\n",
    "    phases=['a'],\n",
    "    n_train=None,\n",
    "    n_val=5,\n",
    "):\n",
    "    log_level = logger.info if verbose else logger.debug\n",
    "    log_level(f'Beginning training using learning rate {lr}, {train_op.name} '\n",
    "              f'training routine, for {epochs} epochs')\n",
    "    # Ensure this is an int\n",
    "    epochs = int(epochs)\n",
    "    # Dict with the various metrics we care about while training\n",
    "    phase_metrics = pdict()\n",
    "    \n",
    "    # Run the initialization ops\n",
    "    init_ops = init_ops or []\n",
    "    if tf.global_variables_initializer() not in init_ops:\n",
    "        init_ops += [tf.global_variables_initializer(), \n",
    "                     tf.local_variables_initializer()]\n",
    "    sess.run(init_ops)\n",
    "    \n",
    "    # Define training and validation handlers\n",
    "    handles = pdict({name : sess.run(iterators[name].string_handle())\n",
    "                    for name in iterators.keys()})\n",
    "    \n",
    "    for phase in phases:\n",
    "        n_train = len(train_dataset[phase][0])\n",
    "        training_metrics = pdict({'loss':[], 'accuracy':[], 'sample':[]})\n",
    "        for epoch in range(epochs):\n",
    "            for i in range(n_train):\n",
    "                # Training op and compute metrics\n",
    "                _ = sess.run(\n",
    "                    train_op, \n",
    "                    feed_dict={alpha_ph: lr, handler: handles[f'train_{phase}']})\n",
    "\n",
    "                if not i % n_val or i == n_train - 1:\n",
    "                    metrics = sess.run(\n",
    "                        [loss_op, accuracy],\n",
    "                        feed_dict={handler: handles[f'test_{phase}']})\n",
    "                    # Record\n",
    "                    for key, metric in zip(['loss', 'accuracy'], metrics):\n",
    "                        training_metrics[key].append(metric)\n",
    "                    training_metrics['sample'].append(i + epoch*n_train)\n",
    "                    log_level(f'Completed Sample {i + epoch*n_train}')\n",
    "        phase_metrics[phase] = training_metrics\n",
    "\n",
    "    return phase_metrics"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Training and Testing on the Phase Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2019-06-06 16:52:04 apra-xps-13 leabratf[22508] INFO Elapsed time: 0:00:00.995685\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sess = new_session()\n",
    "phase_metrics = train_exp(\n",
    "    sess, \n",
    "    lr=0.00333, \n",
    "    epochs=1,\n",
    "    train_op=optimizer_dict['Adam'], \n",
    "    init_ops=init_ops,\n",
    "    verbose=False,\n",
    "    phases=['a', 'b', 'c'],\n",
    "    n_train=None,\n",
    "    n_val=1,\n",
    ")\n",
    "for phase, data in phase_metrics.items():\n",
    "    plt.plot(data.sample, data['accuracy'], label=f'Phase {phase}')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plots for Multiple Models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2019-06-06 17:15:20 apra-xps-13 leabratf[22508] INFO Elapsed time: 0:00:01.041440\n",
      "2019-06-06 17:15:21 apra-xps-13 leabratf[22508] INFO Elapsed time: 0:00:01.228136\n",
      "2019-06-06 17:15:23 apra-xps-13 leabratf[22508] INFO Elapsed time: 0:00:01.943069\n",
      "2019-06-06 17:15:24 apra-xps-13 leabratf[22508] INFO Elapsed time: 0:00:01.460180\n",
      "2019-06-06 17:15:26 apra-xps-13 leabratf[22508] INFO Elapsed time: 0:00:01.710909\n",
      "2019-06-06 17:15:28 apra-xps-13 leabratf[22508] INFO Elapsed time: 0:00:01.786138\n",
      "2019-06-06 17:15:29 apra-xps-13 leabratf[22508] INFO Elapsed time: 0:00:00.877848\n",
      "2019-06-06 17:15:30 apra-xps-13 leabratf[22508] INFO Elapsed time: 0:00:00.969888\n",
      "2019-06-06 17:15:30 apra-xps-13 leabratf[22508] INFO Elapsed time: 0:00:00.847245\n",
      "2019-06-06 17:15:31 apra-xps-13 leabratf[22508] INFO Elapsed time: 0:00:00.755489\n",
      "2019-06-06 17:15:32 apra-xps-13 leabratf[22508] INFO Elapsed time: 0:00:00.825465\n",
      "2019-06-06 17:15:33 apra-xps-13 leabratf[22508] INFO Elapsed time: 0:00:00.846412\n",
      "2019-06-06 17:15:33 apra-xps-13 leabratf[22508] INFO Elapsed time: 0:00:00.634927\n",
      "2019-06-06 17:15:34 apra-xps-13 leabratf[22508] INFO Elapsed time: 0:00:00.797285\n",
      "2019-06-06 17:15:35 apra-xps-13 leabratf[22508] INFO Elapsed time: 0:00:00.732039\n",
      "2019-06-06 17:15:36 apra-xps-13 leabratf[22508] INFO Elapsed time: 0:00:00.650897\n",
      "2019-06-06 17:15:37 apra-xps-13 leabratf[22508] INFO Elapsed time: 0:00:01.152825\n",
      "2019-06-06 17:15:37 apra-xps-13 leabratf[22508] INFO Elapsed time: 0:00:00.596847\n",
      "2019-06-06 17:15:38 apra-xps-13 leabratf[22508] INFO Elapsed time: 0:00:00.892151\n",
      "2019-06-06 17:15:39 apra-xps-13 leabratf[22508] INFO Elapsed time: 0:00:00.807828\n",
      "2019-06-06 17:15:40 apra-xps-13 leabratf[22508] INFO Elapsed time: 0:00:00.806340\n",
      "2019-06-06 17:15:41 apra-xps-13 leabratf[22508] INFO Elapsed time: 0:00:00.894829\n",
      "2019-06-06 17:15:42 apra-xps-13 leabratf[22508] INFO Elapsed time: 0:00:01.196724\n",
      "2019-06-06 17:15:43 apra-xps-13 leabratf[22508] INFO Elapsed time: 0:00:01.457882\n",
      "2019-06-06 17:15:45 apra-xps-13 leabratf[22508] INFO Elapsed time: 0:00:01.509160\n",
      "2019-06-06 17:15:46 apra-xps-13 leabratf[22508] INFO Elapsed time: 0:00:01.281539\n",
      "2019-06-06 17:15:47 apra-xps-13 leabratf[22508] INFO Elapsed time: 0:00:00.866191\n",
      "2019-06-06 17:15:49 apra-xps-13 leabratf[22508] INFO Elapsed time: 0:00:01.514011\n",
      "2019-06-06 17:15:50 apra-xps-13 leabratf[22508] INFO Elapsed time: 0:00:01.151063\n",
      "2019-06-06 17:15:51 apra-xps-13 leabratf[22508] INFO Elapsed time: 0:00:00.932965\n",
      "2019-06-06 17:15:52 apra-xps-13 leabratf[22508] INFO Elapsed time: 0:00:01.612062\n",
      "2019-06-06 17:15:53 apra-xps-13 leabratf[22508] INFO Elapsed time: 0:00:01.104999\n",
      "2019-06-06 17:15:55 apra-xps-13 leabratf[22508] INFO Elapsed time: 0:00:01.928141\n",
      "2019-06-06 17:15:57 apra-xps-13 leabratf[22508] INFO Elapsed time: 0:00:01.256205\n",
      "2019-06-06 17:15:57 apra-xps-13 leabratf[22508] INFO Elapsed time: 0:00:00.865153\n",
      "2019-06-06 17:15:58 apra-xps-13 leabratf[22508] INFO Elapsed time: 0:00:00.808647\n",
      "2019-06-06 17:15:59 apra-xps-13 leabratf[22508] INFO Elapsed time: 0:00:00.796027\n",
      "2019-06-06 17:16:00 apra-xps-13 leabratf[22508] INFO Elapsed time: 0:00:01.027891\n",
      "2019-06-06 17:16:02 apra-xps-13 leabratf[22508] INFO Elapsed time: 0:00:01.622923\n",
      "2019-06-06 17:16:03 apra-xps-13 leabratf[22508] INFO Elapsed time: 0:00:00.813958\n",
      "2019-06-06 17:16:04 apra-xps-13 leabratf[22508] INFO Elapsed time: 0:00:01.447787\n",
      "2019-06-06 17:16:06 apra-xps-13 leabratf[22508] INFO Elapsed time: 0:00:01.494929\n",
      "2019-06-06 17:16:07 apra-xps-13 leabratf[22508] INFO Elapsed time: 0:00:01.327435\n",
      "2019-06-06 17:16:08 apra-xps-13 leabratf[22508] INFO Elapsed time: 0:00:00.948221\n",
      "2019-06-06 17:16:09 apra-xps-13 leabratf[22508] INFO Elapsed time: 0:00:00.939908\n",
      "2019-06-06 17:16:10 apra-xps-13 leabratf[22508] INFO Elapsed time: 0:00:00.901593\n",
      "2019-06-06 17:16:10 apra-xps-13 leabratf[22508] INFO Elapsed time: 0:00:00.758578\n",
      "2019-06-06 17:16:12 apra-xps-13 leabratf[22508] INFO Elapsed time: 0:00:01.186275\n",
      "2019-06-06 17:16:13 apra-xps-13 leabratf[22508] INFO Elapsed time: 0:00:01.050638\n",
      "2019-06-06 17:16:14 apra-xps-13 leabratf[22508] INFO Elapsed time: 0:00:01.002513\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 1min 15s, sys: 6.89 s, total: 1min 22s\n",
      "Wall time: 55.1 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "N_MODELS = 50\n",
    "all_phase_metrics = [train_exp(\n",
    "    sess, \n",
    "    lr=0.00333, \n",
    "    epochs=1,\n",
    "    train_op=optimizer_dict['Adam'], \n",
    "    init_ops=init_ops,\n",
    "    verbose=False,\n",
    "    phases=['a', 'b', 'c'],\n",
    "    n_train=None,\n",
    "    n_val=1,\n",
    ") for _ in range(N_MODELS)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model_average = True\n",
    "# Empty lists for the long form data\n",
    "long_samples, long_metrics, long_hues, long_units = [], [], [], []\n",
    "\n",
    "# Loop through each model's data\n",
    "for i, model_metrics in enumerate(all_phase_metrics):\n",
    "    # Plot the number of epochs according to the data with the shortest\n",
    "    # number of epochs.\n",
    "    # Add to the long form lists\n",
    "    for key in model_metrics.keys():\n",
    "        n_samples = len(model_metrics['a']['sample'])\n",
    "        label = key\n",
    "        units = i\n",
    "        long_samples += model_metrics[key]['sample']\n",
    "        long_metrics += model_metrics[key]['accuracy']\n",
    "        long_hues += [f'Phase {label}']*n_samples\n",
    "        long_units += [units]*n_samples\n",
    "\n",
    "if model_average:\n",
    "    sns.lineplot(x=long_samples, y=long_metrics, hue=long_hues, \n",
    "                 estimator='mean')\n",
    "# Plot each line individually\n",
    "else:\n",
    "    sns.lineplot(x=long_samples, y=long_metrics, hue=long_hues, \n",
    "                 estimator=None, units=long_units)\n",
    "\n",
    "# Title, axis, and 500 epoch line\n",
    "plt.xlabel('Samples')\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
