{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 0.6 Hebbian Learning"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Boilerplate\n",
    "\n",
    "The following subsections are largely boilerplate code, so skip around as needed."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Jupyter Extensions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Load [watermark](https://github.com/rasbt/watermark) to see the state of the machine and environment that's running the notebook. To make sense of the options, take a look at the [usage](https://github.com/rasbt/watermark#usage) section of the readme."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mon Mar 25 2019 23:48:17 \n",
      "\n",
      "CPython 3.6.8\n",
      "IPython 7.3.0\n",
      "\n",
      "numpy 1.16.2\n",
      "matplotlib 3.0.2\n",
      "seaborn 0.9.0\n",
      "tensorflow 1.10.0\n",
      "\n",
      "compiler   : GCC 7.3.0\n",
      "system     : Linux\n",
      "release    : 4.18.0-16-generic\n",
      "machine    : x86_64\n",
      "processor  : x86_64\n",
      "CPU cores  : 8\n",
      "interpreter: 64bit\n",
      "Git hash   : 100d2741e0dadbc8df124ba2675596a49345a572\n",
      "Git branch : master\n"
     ]
    }
   ],
   "source": [
    "# Load `watermark` extension\n",
    "%load_ext watermark\n",
    "# Display the status of the machine and packages. Add more as necessary.\n",
    "%watermark -v -n -m -g -b -t -p numpy,matplotlib,seaborn,tensorflow"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Load [autoreload](https://ipython.org/ipython-doc/3/config/extensions/autoreload.html) which will always reload modules marked with `%aimport`.\n",
    "\n",
    "This behavior can be inverted by running `autoreload 2` which will set everything to be auto-reloaded *except* for modules marked with `%aimport`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load `autoreload` extension\n",
    "%load_ext autoreload\n",
    "# Set autoreload behavior\n",
    "%autoreload 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Load `matplotlib` in one of the more `jupyter`-friendly [rich-output modes](https://ipython.readthedocs.io/en/stable/interactive/plotting.html). Some options (that may or may not have worked) are `inline`, `notebook`, and `gtk`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set the matplotlib mode.\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Imports"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Static imports that shouldn't necessarily change throughout the notebook."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Standard library imports\n",
    "import logging\n",
    "import os\n",
    "from functools import wraps\n",
    "from pathlib import Path\n",
    "\n",
    "# Third party\n",
    "import IPython as ipy\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import tensorflow as tf"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Local imports that may or may not be autoreloaded. This section contains things that will likely have to be re-imported multiple times, and have additions or subtractions made throughout the project."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import the whole module\n",
    "%aimport leabratf\n",
    "import leabratf as ltf\n",
    "# Task script\n",
    "%aimport leabratf.tasks.combinatorics.combigen\n",
    "import leabratf.tasks.combinatorics.combigen as cg\n",
    "# Visualization for the task\n",
    "%aimport leabratf.visualization.combigen_heatmap\n",
    "import leabratf.visualization.combigen_heatmap as cgh\n",
    "# Metrics visulaization\n",
    "%aimport leabratf.visualization.metrics\n",
    "import leabratf.visualization.metrics as plt_metrics\n",
    "# Utility functions\n",
    "%aimport leabratf.utils\n",
    "from leabratf.utils import setup_logging\n",
    "# Tensorflow Utility functions\n",
    "%aimport leabratf.tfutils\n",
    "from leabratf.tfutils import lazy_property\n",
    "# Constants\n",
    "%aimport leabratf.constants\n",
    "from leabratf.constants import DIR_DATA_PROC"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Initial Setup"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Set [seaborn defaults](https://seaborn.pydata.org/generated/seaborn.set.html) for matplotlib."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "sns.set()\n",
    "sns.set_context(\"notebook\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Set up the logger configuration to something more useful than baseline. Creates log files for the different log levels in the `logs` directory.\n",
    "\n",
    "See `logging.yml` for the exact logging configuration."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Run base logger setup\n",
    "setup_logging()\n",
    "# Define a logger object\n",
    "logger = logging.getLogger('leabratf')\n",
    "# Don't propagate messages\n",
    "logger.propagate = False"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Global Variables"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Combigen Task Variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Number of slots in a training set\n",
    "STACK = 4\n",
    "# Size of each axis in the input array\n",
    "SIZE = 5\n",
    "# Number of axes to use per slot\n",
    "DIMS = 2\n",
    "# Number of lines per axis\n",
    "LINES = [1,1]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Data Parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Number of epochs to train for\n",
    "EPOCHS = 500\n",
    "# Number of samples in the training set\n",
    "N_TRAIN = 100\n",
    "# Number of samples in the validation set\n",
    "N_VAL = 50\n",
    "# Number of samples in the testing set\n",
    "N_TEST = 500"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Datasets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Training Data\n",
    "Y_TRAIN = cg.generate_labels(n_samples=N_TRAIN, stack=STACK, size=SIZE, dims=DIMS, n_lines=LINES)\n",
    "X_TRAIN = cg.inverse_transform(Y_TRAIN)\n",
    "# Validation Data\n",
    "Y_VAL = cg.generate_labels(n_samples=N_VAL, stack=STACK, size=SIZE, dims=DIMS, n_lines=LINES)\n",
    "X_VAL = cg.inverse_transform(Y_VAL)\n",
    "# Testing data\n",
    "Y_TEST = cg.generate_labels(n_samples=N_TEST, stack=STACK, size=SIZE, dims=DIMS, n_lines=LINES)\n",
    "X_TEST = cg.inverse_transform(Y_TEST)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Network Parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Learning rate\n",
    "ALPHA = 0.01\n",
    "# Batch size\n",
    "BATCH_SIZE = 1\n",
    "# Number of parameters in the inputs\n",
    "N_INPUTS = STACK * SIZE ** DIMS\n",
    "# Number of hidden units\n",
    "N_HIDDEN_1 = 100\n",
    "# Number of parameters in the labels\n",
    "N_OUTPUTS = STACK * SIZE * DIMS"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Training Parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Number of times to print an update\n",
    "N_UPDATES = 2\n",
    "# Which device to train on\n",
    "TF_DEVICE = '/cpu:0'\n",
    "# Number of models to train with\n",
    "N_MODELS = 10"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Background\n",
    "\n",
    "This section goes over some of the background information for the notebook using results from previous notebooks. Skip around as needed."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### The Combigen Task\n",
    "\n",
    "Quickly remind ourselves what the task looks like before diving in."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 40 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cgh.visualize_combigen(5)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setting Up the Graph\n",
    "\n",
    "This next section will define the computational graph that will be used to generate the metrics down below. It is largely code copied from nb-0.3, so skip around as needed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Cleanup any residual nodes\n",
    "tf.reset_default_graph()\n",
    "\n",
    "init_ops = []"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Make the Datasets\n",
    "\n",
    "Define the various `tf.Dataset`s that will be used."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [],
   "source": [
    "def make_tf_datasets(init_ops=None):\n",
    "    # The first step of the setup is that each of the datasets (training, validation, and \n",
    "    # testing) are turned into their own `Dataset` objects.\n",
    "    # Training dataset\n",
    "    dataset_train = tf.data.Dataset.from_tensor_slices(\n",
    "        (X_TRAIN, Y_TRAIN)).repeat().batch(BATCH_SIZE)\n",
    "    # Validation dataset\n",
    "    dataset_val = tf.data.Dataset.from_tensor_slices(\n",
    "        (X_VAL, Y_VAL)).repeat().batch(BATCH_SIZE)\n",
    "    # Testing dataset\n",
    "    dataset_test = tf.data.Dataset.from_tensor_slices(\n",
    "        (X_TEST, Y_TEST)).repeat().batch(BATCH_SIZE)\n",
    "    \n",
    "    # Next, let's define the iterators for each of the datasets, and then add their \n",
    "    # initializations to the `init_ops` list.\n",
    "    # Training iterator\n",
    "    train_iter = dataset_train.make_initializable_iterator()\n",
    "    # Validation iterator\n",
    "    val_iter = dataset_val.make_initializable_iterator()\n",
    "    # Testing iterator\n",
    "    test_iter = dataset_test.make_initializable_iterator()\n",
    "    # Aggregate the iterators\n",
    "    iterators = [train_iter, val_iter, test_iter]\n",
    "\n",
    "    # Add the initiatlizations to the init opts\n",
    "    init_ops = init_ops or []\n",
    "    init_ops += [train_iter.initializer, val_iter.initializer, test_iter.initializer]\n",
    "    \n",
    "    # And finally, the interesting part. Rather than creating separate next elements for \n",
    "    # the model, the `tf.data` API has a string handler iterator so we can contextually \n",
    "    # switch the active `Dataset` object, resulting in different values being used for `x` \n",
    "    # and `y`.\n",
    "\n",
    "    # The way this is done is by defining a `tf.placeholder` variable, which is used \n",
    "    # first to create a string handler iterator, and later to hold the dataset-indicating \n",
    "    # string handle. The string handler iterator is what then changes the values of `x` and \n",
    "    # `y`, naturally also supplying them using the `get_next` method.\n",
    "    # The placeholder variable of type string\n",
    "    handle = tf.placeholder(tf.string, shape=[])\n",
    "    # Iterator from string handle\n",
    "    handle_iterator = tf.data.Iterator.from_string_handle(\n",
    "        handle, dataset_train.output_types, \n",
    "        dataset_train.output_shapes)\n",
    "\n",
    "    # x and y that will be used in the graph\n",
    "    x, y = handle_iterator.get_next()\n",
    "    \n",
    "    return x, y, iterators, handle, init_ops"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model Class\n",
    "\n",
    "An implementation change that will be made going forward is to have the model components in a class."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "class OReillyModel:\n",
    "    def __init__(self, inputs, name='or_model'):\n",
    "        self.name = name \n",
    "        self.inputs = inputs\n",
    "        with tf.variable_scope(self.name):\n",
    "            self.weights = {'h1': tf.get_variable(\n",
    "                                    name='w_h1',\n",
    "                                    shape=[N_INPUTS, N_HIDDEN_1],\n",
    "                                    initializer=tf.contrib.layers.xavier_initializer()),\n",
    "                            'out': tf.get_variable(\n",
    "                                    name='w_out', \n",
    "                                    shape=[N_HIDDEN_1, N_OUTPUTS],\n",
    "                                    initializer=tf.contrib.layers.xavier_initializer()),\n",
    "                            }  \n",
    "            self.biases = {'b1': tf.get_variable(\n",
    "                                name=\"b_1\", \n",
    "                                shape=[N_HIDDEN_1], \n",
    "                                initializer=tf.zeros_initializer()),\n",
    "                            'out': tf.get_variable(\n",
    "                                name=\"b_out\", \n",
    "                                shape=[N_OUTPUTS], \n",
    "                                initializer=tf.zeros_initializer()),\n",
    "                            }\n",
    "            self.logits\n",
    "        \n",
    "    @lazy_property\n",
    "    def logits(self):\n",
    "        \"\"\"Logits lazy property that returns the logits of the model\"\"\"\n",
    "        with tf.variable_scope(self.name):\n",
    "            # Reshape for hidden layer\n",
    "            self.inp_reshaped = tf.reshape(self.inputs, shape=[1, N_INPUTS])\n",
    "            # Single hidden layer\n",
    "            self.h1_layer_logits = tf.sigmoid(tf.add(tf.matmul(\n",
    "                self.inp_reshaped, self.weights['h1']), self.biases['b1']))\n",
    "            # Output layer\n",
    "            self.out_layer_logits = tf.add(tf.matmul(\n",
    "                self.h1_layer_logits, self.weights['out']), self.biases['out'])\n",
    "            # Reshape for labels\n",
    "            return tf.reshape(self.out_layer_logits, shape=[1, STACK, SIZE, DIMS])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Instantiate all the Ops"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "with tf.device(TF_DEVICE):\n",
    "    # Get the relevant dataset nodes\n",
    "    x, y, iterators, handle, init_ops = make_tf_datasets(init_ops)\n",
    "    # Build the model\n",
    "    model = OReillyModel(x, name='or_model')\n",
    "    # Grab the logits\n",
    "    logits = model.logits\n",
    "    \n",
    "    # Ensure y is cast to the same type as logits\n",
    "    labels = tf.cast(y, logits.dtype)\n",
    "    \n",
    "    # We will keep this in for now\n",
    "    # Define alpha as placeholder variable\n",
    "    alpha_ph = tf.placeholder(tf.float32, shape=[])\n",
    "\n",
    "    # Define loss and optimizer\n",
    "    loss_op = tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(\n",
    "        logits=logits, labels=labels))\n",
    "\n",
    "    # Define some intermediate nodes\n",
    "    predictions = tf.sigmoid(logits)\n",
    "    rounded_predictions = tf.round(predictions)\n",
    "    equal_labels_and_preds = tf.equal(rounded_predictions, labels)\n",
    "    \n",
    "    # O'Reilly Accuracy \n",
    "    axis_acc = tf.reduce_all(equal_labels_and_preds, axis=(2))\n",
    "    slot_acc = tf.reduce_all(axis_acc, axis=(2))\n",
    "    sample_acc = tf.reduce_all(slot_acc, axis=(1))\n",
    " \n",
    "    # Elemental Accuracy \n",
    "    el_acc_op = tf.reduce_mean(tf.cast(equal_labels_and_preds, tf.float16))\n",
    "    # Axis Accuracy\n",
    "    axis_acc_op = tf.reduce_mean(tf.cast(axis_acc, tf.float16))\n",
    "    # Slot Accuracy\n",
    "    slot_acc_op = tf.reduce_mean(tf.cast(slot_acc, tf.float16))\n",
    "    # Sample Accuracy\n",
    "    sample_acc_op = tf.reduce_mean(tf.cast(sample_acc, tf.float16))\n",
    "    \n",
    "    # Train op\n",
    "    train_op = tf.train.GradientDescentOptimizer(alpha_ph).minimize(loss_op)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### New Session Function\n",
    "\n",
    "In the event that we do not want to immediately close sessions, we won't be using the context handler but will still need to grab new sessions as necessary. So let's quickly write a function that will properly run `sess.close()` if a previous session exists and then return a new `tf.Session` instance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def new_session(*args, **kwargs):\n",
    "    # Try to close the globally defined session if it isn't already\n",
    "    try:\n",
    "        if not sess._closed:\n",
    "            sess.close()\n",
    "    # If it doesn't exist, then just pass\n",
    "    except NameError:\n",
    "        pass\n",
    "    # Return the new instance\n",
    "    return tf.Session(*args, **kwargs)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Defining the Training Function\n",
    "\n",
    "Let's define a function that runs the training routine and accepts the number of epochs as the inputs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "def train(sess, lr=ALPHA, epochs=EPOCHS, n_updates=N_UPDATES,\n",
    "          init_ops=None):\n",
    "    # Ensure this is an int\n",
    "    epochs = int(epochs)\n",
    "    # Dict with the various metrics we care about\n",
    "    metrics = {'loss':[], 'el_acc':[], 'ax_acc':[], 'sl_acc':[], 'sm_acc':[], \n",
    "               'val_loss':[], 'val_el_acc':[], 'val_ax_acc':[], 'val_sl_acc':[], \n",
    "               'val_sm_acc':[]}\n",
    "    # Run the initialization ops\n",
    "    init_ops = init_ops or []\n",
    "    init_ops += [tf.global_variables_initializer(), tf.local_variables_initializer()]\n",
    "    sess.run(init_ops)\n",
    "    # Define training and validation handlers\n",
    "    training_handle, validation_handle, testing_handle = sess.run([i.string_handle() \n",
    "                                                                   for i in iterators])\n",
    "\n",
    "    for epoch in range(epochs):\n",
    "        ep_loss, ep_el_acc, ep_sl_acc, ep_ax_acc, ep_sm_acc = np.zeros([5, N_TRAIN])\n",
    "        # Run the training steps\n",
    "        for i in range(N_TRAIN):\n",
    "            _, ep_loss[i], ep_el_acc[i], ep_sl_acc[i], ep_ax_acc[i], ep_sm_acc[i] = sess.run(\n",
    "                [train_op, loss_op, el_acc_op, axis_acc_op, slot_acc_op, sample_acc_op],\n",
    "                feed_dict={handle: training_handle, alpha_ph: lr})\n",
    "            \n",
    "        # Get means for the epoch\n",
    "        epoch_data = list(np.mean((ep_loss, ep_el_acc, ep_sl_acc, ep_ax_acc, ep_sm_acc), \n",
    "                                  axis=1))\n",
    "\n",
    "        # Calculate validation accuracy and loss\n",
    "        val_data = list(sess.run([loss_op, el_acc_op, axis_acc_op, slot_acc_op, sample_acc_op],\n",
    "                                 feed_dict={handle: validation_handle}))\n",
    "        \n",
    "        # Record\n",
    "        for key, value in zip(metrics.keys(), epoch_data + val_data):\n",
    "            metrics[key].append(value)\n",
    "\n",
    "        # Selectively display the epoch number\n",
    "        if n_updates and (not epoch % (epochs / n_updates) or epoch == epochs - 1):\n",
    "            print((\"Completed epoch {0}/{1}. Metrics:\\n\" + \n",
    "                   \"                     Loss   Sample Accuracy   Elem Accuracy\\n\" +\n",
    "                   \"    Epoch:      {2:10.4f}   {3:10.4f}   {4:10.4f}\\n\" +\n",
    "                   \"    Validation: {5:10.4f}   {6:10.4f}   {7:10.4f}\\n\").format(\n",
    "                epoch+1, epochs, epoch_data[0],epoch_data[4], epoch_data[1], \n",
    "                val_data[0], val_data[4], val_data[1]))\n",
    "\n",
    "    # Calculate accuracy for test images\n",
    "    print(\"Optimization Finished! Testing Sample Accuracy:\", sess.run(\n",
    "        sample_acc_op, feed_dict={handle: testing_handle}))\n",
    "    return metrics"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Baseline metrics\n",
    "\n",
    "Just as a sanity check, let's run the new class model with a learning rate of 0.1 so we can get good results relatively quickly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimization Finished! Testing Sample Accuracy: 0.294\n",
      "Optimization Finished! Testing Sample Accuracy: 0.286\n",
      "Optimization Finished! Testing Sample Accuracy: 0.282\n",
      "Optimization Finished! Testing Sample Accuracy: 0.296\n",
      "Optimization Finished! Testing Sample Accuracy: 0.306\n",
      "Optimization Finished! Testing Sample Accuracy: 0.252\n",
      "Optimization Finished! Testing Sample Accuracy: 0.304\n",
      "Optimization Finished! Testing Sample Accuracy: 0.276\n",
      "Optimization Finished! Testing Sample Accuracy: 0.29\n",
      "Optimization Finished! Testing Sample Accuracy: 0.294\n"
     ]
    }
   ],
   "source": [
    "def exp_test():\n",
    "    sess = new_session()\n",
    "    metrics_list = []\n",
    "    for i in range(N_MODELS):\n",
    "        metrics_list.append(train(sess, lr=0.1, epochs=EPOCHS, n_updates=0, init_ops=init_ops))\n",
    "    return metrics_list\n",
    "metrics = exp_test()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Hebbian Weight Update"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Cleanup any residual nodes\n",
    "tf.reset_default_graph()\n",
    "\n",
    "init_ops = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "metadata": {},
   "outputs": [],
   "source": [
    "class HebbianModel(OReillyModel):\n",
    "    def __init__(self, inputs, name='hebb_model', k=0.02, *args, **kwargs):\n",
    "        super().__init__(inputs, name=name, *args, **kwargs)\n",
    "        self.k = k \n",
    "    \n",
    "    def get_hebbian_weight_update(self):\n",
    "        \"\"\"Weight update according to O'Reilly.\"\"\"\n",
    "        with tf.variable_scope(self.name):\n",
    "            # w_h1 delta\n",
    "            x_plus = tf.reshape(ltf.tfutils.repeat(self.inp_reshaped, [1, N_HIDDEN_1]), \n",
    "                           [1, N_INPUTS, N_HIDDEN_1])\n",
    "            y_plus = tf.reshape(tf.tile(self.h1_layer_logits, [1, N_INPUTS]), \n",
    "                           [1, N_INPUTS, N_HIDDEN_1])\n",
    "            self.w_h1_delta = tf.reshape(tf.multiply(\n",
    "                y_plus, x_plus - self.weights['h1']), self.weights['h1'].shape)\n",
    "\n",
    "            # w_out delta\n",
    "            x_plus = tf.reshape(ltf.tfutils.repeat(self.h1_layer_logits, [1, N_OUTPUTS]), \n",
    "                           [1, N_HIDDEN_1, N_OUTPUTS])\n",
    "            y_plus = tf.reshape(tf.tile(self.out_layer_logits, [1, N_HIDDEN_1]), \n",
    "                           [1,  N_HIDDEN_1, N_OUTPUTS])\n",
    "            self.w_out_delta = tf.reshape(tf.multiply(\n",
    "                y_plus, x_plus - self.weights['out']), self.weights['out'].shape)\n",
    "            return [self.w_h1_delta, self.w_out_delta]\n",
    "        \n",
    "    def hebbian_update(self):\n",
    "        with tf.variable_scope(self.name):\n",
    "            self.hebb_assign_h1 = self.weights['h1'].assign(self.weights['h1'] - self.k*alpha_ph*self.w_h1_delta)\n",
    "            self.hebb_assign_out = self.weights['out'].assign(self.weights['out'] - self.k*alpha_ph*self.w_out_delta)\n",
    "            return [self.hebb_assign_h1, self.hebb_assign_out]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "metadata": {},
   "outputs": [],
   "source": [
    "with tf.device(TF_DEVICE):\n",
    "    # Get the relevant dataset nodes\n",
    "    x, y, iterators, handle, init_ops = make_tf_datasets(init_ops)\n",
    "    # Build the model\n",
    "    model = HebbianModel(x)\n",
    "    # Grab the logits\n",
    "    logits = model.logits\n",
    "    \n",
    "    # Ensure y is cast to the same type as logits\n",
    "    labels = tf.cast(y, logits.dtype)\n",
    "    \n",
    "    # We will keep this in for now\n",
    "    # Define alpha as placeholder variable\n",
    "    alpha_ph = (1.0-model.k) * tf.placeholder(tf.float32, shape=[])\n",
    "\n",
    "    # Define loss and optimizer\n",
    "    loss_op = tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(\n",
    "        logits=logits, labels=labels))\n",
    "\n",
    "    # Define some intermediate nodes\n",
    "    predictions = tf.sigmoid(logits)\n",
    "    rounded_predictions = tf.round(predictions)\n",
    "    equal_labels_and_preds = tf.equal(rounded_predictions, labels)\n",
    "    \n",
    "    # O'Reilly Accuracy \n",
    "    axis_acc = tf.reduce_all(equal_labels_and_preds, axis=(2))\n",
    "    slot_acc = tf.reduce_all(axis_acc, axis=(2))\n",
    "    sample_acc = tf.reduce_all(slot_acc, axis=(1))\n",
    " \n",
    "    # Elemental Accuracy \n",
    "    el_acc_op = tf.reduce_mean(tf.cast(equal_labels_and_preds, tf.float16))\n",
    "    # Axis Accuracy\n",
    "    axis_acc_op = tf.reduce_mean(tf.cast(axis_acc, tf.float16))\n",
    "    # Slot Accuracy\n",
    "    slot_acc_op = tf.reduce_mean(tf.cast(slot_acc, tf.float16))\n",
    "    # Sample Accuracy\n",
    "    sample_acc_op = tf.reduce_mean(tf.cast(sample_acc, tf.float16))\n",
    "    \n",
    "    # Train op\n",
    "    train_op = tf.train.GradientDescentOptimizer(alpha_ph).minimize(loss_op)\n",
    "    \n",
    "    # Hebbian ops\n",
    "    hebb_updates = model.get_hebbian_weight_update()\n",
    "    hebb_assigns = model.hebbian_update()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "metadata": {},
   "outputs": [],
   "source": [
    "def train_hebbian(sess, lr=ALPHA, epochs=EPOCHS, n_updates=N_UPDATES,\n",
    "          init_ops=None):\n",
    "    # Ensure this is an int\n",
    "    epochs = int(epochs)\n",
    "    # Dict with the various metrics we care about\n",
    "    metrics = {'loss':[], 'el_acc':[], 'ax_acc':[], 'sl_acc':[], 'sm_acc':[], \n",
    "               'val_loss':[], 'val_el_acc':[], 'val_ax_acc':[], 'val_sl_acc':[], \n",
    "               'val_sm_acc':[]}\n",
    "    # Run the initialization ops\n",
    "    init_ops = init_ops or []\n",
    "    init_ops += [tf.global_variables_initializer(), tf.local_variables_initializer()]\n",
    "    sess.run(init_ops)\n",
    "    # Define training and validation handlers\n",
    "    training_handle, validation_handle, testing_handle = sess.run([i.string_handle() \n",
    "                                                                   for i in iterators])\n",
    "\n",
    "    for epoch in range(epochs):\n",
    "        ep_loss, ep_el_acc, ep_sl_acc, ep_ax_acc, ep_sm_acc = np.zeros([5, N_TRAIN])\n",
    "        # Run the training steps\n",
    "        for i in range(N_TRAIN):\n",
    "            *_, ep_loss[i], ep_el_acc[i], ep_sl_acc[i], ep_ax_acc[i], ep_sm_acc[i] = sess.run(\n",
    "                [*hebb_updates,\n",
    "                 train_op, \n",
    "                 *hebb_assigns,\n",
    "                 loss_op, \n",
    "                 el_acc_op, \n",
    "                 axis_acc_op, \n",
    "                 slot_acc_op, \n",
    "                 sample_acc_op],\n",
    "                feed_dict={handle: training_handle, alpha_ph: lr})\n",
    "            \n",
    "        # Get means for the epoch\n",
    "        epoch_data = list(np.mean((ep_loss, ep_el_acc, ep_sl_acc, ep_ax_acc, ep_sm_acc), \n",
    "                                  axis=1))\n",
    "\n",
    "        ep_loss, ep_el_acc, ep_sl_acc, ep_ax_acc, ep_sm_acc = np.zeros([5, N_TRAIN])\n",
    "        # Run the training steps\n",
    "        for i in range(N_VAL):\n",
    "            ep_loss[i], ep_el_acc[i], ep_sl_acc[i], ep_ax_acc[i], ep_sm_acc[i] = sess.run(\n",
    "                [loss_op, \n",
    "                 el_acc_op, \n",
    "                 axis_acc_op, \n",
    "                 slot_acc_op, \n",
    "                 sample_acc_op],\n",
    "                feed_dict={handle: validation_handle})\n",
    "            \n",
    "        # Get means for the epoch\n",
    "        val_data = list(np.mean((ep_loss, ep_el_acc, ep_sl_acc, ep_ax_acc, ep_sm_acc), \n",
    "                                  axis=1))\n",
    "        \n",
    "#         # Record\n",
    "        for key, value in zip(metrics.keys(), epoch_data + val_data):\n",
    "            metrics[key].append(value)\n",
    "\n",
    "        # Selectively display the epoch number\n",
    "        if n_updates and (not epoch % (epochs / n_updates) or epoch == epochs - 1):\n",
    "            print((\"Completed epoch {0}/{1}. Metrics:\\n\" + \n",
    "                   \"                     Loss   Sample Accuracy   Elem Accuracy\\n\" +\n",
    "                   \"    Epoch:      {2:10.4f}   {3:10.4f}   {4:10.4f}\\n\" +\n",
    "                   \"    Validation: {5:10.4f}   {6:10.4f}   {7:10.4f}\\n\").format(\n",
    "                epoch+1, epochs, epoch_data[0],epoch_data[4], epoch_data[1], \n",
    "                val_data[0], val_data[4], val_data[1]))\n",
    "            print(sess.run([model.weights['h1'], model.w_h1_delta], feed_dict={handle: validation_handle}))\n",
    "\n",
    "    # Calculate accuracy for test images\n",
    "    print(\"Optimization Finished! Testing Sample Accuracy:\", sess.run(\n",
    "        sample_acc_op, feed_dict={handle: testing_handle}))\n",
    "    return metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Completed epoch 1/500. Metrics:\n",
      "                     Loss   Sample Accuracy   Elem Accuracy\n",
      "    Epoch:          0.6931       0.0000       0.5242\n",
      "    Validation:     0.3307       0.0000       0.2935\n",
      "\n",
      "[array([[ 0.06623898, -0.04280394,  0.03861875, ...,  0.06589204,\n",
      "         0.01112689,  0.03355196],\n",
      "       [ 0.00050062,  0.15374286,  0.04768272, ...,  0.08641034,\n",
      "        -0.07176242, -0.02730676],\n",
      "       [ 0.10058264, -0.10144062,  0.1354161 , ..., -0.00175354,\n",
      "        -0.13839275, -0.13664941],\n",
      "       ...,\n",
      "       [-0.12134767,  0.00365063,  0.02653956, ..., -0.142572  ,\n",
      "        -0.04409557, -0.14227602],\n",
      "       [-0.01109741, -0.10471202, -0.03512032, ..., -0.12880954,\n",
      "        -0.1121861 ,  0.06854434],\n",
      "       [-0.07438525,  0.11121829, -0.10202104, ...,  0.03172798,\n",
      "         0.12191743, -0.15441012]], dtype=float32), array([[ 0.55632544,  0.30881473,  0.5050484 , ...,  0.38911214,\n",
      "         0.24408647,  0.24874577],\n",
      "       [ 0.5954917 ,  0.25060964,  0.50028676, ...,  0.38056505,\n",
      "         0.26454628,  0.26440966],\n",
      "       [ 0.5358638 ,  0.3261794 ,  0.45419723, ...,  0.4172906 ,\n",
      "         0.28099284,  0.2925524 ],\n",
      "       ...,\n",
      "       [ 0.66808766,  0.29505777,  0.511394  , ...,  0.47594997,\n",
      "         0.2577172 ,  0.29400063],\n",
      "       [ 0.00661173,  0.0310093 ,  0.01844998, ...,  0.05365692,\n",
      "         0.02769123, -0.01764204],\n",
      "       [ 0.04431798, -0.03293606,  0.05359535, ..., -0.01321661,\n",
      "        -0.03009324,  0.03974229]], dtype=float32)]\n",
      "Completed epoch 500/500. Metrics:\n",
      "                     Loss   Sample Accuracy   Elem Accuracy\n",
      "    Epoch:          0.4984       0.0000       0.7998\n",
      "    Validation:     0.2522       0.0000       0.3999\n",
      "\n",
      "[array([[-0.0382274 , -0.17432919, -0.08151684, ..., -0.03593498,\n",
      "        -0.08480671, -0.06789324],\n",
      "       [-0.1727029 ,  0.06276065, -0.10100998, ..., -0.03446685,\n",
      "        -0.24206017, -0.1963822 ],\n",
      "       [-0.01133263, -0.25987884,  0.03355754, ..., -0.13950045,\n",
      "        -0.29671276, -0.31291404],\n",
      "       ...,\n",
      "       [-0.28808603, -0.12911676, -0.09115525, ..., -0.30137357,\n",
      "        -0.16817424, -0.29868388],\n",
      "       [-0.14255795, -0.25202495, -0.15820894, ..., -0.26481494,\n",
      "        -0.2710098 , -0.00698834],\n",
      "       [-0.22433095,  0.02197676, -0.28015795, ..., -0.07796539,\n",
      "         0.04892651, -0.3281317 ]], dtype=float32), array([[ 0.01327993,  0.00721282,  0.00967037, ...,  0.00575676,\n",
      "         0.00379881,  0.00953079],\n",
      "       [ 0.015     ,  0.0057566 ,  0.00984467, ...,  0.0057486 ,\n",
      "         0.00434948,  0.01067753],\n",
      "       [ 0.01293591,  0.00773827,  0.00864144, ...,  0.00633228,\n",
      "         0.00454086,  0.01171756],\n",
      "       ...,\n",
      "       [ 0.0036849 ,  0.00079304,  0.00081506, ...,  0.00167475,\n",
      "         0.00058892,  0.00266571],\n",
      "       [ 0.01461441,  0.00769003,  0.01035612, ...,  0.00702866,\n",
      "         0.00445086,  0.00898722],\n",
      "       [ 0.00286941, -0.00013498,  0.00250503, ...,  0.00043326,\n",
      "        -0.00017133,  0.00292853]], dtype=float32)]\n",
      "Optimization Finished! Testing Sample Accuracy: 0.0\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x648 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def exp_test():\n",
    "    model.k = 0\n",
    "    sess = new_session()\n",
    "    metrics_list = []\n",
    "    for i in range(1):\n",
    "        metrics_list.append(train_hebbian(sess, lr=.01, epochs=EPOCHS, n_updates=3, init_ops=init_ops))\n",
    "    return metrics_list\n",
    "metrics = exp_test()\n",
    "plt_metrics.plot_df_metrics(pd.DataFrame(metrics), title='Training Curves')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Completed epoch 1/1000. Metrics:\n",
      "                     Loss   Sample Accuracy   Elem Accuracy\n",
      "    Epoch:          0.6840       0.0000       0.5488\n",
      "    Validation:     0.3281       0.0000       0.3130\n",
      "\n",
      "[array([[-0.11103304, -0.15895411,  0.13516878, ...,  0.15339132,\n",
      "        -0.13920185,  0.04619087],\n",
      "       [ 0.10955822, -0.09949107,  0.05880077, ...,  0.12144537,\n",
      "         0.09525783,  0.09041277],\n",
      "       [-0.01198685, -0.05685747, -0.0069341 , ..., -0.13571517,\n",
      "        -0.09030543, -0.13434088],\n",
      "       ...,\n",
      "       [ 0.04844423,  0.05227206,  0.05304167, ..., -0.16828215,\n",
      "        -0.0226977 , -0.02896862],\n",
      "       [ 0.08793505,  0.04425941, -0.16180862, ...,  0.07888462,\n",
      "         0.14501731, -0.12523246],\n",
      "       [-0.17367017, -0.165864  ,  0.07141508, ..., -0.08029346,\n",
      "         0.12962359,  0.06321739]], dtype=float32), array([[ 0.43919164,  0.4675333 ,  0.27846065, ...,  0.46458772,\n",
      "         0.31233498,  0.46885344],\n",
      "       [ 0.35199183,  0.44354534,  0.30304983, ...,  0.48211846,\n",
      "         0.24805318,  0.44711575],\n",
      "       [ 0.40003863,  0.4263465 ,  0.3242153 , ...,  0.6232387 ,\n",
      "         0.29892907,  0.55759543],\n",
      "       ...,\n",
      "       [ 0.37615022,  0.3823226 ,  0.30490413, ...,  0.64111024,\n",
      "         0.28039303,  0.50579876],\n",
      "       [-0.03476075, -0.01785467,  0.05209957, ..., -0.04328898,\n",
      "        -0.0397594 ,  0.06155914],\n",
      "       [ 0.06865186,  0.06691114, -0.02299442, ...,  0.0440621 ,\n",
      "        -0.0355389 , -0.03107508]], dtype=float32)]\n",
      "Completed epoch 1000/1000. Metrics:\n",
      "                     Loss   Sample Accuracy   Elem Accuracy\n",
      "    Epoch:          0.4966       0.0000       0.7998\n",
      "    Validation:     0.2519       0.0000       0.3999\n",
      "\n",
      "[array([[-0.30562195, -0.36711138,  0.07472266, ...,  0.09175627,\n",
      "        -0.34695324, -0.08808802],\n",
      "       [-0.03329559, -0.3385054 , -0.06814676, ...,  0.02087937,\n",
      "        -0.01946199, -0.04769682],\n",
      "       [-0.15528224, -0.24677895, -0.1504718 , ..., -0.3530011 ,\n",
      "        -0.27125925, -0.33735397],\n",
      "       ...,\n",
      "       [-0.07916136, -0.07505644, -0.04709438, ..., -0.40228316,\n",
      "        -0.17788245, -0.18004224],\n",
      "       [ 0.00081703, -0.09031101, -0.35938835, ..., -0.00699994,\n",
      "         0.07619069, -0.2870505 ],\n",
      "       [-0.41719678, -0.41723463, -0.04340517, ..., -0.27424777,\n",
      "         0.02968434, -0.06184731]], dtype=float32), array([[ 1.0303432e-02,  3.7709293e-03,  1.3173857e-03, ...,\n",
      "         1.9712830e-03,  5.0241998e-03,  4.6409038e-03],\n",
      "       [ 8.1543438e-03,  3.6920246e-03,  1.5207994e-03, ...,\n",
      "         2.1251168e-03,  3.8026415e-03,  4.4686277e-03],\n",
      "       [ 9.1170128e-03,  3.4390138e-03,  1.6380117e-03, ...,\n",
      "         2.9365995e-03,  4.7418578e-03,  5.7040709e-03],\n",
      "       ...,\n",
      "       [ 6.2470889e-04,  2.0702959e-04,  6.7051747e-05, ...,\n",
      "         8.7312906e-04,  6.6351000e-04,  7.6791464e-04],\n",
      "       [ 7.8851413e-03,  3.0074255e-03,  1.9354615e-03, ...,\n",
      "         2.1856269e-03,  3.4458525e-03,  5.4895170e-03],\n",
      "       [ 3.2923454e-03,  1.1508662e-03,  6.1799139e-05, ...,\n",
      "         5.9523666e-04, -1.1072402e-04,  2.6379063e-04]], dtype=float32)]\n",
      "Optimization Finished! Testing Sample Accuracy: 0.0\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x648 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def exp_test():\n",
    "    model.k = 0\n",
    "    sess = new_session()\n",
    "    metrics_list = []\n",
    "    for i in range(1):\n",
    "        metrics_list.append(train_hebbian(sess, lr=.01, epochs=2*EPOCHS, n_updates=3, init_ops=init_ops))\n",
    "    return metrics_list\n",
    "metrics = exp_test()\n",
    "plt_metrics.plot_df_metrics(pd.DataFrame(metrics), title='Training Curves')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
