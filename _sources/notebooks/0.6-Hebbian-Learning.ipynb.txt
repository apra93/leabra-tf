{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 0.6 Hebbian Learning"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Boilerplate\n",
    "\n",
    "The following subsections are largely boilerplate code, so skip around as needed."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Jupyter Extensions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Load [watermark](https://github.com/rasbt/watermark) to see the state of the machine and environment that's running the notebook. To make sense of the options, take a look at the [usage](https://github.com/rasbt/watermark#usage) section of the readme."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mon Mar 25 2019 23:48:17 \n",
      "\n",
      "CPython 3.6.8\n",
      "IPython 7.3.0\n",
      "\n",
      "numpy 1.16.2\n",
      "matplotlib 3.0.2\n",
      "seaborn 0.9.0\n",
      "tensorflow 1.10.0\n",
      "\n",
      "compiler   : GCC 7.3.0\n",
      "system     : Linux\n",
      "release    : 4.18.0-16-generic\n",
      "machine    : x86_64\n",
      "processor  : x86_64\n",
      "CPU cores  : 8\n",
      "interpreter: 64bit\n",
      "Git hash   : 100d2741e0dadbc8df124ba2675596a49345a572\n",
      "Git branch : master\n"
     ]
    }
   ],
   "source": [
    "# Load `watermark` extension\n",
    "%load_ext watermark\n",
    "# Display the status of the machine and packages. Add more as necessary.\n",
    "%watermark -v -n -m -g -b -t -p numpy,matplotlib,seaborn,tensorflow"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Load [autoreload](https://ipython.org/ipython-doc/3/config/extensions/autoreload.html) which will always reload modules marked with `%aimport`.\n",
    "\n",
    "This behavior can be inverted by running `autoreload 2` which will set everything to be auto-reloaded *except* for modules marked with `%aimport`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load `autoreload` extension\n",
    "%load_ext autoreload\n",
    "# Set autoreload behavior\n",
    "%autoreload 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Load `matplotlib` in one of the more `jupyter`-friendly [rich-output modes](https://ipython.readthedocs.io/en/stable/interactive/plotting.html). Some options (that may or may not have worked) are `inline`, `notebook`, and `gtk`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set the matplotlib mode.\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Imports"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Static imports that shouldn't necessarily change throughout the notebook."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Standard library imports\n",
    "import logging\n",
    "import os\n",
    "from functools import wraps\n",
    "from pathlib import Path\n",
    "\n",
    "# Third party\n",
    "import IPython as ipy\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import tensorflow as tf"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Local imports that may or may not be autoreloaded. This section contains things that will likely have to be re-imported multiple times, and have additions or subtractions made throughout the project."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import the whole module\n",
    "%aimport leabratf\n",
    "import leabratf as ltf\n",
    "# Task script\n",
    "%aimport leabratf.tasks.combinatorics.combigen\n",
    "import leabratf.tasks.combinatorics.combigen as cg\n",
    "# Visualization for the task\n",
    "%aimport leabratf.visualization.combigen_heatmap\n",
    "import leabratf.visualization.combigen_heatmap as cgh\n",
    "# Metrics visulaization\n",
    "%aimport leabratf.visualization.metrics\n",
    "import leabratf.visualization.metrics as plt_metrics\n",
    "# Utility functions\n",
    "%aimport leabratf.utils\n",
    "from leabratf.utils import setup_logging\n",
    "# Tensorflow Utility functions\n",
    "%aimport leabratf.tfutils\n",
    "from leabratf.tfutils import lazy_property\n",
    "# Constants\n",
    "%aimport leabratf.constants\n",
    "from leabratf.constants import DIR_DATA_PROC"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Initial Setup"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Set [seaborn defaults](https://seaborn.pydata.org/generated/seaborn.set.html) for matplotlib."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "sns.set()\n",
    "sns.set_context(\"notebook\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Set up the logger configuration to something more useful than baseline. Creates log files for the different log levels in the `logs` directory.\n",
    "\n",
    "See `logging.yml` for the exact logging configuration."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Run base logger setup\n",
    "setup_logging()\n",
    "# Define a logger object\n",
    "logger = logging.getLogger('leabratf')\n",
    "# Don't propagate messages\n",
    "logger.propagate = False"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Global Variables"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Combigen Task Variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Number of slots in a training set\n",
    "STACK = 4\n",
    "# Size of each axis in the input array\n",
    "SIZE = 5\n",
    "# Number of axes to use per slot\n",
    "DIMS = 2\n",
    "# Number of lines per axis\n",
    "LINES = [1,1]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Data Parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Number of epochs to train for\n",
    "EPOCHS = 500\n",
    "# Number of samples in the training set\n",
    "N_TRAIN = 100\n",
    "# Number of samples in the validation set\n",
    "N_VAL = 50\n",
    "# Number of samples in the testing set\n",
    "N_TEST = 500"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Datasets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Training Data\n",
    "Y_TRAIN = cg.generate_labels(n_samples=N_TRAIN, stack=STACK, size=SIZE, dims=DIMS, n_lines=LINES)\n",
    "X_TRAIN = cg.inverse_transform(Y_TRAIN)\n",
    "# Validation Data\n",
    "Y_VAL = cg.generate_labels(n_samples=N_VAL, stack=STACK, size=SIZE, dims=DIMS, n_lines=LINES)\n",
    "X_VAL = cg.inverse_transform(Y_VAL)\n",
    "# Testing data\n",
    "Y_TEST = cg.generate_labels(n_samples=N_TEST, stack=STACK, size=SIZE, dims=DIMS, n_lines=LINES)\n",
    "X_TEST = cg.inverse_transform(Y_TEST)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Network Parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Learning rate\n",
    "ALPHA = 0.01\n",
    "# Batch size\n",
    "BATCH_SIZE = 1\n",
    "# Number of parameters in the inputs\n",
    "N_INPUTS = STACK * SIZE ** DIMS\n",
    "# Number of hidden units\n",
    "N_HIDDEN_1 = 100\n",
    "# Number of parameters in the labels\n",
    "N_OUTPUTS = STACK * SIZE * DIMS"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Training Parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Number of times to print an update\n",
    "N_UPDATES = 2\n",
    "# Which device to train on\n",
    "TF_DEVICE = '/cpu:0'\n",
    "# Number of models to train with\n",
    "N_MODELS = 10"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Background\n",
    "\n",
    "This section goes over some of the background information for the notebook using results from previous notebooks. Skip around as needed."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### The Combigen Task\n",
    "\n",
    "Quickly remind ourselves what the task looks like before diving in."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 40 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cgh.visualize_combigen(5)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setting Up the Graph\n",
    "\n",
    "This next section will define the computational graph that will be used to generate the metrics down below. It is largely code copied from nb-0.3, so skip around as needed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Cleanup any residual nodes\n",
    "tf.reset_default_graph()\n",
    "\n",
    "init_ops = []"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Make the Datasets\n",
    "\n",
    "Define the various `tf.Dataset`s that will be used."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [],
   "source": [
    "def make_tf_datasets(init_ops=None):\n",
    "    # The first step of the setup is that each of the datasets (training, validation, and \n",
    "    # testing) are turned into their own `Dataset` objects.\n",
    "    # Training dataset\n",
    "    dataset_train = tf.data.Dataset.from_tensor_slices(\n",
    "        (X_TRAIN, Y_TRAIN)).repeat().batch(BATCH_SIZE)\n",
    "    # Validation dataset\n",
    "    dataset_val = tf.data.Dataset.from_tensor_slices(\n",
    "        (X_VAL, Y_VAL)).repeat().batch(BATCH_SIZE)\n",
    "    # Testing dataset\n",
    "    dataset_test = tf.data.Dataset.from_tensor_slices(\n",
    "        (X_TEST, Y_TEST)).repeat().batch(BATCH_SIZE)\n",
    "    \n",
    "    # Next, let's define the iterators for each of the datasets, and then add their \n",
    "    # initializations to the `init_ops` list.\n",
    "    # Training iterator\n",
    "    train_iter = dataset_train.make_initializable_iterator()\n",
    "    # Validation iterator\n",
    "    val_iter = dataset_val.make_initializable_iterator()\n",
    "    # Testing iterator\n",
    "    test_iter = dataset_test.make_initializable_iterator()\n",
    "    # Aggregate the iterators\n",
    "    iterators = [train_iter, val_iter, test_iter]\n",
    "\n",
    "    # Add the initiatlizations to the init opts\n",
    "    init_ops = init_ops or []\n",
    "    init_ops += [train_iter.initializer, val_iter.initializer, test_iter.initializer]\n",
    "    \n",
    "    # And finally, the interesting part. Rather than creating separate next elements for \n",
    "    # the model, the `tf.data` API has a string handler iterator so we can contextually \n",
    "    # switch the active `Dataset` object, resulting in different values being used for `x` \n",
    "    # and `y`.\n",
    "\n",
    "    # The way this is done is by defining a `tf.placeholder` variable, which is used \n",
    "    # first to create a string handler iterator, and later to hold the dataset-indicating \n",
    "    # string handle. The string handler iterator is what then changes the values of `x` and \n",
    "    # `y`, naturally also supplying them using the `get_next` method.\n",
    "    # The placeholder variable of type string\n",
    "    handle = tf.placeholder(tf.string, shape=[])\n",
    "    # Iterator from string handle\n",
    "    handle_iterator = tf.data.Iterator.from_string_handle(\n",
    "        handle, dataset_train.output_types, \n",
    "        dataset_train.output_shapes)\n",
    "\n",
    "    # x and y that will be used in the graph\n",
    "    x, y = handle_iterator.get_next()\n",
    "    \n",
    "    return x, y, iterators, handle, init_ops"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model Class\n",
    "\n",
    "An implementation change that will be made going forward is to have the model components in a class."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "class OReillyModel:\n",
    "    def __init__(self, inputs, name='or_model'):\n",
    "        self.name = name \n",
    "        self.inputs = inputs\n",
    "        with tf.variable_scope(self.name):\n",
    "            self.weights = {'h1': tf.get_variable(\n",
    "                                    name='w_h1',\n",
    "                                    shape=[N_INPUTS, N_HIDDEN_1],\n",
    "                                    initializer=tf.contrib.layers.xavier_initializer()),\n",
    "                            'out': tf.get_variable(\n",
    "                                    name='w_out', \n",
    "                                    shape=[N_HIDDEN_1, N_OUTPUTS],\n",
    "                                    initializer=tf.contrib.layers.xavier_initializer()),\n",
    "                            }  \n",
    "            self.biases = {'b1': tf.get_variable(\n",
    "                                name=\"b_1\", \n",
    "                                shape=[N_HIDDEN_1], \n",
    "                                initializer=tf.zeros_initializer()),\n",
    "                            'out': tf.get_variable(\n",
    "                                name=\"b_out\", \n",
    "                                shape=[N_OUTPUTS], \n",
    "                                initializer=tf.zeros_initializer()),\n",
    "                            }\n",
    "            self.logits\n",
    "        \n",
    "    @lazy_property\n",
    "    def logits(self):\n",
    "        \"\"\"Logits lazy property that returns the logits of the model\"\"\"\n",
    "        with tf.variable_scope(self.name):\n",
    "            # Reshape for hidden layer\n",
    "            self.inp_reshaped = tf.reshape(self.inputs, shape=[1, N_INPUTS])\n",
    "            # Single hidden layer\n",
    "            self.h1_layer_logits = tf.sigmoid(tf.add(tf.matmul(\n",
    "                self.inp_reshaped, self.weights['h1']), self.biases['b1']))\n",
    "            # Output layer\n",
    "            self.out_layer_logits = tf.add(tf.matmul(\n",
    "                self.h1_layer_logits, self.weights['out']), self.biases['out'])\n",
    "            # Reshape for labels\n",
    "            return tf.reshape(self.out_layer_logits, shape=[1, STACK, SIZE, DIMS])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Instantiate all the Ops"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "with tf.device(TF_DEVICE):\n",
    "    # Get the relevant dataset nodes\n",
    "    x, y, iterators, handle, init_ops = make_tf_datasets(init_ops)\n",
    "    # Build the model\n",
    "    model = OReillyModel(x, name='or_model')\n",
    "    # Grab the logits\n",
    "    logits = model.logits\n",
    "    \n",
    "    # Ensure y is cast to the same type as logits\n",
    "    labels = tf.cast(y, logits.dtype)\n",
    "    \n",
    "    # We will keep this in for now\n",
    "    # Define alpha as placeholder variable\n",
    "    alpha_ph = tf.placeholder(tf.float32, shape=[])\n",
    "\n",
    "    # Define loss and optimizer\n",
    "    loss_op = tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(\n",
    "        logits=logits, labels=labels))\n",
    "\n",
    "    # Define some intermediate nodes\n",
    "    predictions = tf.sigmoid(logits)\n",
    "    rounded_predictions = tf.round(predictions)\n",
    "    equal_labels_and_preds = tf.equal(rounded_predictions, labels)\n",
    "    \n",
    "    # O'Reilly Accuracy \n",
    "    axis_acc = tf.reduce_all(equal_labels_and_preds, axis=(2))\n",
    "    slot_acc = tf.reduce_all(axis_acc, axis=(2))\n",
    "    sample_acc = tf.reduce_all(slot_acc, axis=(1))\n",
    " \n",
    "    # Elemental Accuracy \n",
    "    el_acc_op = tf.reduce_mean(tf.cast(equal_labels_and_preds, tf.float16))\n",
    "    # Axis Accuracy\n",
    "    axis_acc_op = tf.reduce_mean(tf.cast(axis_acc, tf.float16))\n",
    "    # Slot Accuracy\n",
    "    slot_acc_op = tf.reduce_mean(tf.cast(slot_acc, tf.float16))\n",
    "    # Sample Accuracy\n",
    "    sample_acc_op = tf.reduce_mean(tf.cast(sample_acc, tf.float16))\n",
    "    \n",
    "    # Train op\n",
    "    train_op = tf.train.GradientDescentOptimizer(alpha_ph).minimize(loss_op)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### New Session Function\n",
    "\n",
    "In the event that we do not want to immediately close sessions, we won't be using the context handler but will still need to grab new sessions as necessary. So let's quickly write a function that will properly run `sess.close()` if a previous session exists and then return a new `tf.Session` instance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def new_session(*args, **kwargs):\n",
    "    # Try to close the globally defined session if it isn't already\n",
    "    try:\n",
    "        if not sess._closed:\n",
    "            sess.close()\n",
    "    # If it doesn't exist, then just pass\n",
    "    except NameError:\n",
    "        pass\n",
    "    # Return the new instance\n",
    "    return tf.Session(*args, **kwargs)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Defining the Training Function\n",
    "\n",
    "Let's define a function that runs the training routine and accepts the number of epochs as the inputs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "def train(sess, lr=ALPHA, epochs=EPOCHS, n_updates=N_UPDATES,\n",
    "          init_ops=None):\n",
    "    # Ensure this is an int\n",
    "    epochs = int(epochs)\n",
    "    # Dict with the various metrics we care about\n",
    "    metrics = {'loss':[], 'el_acc':[], 'ax_acc':[], 'sl_acc':[], 'sm_acc':[], \n",
    "               'val_loss':[], 'val_el_acc':[], 'val_ax_acc':[], 'val_sl_acc':[], \n",
    "               'val_sm_acc':[]}\n",
    "    # Run the initialization ops\n",
    "    init_ops = init_ops or []\n",
    "    init_ops += [tf.global_variables_initializer(), tf.local_variables_initializer()]\n",
    "    sess.run(init_ops)\n",
    "    # Define training and validation handlers\n",
    "    training_handle, validation_handle, testing_handle = sess.run([i.string_handle() \n",
    "                                                                   for i in iterators])\n",
    "\n",
    "    for epoch in range(epochs):\n",
    "        ep_loss, ep_el_acc, ep_sl_acc, ep_ax_acc, ep_sm_acc = np.zeros([5, N_TRAIN])\n",
    "        # Run the training steps\n",
    "        for i in range(N_TRAIN):\n",
    "            _, ep_loss[i], ep_el_acc[i], ep_sl_acc[i], ep_ax_acc[i], ep_sm_acc[i] = sess.run(\n",
    "                [train_op, loss_op, el_acc_op, axis_acc_op, slot_acc_op, sample_acc_op],\n",
    "                feed_dict={handle: training_handle, alpha_ph: lr})\n",
    "            \n",
    "        # Get means for the epoch\n",
    "        epoch_data = list(np.mean((ep_loss, ep_el_acc, ep_sl_acc, ep_ax_acc, ep_sm_acc), \n",
    "                                  axis=1))\n",
    "\n",
    "        # Calculate validation accuracy and loss\n",
    "        val_data = list(sess.run([loss_op, el_acc_op, axis_acc_op, slot_acc_op, sample_acc_op],\n",
    "                                 feed_dict={handle: validation_handle}))\n",
    "        \n",
    "        # Record\n",
    "        for key, value in zip(metrics.keys(), epoch_data + val_data):\n",
    "            metrics[key].append(value)\n",
    "\n",
    "        # Selectively display the epoch number\n",
    "        if n_updates and (not epoch % (epochs / n_updates) or epoch == epochs - 1):\n",
    "            print((\"Completed epoch {0}/{1}. Metrics:\\n\" + \n",
    "                   \"                     Loss   Sample Accuracy   Elem Accuracy\\n\" +\n",
    "                   \"    Epoch:      {2:10.4f}   {3:10.4f}   {4:10.4f}\\n\" +\n",
    "                   \"    Validation: {5:10.4f}   {6:10.4f}   {7:10.4f}\\n\").format(\n",
    "                epoch+1, epochs, epoch_data[0],epoch_data[4], epoch_data[1], \n",
    "                val_data[0], val_data[4], val_data[1]))\n",
    "\n",
    "    # Calculate accuracy for test images\n",
    "    print(\"Optimization Finished! Testing Sample Accuracy:\", sess.run(\n",
    "        sample_acc_op, feed_dict={handle: testing_handle}))\n",
    "    return metrics"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Baseline metrics\n",
    "\n",
    "Just as a sanity check, let's run the new class model with a learning rate of 0.1 so we can get good results relatively quickly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimization Finished! Testing Sample Accuracy: 0.294\n",
      "Optimization Finished! Testing Sample Accuracy: 0.286\n",
      "Optimization Finished! Testing Sample Accuracy: 0.282\n",
      "Optimization Finished! Testing Sample Accuracy: 0.296\n",
      "Optimization Finished! Testing Sample Accuracy: 0.306\n",
      "Optimization Finished! Testing Sample Accuracy: 0.252\n",
      "Optimization Finished! Testing Sample Accuracy: 0.304\n",
      "Optimization Finished! Testing Sample Accuracy: 0.276\n",
      "Optimization Finished! Testing Sample Accuracy: 0.29\n",
      "Optimization Finished! Testing Sample Accuracy: 0.294\n"
     ]
    }
   ],
   "source": [
    "def exp_test():\n",
    "    sess = new_session()\n",
    "    metrics_list = []\n",
    "    for i in range(N_MODELS):\n",
    "        metrics_list.append(train(sess, lr=0.1, epochs=EPOCHS, n_updates=0, init_ops=init_ops))\n",
    "    return metrics_list\n",
    "metrics = exp_test()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Hebbian Weight Update"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Cleanup any residual nodes\n",
    "tf.reset_default_graph()\n",
    "\n",
    "init_ops = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {},
   "outputs": [],
   "source": [
    "class HebbianModel(OReillyModel):\n",
    "    def __init__(self, inputs, name='hebb_model', k=0.001, *args, **kwargs):\n",
    "        super().__init__(inputs, name=name, *args, **kwargs)\n",
    "        self.k = k\n",
    "    \n",
    "    def get_hebbian_weight_update(self):\n",
    "        \"\"\"Weight update according to O'Reilly.\"\"\"\n",
    "        with tf.variable_scope(self.name):\n",
    "            # w_h1 delta\n",
    "            x_plus = tf.reshape(ltf.tfutils.repeat(self.inp_reshaped, [1, N_HIDDEN_1]), \n",
    "                           [1, N_INPUTS, N_HIDDEN_1])\n",
    "            y_plus = tf.reshape(tf.tile(self.h1_layer_logits, [1, N_INPUTS]), \n",
    "                           [1, N_INPUTS, N_HIDDEN_1])\n",
    "            self.w_h1_delta = tf.reshape(tf.multiply(\n",
    "                y_plus, x_plus - self.weights['h1']), self.weights['h1'].shape)\n",
    "\n",
    "            # w_out delta\n",
    "            x_plus = tf.reshape(ltf.tfutils.repeat(self.h1_layer_logits, [1, N_OUTPUTS]), \n",
    "                           [1, N_HIDDEN_1, N_OUTPUTS])\n",
    "            y_plus = tf.reshape(tf.tile(self.out_layer_logits, [1, N_HIDDEN_1]), \n",
    "                           [1,  N_HIDDEN_1, N_OUTPUTS])\n",
    "            self.w_out_delta = tf.reshape(tf.multiply(\n",
    "                y_plus, x_plus - self.weights['out']), self.weights['out'].shape)\n",
    "            return [self.w_h1_delta, self.w_out_delta]\n",
    "        \n",
    "    def hebbian_update(self):\n",
    "        with tf.variable_scope(self.name):\n",
    "            self.hebb_assign_h1 = self.weights['h1'].assign(self.weights['h1'] - self.k*self.w_h1_delta)\n",
    "            self.hebb_assign_out = self.weights['out'].assign(self.weights['out'] - self.k*self.w_out_delta)\n",
    "            return [self.hebb_assign_h1, self.hebb_assign_out]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {},
   "outputs": [],
   "source": [
    "with tf.device(TF_DEVICE):\n",
    "    # Get the relevant dataset nodes\n",
    "    x, y, iterators, handle, init_ops = make_tf_datasets(init_ops)\n",
    "    # Build the model\n",
    "    model = HebbianModel(x)\n",
    "    # Grab the logits\n",
    "    logits = model.logits\n",
    "    \n",
    "    # Ensure y is cast to the same type as logits\n",
    "    labels = tf.cast(y, logits.dtype)\n",
    "    \n",
    "    # We will keep this in for now\n",
    "    # Define alpha as placeholder variable\n",
    "    alpha_ph = (1.0-model.k) * tf.placeholder(tf.float32, shape=[])\n",
    "\n",
    "    # Define loss and optimizer\n",
    "    loss_op = tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(\n",
    "        logits=logits, labels=labels))\n",
    "\n",
    "    # Define some intermediate nodes\n",
    "    predictions = tf.sigmoid(logits)\n",
    "    rounded_predictions = tf.round(predictions)\n",
    "    equal_labels_and_preds = tf.equal(rounded_predictions, labels)\n",
    "    \n",
    "    # O'Reilly Accuracy \n",
    "    axis_acc = tf.reduce_all(equal_labels_and_preds, axis=(2))\n",
    "    slot_acc = tf.reduce_all(axis_acc, axis=(2))\n",
    "    sample_acc = tf.reduce_all(slot_acc, axis=(1))\n",
    " \n",
    "    # Elemental Accuracy \n",
    "    el_acc_op = tf.reduce_mean(tf.cast(equal_labels_and_preds, tf.float16))\n",
    "    # Axis Accuracy\n",
    "    axis_acc_op = tf.reduce_mean(tf.cast(axis_acc, tf.float16))\n",
    "    # Slot Accuracy\n",
    "    slot_acc_op = tf.reduce_mean(tf.cast(slot_acc, tf.float16))\n",
    "    # Sample Accuracy\n",
    "    sample_acc_op = tf.reduce_mean(tf.cast(sample_acc, tf.float16))\n",
    "    \n",
    "    # Train op\n",
    "    train_op = tf.train.GradientDescentOptimizer(alpha_ph).minimize(loss_op)\n",
    "    \n",
    "    # Hebbian ops\n",
    "    hebb_updates = model.get_hebbian_weight_update()\n",
    "    hebb_assigns = model.hebbian_update()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {},
   "outputs": [],
   "source": [
    "def train_hebbian(sess, lr=ALPHA, epochs=EPOCHS, n_updates=N_UPDATES,\n",
    "          init_ops=None):\n",
    "    # Ensure this is an int\n",
    "    epochs = int(epochs)\n",
    "    # Dict with the various metrics we care about\n",
    "    metrics = {'loss':[], 'el_acc':[], 'ax_acc':[], 'sl_acc':[], 'sm_acc':[], \n",
    "               'val_loss':[], 'val_el_acc':[], 'val_ax_acc':[], 'val_sl_acc':[], \n",
    "               'val_sm_acc':[]}\n",
    "    # Run the initialization ops\n",
    "    init_ops = init_ops or []\n",
    "    init_ops += [tf.global_variables_initializer(), tf.local_variables_initializer()]\n",
    "    sess.run(init_ops)\n",
    "    # Define training and validation handlers\n",
    "    training_handle, validation_handle, testing_handle = sess.run([i.string_handle() \n",
    "                                                                   for i in iterators])\n",
    "\n",
    "    for epoch in range(epochs):\n",
    "        ep_loss, ep_el_acc, ep_sl_acc, ep_ax_acc, ep_sm_acc = np.zeros([5, N_TRAIN])\n",
    "        # Run the training steps\n",
    "        for i in range(N_TRAIN):\n",
    "            *_, ep_loss[i], ep_el_acc[i], ep_sl_acc[i], ep_ax_acc[i], ep_sm_acc[i] = sess.run(\n",
    "                [*hebb_updates,\n",
    "                 train_op, \n",
    "                 *hebb_assigns,\n",
    "                 loss_op, \n",
    "                 el_acc_op, \n",
    "                 axis_acc_op, \n",
    "                 slot_acc_op, \n",
    "                 sample_acc_op],\n",
    "                feed_dict={handle: training_handle, alpha_ph: lr})\n",
    "            \n",
    "        # Get means for the epoch\n",
    "        epoch_data = list(np.mean((ep_loss, ep_el_acc, ep_sl_acc, ep_ax_acc, ep_sm_acc), \n",
    "                                  axis=1))\n",
    "\n",
    "        ep_loss, ep_el_acc, ep_sl_acc, ep_ax_acc, ep_sm_acc = np.zeros([5, N_TRAIN])\n",
    "        # Run the training steps\n",
    "        for i in range(N_VAL):\n",
    "            ep_loss[i], ep_el_acc[i], ep_sl_acc[i], ep_ax_acc[i], ep_sm_acc[i] = sess.run(\n",
    "                [loss_op, \n",
    "                 el_acc_op, \n",
    "                 axis_acc_op, \n",
    "                 slot_acc_op, \n",
    "                 sample_acc_op],\n",
    "                feed_dict={handle: validation_handle})\n",
    "            \n",
    "        # Get means for the epoch\n",
    "        val_data = list(np.mean((ep_loss, ep_el_acc, ep_sl_acc, ep_ax_acc, ep_sm_acc), \n",
    "                                  axis=1))\n",
    "        \n",
    "#         # Record\n",
    "        for key, value in zip(metrics.keys(), epoch_data + val_data):\n",
    "            metrics[key].append(value)\n",
    "\n",
    "        # Selectively display the epoch number\n",
    "        if n_updates and (not epoch % (epochs / n_updates) or epoch == epochs - 1):\n",
    "            print((\"Completed epoch {0}/{1}. Metrics:\\n\" + \n",
    "                   \"                     Loss   Sample Accuracy   Elem Accuracy\\n\" +\n",
    "                   \"    Epoch:      {2:10.4f}   {3:10.4f}   {4:10.4f}\\n\" +\n",
    "                   \"    Validation: {5:10.4f}   {6:10.4f}   {7:10.4f}\\n\").format(\n",
    "                epoch+1, epochs, epoch_data[0],epoch_data[4], epoch_data[1], \n",
    "                val_data[0], val_data[4], val_data[1]))\n",
    "            print(sess.run([model.weights['h1'], model.w_h1_delta], feed_dict={handle: validation_handle}))\n",
    "\n",
    "    # Calculate accuracy for test images\n",
    "    print(\"Optimization Finished! Testing Sample Accuracy:\", sess.run(\n",
    "        sample_acc_op, feed_dict={handle: testing_handle}))\n",
    "    return metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Completed epoch 1/500. Metrics:\n",
      "                     Loss   Sample Accuracy   Elem Accuracy\n",
      "    Epoch:          0.5216       0.0000       0.7806\n",
      "    Validation:     0.2468       0.0000       0.4012\n",
      "\n",
      "[array([[ 0.11603113, -0.03034082,  0.14950062, ..., -0.03549043,\n",
      "         0.02167246, -0.14002205],\n",
      "       [ 0.14448103, -0.03981291, -0.11713367, ...,  0.06386729,\n",
      "        -0.19053303,  0.13540429],\n",
      "       [-0.09896538,  0.13133489, -0.00564499, ..., -0.17392659,\n",
      "        -0.16468258, -0.09899872],\n",
      "       ...,\n",
      "       [ 0.0606298 , -0.06557979,  0.15403122, ..., -0.1227987 ,\n",
      "         0.03715883,  0.11385176],\n",
      "       [ 0.11037663, -0.04466212, -0.0576346 , ...,  0.11619173,\n",
      "         0.03535512,  0.07481437],\n",
      "       [-0.08490437, -0.10857745, -0.00773236, ...,  0.03796524,\n",
      "        -0.0700201 , -0.0321959 ]], dtype=float32), array([[ 0.42296615,  0.5351013 ,  0.5849154 , ...,  0.1953448 ,\n",
      "         0.33634156,  0.4222027 ],\n",
      "       [ 0.4093533 ,  0.5400206 ,  0.76828825, ...,  0.17660104,\n",
      "         0.4092962 ,  0.32019964],\n",
      "       [ 0.52583885,  0.451136  ,  0.69161403, ...,  0.22146074,\n",
      "         0.40040904,  0.40700987],\n",
      "       ...,\n",
      "       [ 0.44947487,  0.5534024 ,  0.58179957, ...,  0.21181548,\n",
      "         0.33101746,  0.32818154],\n",
      "       [-0.0528136 ,  0.023195  ,  0.03963714, ..., -0.02191952,\n",
      "        -0.01215482, -0.02770721],\n",
      "       [ 0.0406255 ,  0.05638904,  0.00531779, ..., -0.00716213,\n",
      "         0.02407238,  0.01192363]], dtype=float32)]\n",
      "Completed epoch 500/500. Metrics:\n",
      "                     Loss   Sample Accuracy   Elem Accuracy\n",
      "    Epoch:          0.2644       0.0000       0.8872\n",
      "    Validation:     0.2373       0.0000       0.4019\n",
      "\n",
      "[array([[ 1.2369571e+02,  1.3523758e+01,  2.5375116e+02, ...,\n",
      "        -8.5641931e+02,  9.1100359e+00, -2.1227798e+01],\n",
      "       [ 2.8901849e+02, -1.4265539e+01, -5.1414791e+01, ...,\n",
      "         7.0783501e+01, -6.4237421e+02,  4.2635925e+01],\n",
      "       [-1.5469206e+02,  4.9012989e+01,  1.3517978e+02, ...,\n",
      "        -1.2768906e+03, -5.7557910e+02, -2.3373791e+01],\n",
      "       ...,\n",
      "       [-1.1925593e+02, -9.9905596e+00,  4.1940698e+02, ...,\n",
      "        -7.5233838e+02, -7.4392731e+01,  1.1900630e+01],\n",
      "       [ 1.3777391e+01, -3.0503260e+01, -3.4951443e+02, ...,\n",
      "         5.3242206e+02,  5.0012573e+01,  3.7811160e-01],\n",
      "       [-4.1634544e+01, -6.9082130e+01, -6.2593298e+02, ...,\n",
      "        -1.0003271e+02, -2.6835791e+02, -8.5801735e+00]], dtype=float32), array([[-0., -0., -0., ...,  0., -0.,  0.],\n",
      "       [-0.,  0.,  0., ..., -0.,  0., -0.],\n",
      "       [ 0., -0., -0., ...,  0.,  0.,  0.],\n",
      "       ...,\n",
      "       [ 0.,  0., -0., ...,  0.,  0., -0.],\n",
      "       [-0.,  0.,  0., ..., -0., -0.,  0.],\n",
      "       [ 0.,  0.,  0., ...,  0.,  0.,  0.]], dtype=float32)]\n",
      "Optimization Finished! Testing Sample Accuracy: 0.0\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x648 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def exp_test():\n",
    "    model.k = 0\n",
    "    sess = new_session()\n",
    "    metrics_list = []\n",
    "    for i in range(1):\n",
    "        metrics_list.append(train_hebbian(sess, lr=1.0, epochs=EPOCHS, n_updates=3, init_ops=init_ops))\n",
    "    return metrics_list\n",
    "metrics = exp_test()\n",
    "plt_metrics.plot_df_metrics(pd.DataFrame(metrics), title='Training Curves')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
