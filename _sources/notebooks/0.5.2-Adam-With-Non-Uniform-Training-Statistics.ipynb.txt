{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 0.5.2 Adam with Non-Uniform Training Statistics"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Boilerplate\n",
    "\n",
    "The following subsections are largely boilerplate code, so skip around as needed."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Jupyter Extensions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Load [watermark](https://github.com/rasbt/watermark) to see the state of the machine and environment that's running the notebook. To make sense of the options, take a look at the [usage](https://github.com/rasbt/watermark#usage) section of the readme."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wed May 22 2019 11:18:22 \n",
      "\n",
      "CPython 3.6.8\n",
      "IPython 7.3.0\n",
      "\n",
      "numpy 1.16.2\n",
      "matplotlib 3.0.3\n",
      "seaborn 0.9.0\n",
      "tensorflow 1.12.0\n",
      "\n",
      "compiler   : GCC 7.3.0\n",
      "system     : Linux\n",
      "release    : 4.4.0-130-generic\n",
      "machine    : x86_64\n",
      "processor  : x86_64\n",
      "CPU cores  : 12\n",
      "interpreter: 64bit\n",
      "Git hash   : 810f976398276557f16e1a3950c0699c4cefcbbb\n",
      "Git branch : master\n"
     ]
    }
   ],
   "source": [
    "# Load `watermark` extension\n",
    "%load_ext watermark\n",
    "# Display the status of the machine and packages. Add more as necessary.\n",
    "%watermark -v -n -m -g -b -t -p numpy,matplotlib,seaborn,tensorflow"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Load [autoreload](https://ipython.org/ipython-doc/3/config/extensions/autoreload.html) which will always reload modules marked with `%aimport`.\n",
    "\n",
    "This behavior can be inverted by running `autoreload 2` which will set everything to be auto-reloaded *except* for modules marked with `%aimport`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load `autoreload` extension\n",
    "%load_ext autoreload\n",
    "# Set autoreload behavior\n",
    "%autoreload 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Load `matplotlib` in one of the more `jupyter`-friendly [rich-output modes](https://ipython.readthedocs.io/en/stable/interactive/plotting.html). Some options (that may or may not have worked) are `inline`, `notebook`, and `gtk`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set the matplotlib mode.\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Imports"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Static imports that shouldn't necessarily change throughout the notebook."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Standard library imports\n",
    "import logging\n",
    "import os\n",
    "from pathlib import Path\n",
    "from copy import deepcopy\n",
    "from pprint import pprint\n",
    "\n",
    "# Third party\n",
    "import IPython as ipy\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import tensorflow as tf\n",
    "from pstar import pdict"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Local imports that may or may not be autoreloaded. This section contains things that will likely have to be re-imported multiple times, and have additions or subtractions made throughout the project."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Task script\n",
    "%aimport leabratf.tasks.combinatorics.combigen\n",
    "import leabratf.tasks.combinatorics.combigen as cg\n",
    "# Visualization for the task\n",
    "%aimport leabratf.visualization.combigen_heatmap\n",
    "import leabratf.visualization.combigen_heatmap as cgh\n",
    "# Metrics visulaization\n",
    "%aimport leabratf.visualization.metrics\n",
    "import leabratf.visualization.metrics as plt_metrics\n",
    "# Utility functions\n",
    "%aimport leabratf.utils\n",
    "from leabratf.utils import setup_logging\n",
    "%aimport leabratf.constants\n",
    "from leabratf.constants import DIR_DATA_PROC\n",
    "%aimport leabratf.tasks.combinatorics.default_configuration\n",
    "from leabratf.tasks.combinatorics.default_configuration import default_config"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Initial Setup"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Set [seaborn defaults](https://seaborn.pydata.org/generated/seaborn.set.html) for matplotlib."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "sns.set()\n",
    "sns.set_context(\"notebook\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Set up the logger configuration to something more useful than baseline. Creates log files for the different log levels in the `logs` directory.\n",
    "\n",
    "See `logging.yml` for the exact logging configuration."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Run base logger setup\n",
    "setup_logging()\n",
    "# Define a logger object\n",
    "logger = logging.getLogger('leabratf')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Default Configuration"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define the base experiment configuration\n",
    "cfg = default_config()\n",
    "# Overwrite any configuration values here\n",
    "cfg.tf_device = '/device:CPU:0'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'_config': True,\n",
      " '_name': 'test',\n",
      " 'batch_size': 1,\n",
      " 'dims': 2,\n",
      " 'dir_checkpoints': PosixPath('/home/abdullah_rashed/work/projects/leabra-tf/models/checkpoints'),\n",
      " 'dir_tensorboard': PosixPath('/home/abdullah_rashed/work/projects/leabra-tf/data/tensorboard'),\n",
      " 'epochs': 500,\n",
      " 'line_stats': [[1, 1, 1, 1, 1], [1, 1, 1, 1, 1]],\n",
      " 'lr': 0.01,\n",
      " 'n_epochs_acc': 25,\n",
      " 'n_hidden_1': 100,\n",
      " 'n_inputs': 100,\n",
      " 'n_lines': 2,\n",
      " 'n_models': 10,\n",
      " 'n_outputs': 40,\n",
      " 'n_samples': 100,\n",
      " 'n_test': 500,\n",
      " 'n_train': 100,\n",
      " 'n_updates': 2,\n",
      " 'n_val': 50,\n",
      " 'optimizer': 'sgd',\n",
      " 'size': 5,\n",
      " 'slots': 4,\n",
      " 'tf_device': '/device:CPU:0'}\n",
      "<class 'pstar.pstar.pdict'>\n"
     ]
    }
   ],
   "source": [
    "# Define a config dict constructor based on the cfg above\n",
    "default_nb_config = lambda **kwargs: default_config(**deepcopy(cfg).update(**kwargs))\n",
    "# Testing set config\n",
    "testing_set_config = default_nb_config(_name='test')\n",
    "print(testing_set_config, type(testing_set_config), sep='\\n')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Datasets\n",
    "\n",
    "Here we will introduce new line sampling statistics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Uniform, same as before. Not actually needed but here for \n",
    "# comparative purposes\n",
    "uniform = [[1,1,1,1,1], [1,1,1,1,1]]\n",
    "# One element is twice as likely to occur as any other element \n",
    "one_elem = [[2,1,1,1,1], [1,1,1,1,1]]\n",
    "# Two elements are twice as likely to occur as any other element\n",
    "two_elem = [[2,1,1,1,1], [1,1,1,1,2]]\n",
    "# Half the elements are twice as likely to occur as the other half\n",
    "half_elem = [[2,1,2,1,2], [1,2,1,2,1]]\n",
    "\n",
    "# String names for the stats\n",
    "train_names = ['train_1e', 'train_2e', 'train_he', 'train_uni']\n",
    "stats = [one_elem, two_elem, half_elem, uniform]\n",
    "# Arrange these into a dictionary\n",
    "stats_dict = pdict({name : stat for name, stat in zip(train_names, stats)})\n",
    "\n",
    "# Training Set experiment configurations\n",
    "training_set_configs = pdict({name : default_nb_config(line_stats=stat, \n",
    "                                                      batch_size=cfg.n_train,\n",
    "                                                      n_samples=cfg.batch_size,\n",
    "                                                      _name=name)\n",
    "                            for name, stat in stats_dict.items()})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def np_datasets(configs):\n",
    "    datasets = pdict()\n",
    "    inner_config = configs\n",
    "    if hasattr(inner_config, '_config') and inner_config._config:\n",
    "        inner_config = pdict({inner_config._name : inner_config})\n",
    "        \n",
    "    for name, exp_cfg in inner_config.items():\n",
    "        # Generate the datasets\n",
    "        y_data = cg.generate_labels(n_samples=exp_cfg.n_samples, \n",
    "                                    slots=exp_cfg.slots, \n",
    "                                    size=exp_cfg.size, \n",
    "                                    dims=exp_cfg.dims, \n",
    "                                    n_lines=exp_cfg.n_lines,\n",
    "                                    line_stats=exp_cfg.line_stats)\n",
    "        x_data = cg.inverse_transform(y_data)\n",
    "        # Add them to the datasets pdict\n",
    "        datasets[name] = (x_data, y_data)\n",
    "    return datasets\n",
    "    \n",
    "# Single pdict of x,y datasets\n",
    "dataset_configs = pdict({testing_set_config._name: testing_set_config}).update(\n",
    "    training_set_configs)\n",
    "np_datasets = np_datasets(dataset_configs)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Background\n",
    "\n",
    "This section goes over some of the background information for the notebook using results from previous notebooks. This first section shows the task as always, but then will also go over the previous training curves."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### The Combigen Task\n",
    "\n",
    "Quickly remind ourselves what the task looks like before diving in."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 40 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cgh.visualize_combigen(5)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Adam Optimizer Performance Thus Far\n",
    "\n",
    "In [nb-0.7](0.7-Replicating-Results-with-the-Updated-Task.ipynb) we showed that Adam Optimizer still performed better than the standard model."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setting Up the Graph\n",
    "\n",
    "This next section will define the computational graph that will be used to generate the metrics down below. It is largely code copied from nb-0.3, so skip around as needed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Cleanup any residual nodes\n",
    "tf.reset_default_graph()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Make the Different Datasets\n",
    "\n",
    "Define the various `tf.Dataset`s that will be used including the ones with the different statistics."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "def make_tf_datasets(datasets, configs, init_ops=None):\n",
    "    # The first step of the setup is that each of the datasets (training, validation, and \n",
    "    # testing) are turned into their own `Dataset` objects.\n",
    "    tf_datasets = pdict(\n",
    "        {name : tf.data.Dataset.from_tensor_slices(\n",
    "            datasets[name]).repeat().batch(configs[name].batch_size)\n",
    "         for name in datasets.keys()})\n",
    "    \n",
    "    # Next, let's define the iterators for each of the datasets, and then add their \n",
    "    # initializations to the `init_ops` list.\n",
    "    # Training iterator\n",
    "    iterators = pdict({name : data.make_initializable_iterator()\n",
    "                      for name, data in tf_datasets.items()})\n",
    "\n",
    "    # Add the initiatlizations to the init opts\n",
    "    init_ops = init_ops or []\n",
    "    init_ops += [iter.initializer for iter in iterators.values()]\n",
    "    \n",
    "    first_dataset = list(tf_datasets.values())[0] \n",
    "    output_types, output_shapes = first_dataset.output_types, first_dataset.output_shapes\n",
    "    \n",
    "    # And finally, the interesting part. Rather than creating separate next elements for \n",
    "    # the model, the `tf.data` API has a string handler iterator so we can contextually \n",
    "    # switch the active `Dataset` object, resulting in different values being used for `x` \n",
    "    # and `y`.\n",
    "\n",
    "    # The way this is done is by defining a `tf.placeholder` variable, which is used \n",
    "    # first to create a string handler iterator, and later to hold the dataset-indicating \n",
    "    # string handle. The string handler iterator is what then changes the values of `x` and \n",
    "    # `y`, naturally also supplying them using the `get_next` method.\n",
    "    # The placeholder variable of type string\n",
    "    handle = tf.placeholder(tf.string, shape=[])\n",
    "    \n",
    "    # Iterator from string handle\n",
    "    handle_iterator = tf.data.Iterator.from_string_handle(\n",
    "        handle, output_types, output_shapes)\n",
    "\n",
    "    # x and y that will be used in the graph\n",
    "    x, y = handle_iterator.get_next()\n",
    "    \n",
    "    return x, y, iterators, handle, init_ops"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### TF Variables\n",
    "\n",
    "Straight forward section where we define the weights and biases. One thing to note is that the weights are initialized using the `tf.contrib.layers.xavier_initializer`. \n",
    "\n",
    "Additionally, create an empty list that will contain the initialization operations to be performed at the start of a session."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Weights and biases\n",
    "weights = {\n",
    "    'h1': tf.get_variable(name='w_h1', shape=[cfg.n_inputs, cfg.n_hidden_1],\n",
    "                      initializer=tf.contrib.layers.xavier_initializer()),\n",
    "    'out': tf.get_variable(name='w_out', shape=[cfg.n_hidden_1, cfg.n_outputs],\n",
    "                      initializer=tf.contrib.layers.xavier_initializer()),\n",
    "}\n",
    "biases = {\n",
    "    'b1': tf.get_variable(name=\"b_1\", shape=[cfg.n_hidden_1], \n",
    "                      initializer=tf.zeros_initializer()),\n",
    "    'out': tf.get_variable(name=\"b_out\", shape=[cfg.n_outputs], \n",
    "                      initializer=tf.zeros_initializer()),\n",
    "}\n",
    "\n",
    "init_ops = []"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model and Metrics\n",
    "\n",
    "The architecture is the same as previous notebooks. See `nb-0.3` for more details."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "def oreilly_model(inputs, config):\n",
    "    # Reshape for hidden layer\n",
    "    inputs = tf.reshape(inputs, shape=[-1, config.n_inputs])\n",
    "    # Single hidden layer\n",
    "    inputs = tf.sigmoid(tf.add(tf.matmul(inputs, weights['h1']), biases['b1']))\n",
    "    # Output layer\n",
    "    inputs = tf.add(tf.matmul(inputs, weights['out']), biases['out'])\n",
    "    # Reshape for labels\n",
    "    return tf.reshape(inputs, shape=[-1, config.slots, config.size, config.dims])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "with tf.device(cfg.tf_device):\n",
    "    # Get the relevant dataset nodes\n",
    "    x, y, iterators, handler, init_ops = make_tf_datasets(\n",
    "        np_datasets, dataset_configs, init_ops)\n",
    "\n",
    "    # Build the model\n",
    "    logits = oreilly_model(x, config=cfg)\n",
    "    # Ensure y is cast to the same type as logits\n",
    "    labels = tf.cast(y, logits.dtype)\n",
    "    \n",
    "    # We will keep this in for now\n",
    "    # Define alpha as placeholder variable\n",
    "    alpha_ph = tf.placeholder(tf.float32, shape=[])\n",
    "\n",
    "    # Define loss and optimizer\n",
    "    loss_op = tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(\n",
    "        logits=logits, labels=labels))\n",
    "\n",
    "    # Define some intermediate nodes\n",
    "    predictions = tf.sigmoid(logits)\n",
    "    rounded_predictions = tf.round(predictions)\n",
    "    equal_labels_and_preds = tf.equal(rounded_predictions, labels)\n",
    "    \n",
    "    # O'Reilly Accuracy \n",
    "    axis_acc = tf.reduce_all(equal_labels_and_preds, axis=(2))\n",
    "    slot_acc = tf.reduce_all(axis_acc, axis=(2))\n",
    "    sample_acc = tf.reduce_all(slot_acc, axis=(1))\n",
    " \n",
    "    # Elemental Accuracy \n",
    "    el_acc_op = tf.reduce_mean(tf.cast(equal_labels_and_preds, tf.float32))\n",
    "    # Axis Accuracy\n",
    "    axis_acc_op = tf.reduce_mean(tf.cast(axis_acc, tf.float32))\n",
    "    # Slot Accuracy\n",
    "    slot_acc_op = tf.reduce_mean(tf.cast(slot_acc, tf.float32))\n",
    "    # Sample Accuracy\n",
    "    sample_acc_op = tf.reduce_mean(tf.cast(sample_acc, tf.float32))\n",
    "    \n",
    "    # metric ops\n",
    "    met_op_names = ['loss', 'el_acc', 'ax_acc', 'sl_acc', 'sm_acc']\n",
    "    met_ops = [loss_op, el_acc_op, axis_acc_op, slot_acc_op, sample_acc_op]\n",
    "    # Put them in a dict\n",
    "    met_op_dict = pdict({name : op for name, op in zip(met_op_names, met_ops)})\n",
    "\n",
    "    # Generic metrics dict\n",
    "    generic_metrics_dict = lambda : pdict({name : [] \n",
    "                                           for name in met_op_names+['epoch']})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "### Varying the Optimizer\n",
    "\n",
    "Let's create several different training operations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "with tf.device(cfg.tf_device):\n",
    "    # Adam\n",
    "    train_op_adam = tf.train.AdamOptimizer(alpha_ph).minimize(loss_op)\n",
    "    # Adadelta \n",
    "    train_op_adadelta = tf.train.AdadeltaOptimizer(alpha_ph).minimize(loss_op)\n",
    "    # RMSProp\n",
    "    train_op_rmsprop = tf.train.RMSPropOptimizer(alpha_ph).minimize(loss_op)\n",
    "    # SGD\n",
    "    train_op_sgd = tf.train.GradientDescentOptimizer(alpha_ph).minimize(loss_op)\n",
    "    \n",
    "# And now add these to a dictionary\n",
    "optimizer_dict = pdict({\n",
    "    'Adam' : train_op_adam,\n",
    "    'Adadelta' : train_op_adadelta,\n",
    "    'RMSProp' : train_op_rmsprop,\n",
    "    'sgd' : train_op_sgd,\n",
    "})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### New Session Function\n",
    "\n",
    "In the event that we do not want to immediately close sessions, we won't be using the context handler but will still need to grab new sessions as necessary. So let's quickly write a function that will properly run `sess.close()` if a previous session exists and then return a new `tf.Session` instance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "def new_session(*args, **kwargs):\n",
    "    # Try to close the globally defined session if it isn't already\n",
    "    try:\n",
    "        if not sess._closed:\n",
    "            sess.close()\n",
    "    # If it doesn't exist, then just pass\n",
    "    except NameError:\n",
    "        pass\n",
    "    # Return the new instance\n",
    "    return tf.Session(*args, **kwargs)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Defining the Training Function\n",
    "\n",
    "Let's define a function that runs the training routine and accepts the number of epochs as the inputs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "def train_stats(sess, \n",
    "                lr=cfg.lr, \n",
    "                epochs=cfg.epochs,\n",
    "                train_op=optimizer_dict[cfg.optimizer], \n",
    "                init_ops=None,\n",
    "                n_train=training_set_configs['train_uni'].n_train,\n",
    "                training_set_name='train_uni',\n",
    "                n_val=25):\n",
    "    # Ensure this is an int\n",
    "    epochs = int(epochs)\n",
    "    # Dict with the various metrics we care about while training\n",
    "    training_metrics = generic_metrics_dict()\n",
    "    \n",
    "    # Run the initialization ops\n",
    "    init_ops = init_ops or []\n",
    "    init_ops += [tf.global_variables_initializer(), \n",
    "                 tf.local_variables_initializer()]\n",
    "    sess.run(init_ops)\n",
    "    \n",
    "    # Define training and validation handlers\n",
    "    handles = pdict({name : sess.run(iterators[name].string_handle())\n",
    "                    for name in iterators.keys()})\n",
    "        \n",
    "    for epoch in range(epochs):\n",
    "        for i in range(n_train):\n",
    "            # Training op and compute metrics\n",
    "            _ = sess.run(\n",
    "                train_op, \n",
    "                feed_dict={alpha_ph: lr, handler: handles[training_set_name]})\n",
    "                \n",
    "        if not epoch % n_val or epoch == epochs - 1:\n",
    "            metrics = sess.run(\n",
    "                met_ops,\n",
    "                feed_dict={handler: handles.test})\n",
    "            # Record\n",
    "            for key, metric in zip(met_op_names, metrics):\n",
    "                training_metrics[key].append(metric)\n",
    "            training_metrics['epoch'].append(epoch)\n",
    "            logger.debug('Completed epoch {0}'.format(epoch))\n",
    "                \n",
    "    return training_metrics"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Defining The Training Routine"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Pulled from https://codereview.stackexchange.com/questions/169870/decorator-to-measure-execution-time-of-a-function\n",
    "from functools import wraps\n",
    "from time import time\n",
    "import datetime\n",
    "\n",
    "def timing(f):\n",
    "    @wraps(f)\n",
    "    def wrapper(*args, **kwargs):\n",
    "        start = time()\n",
    "        result = f(*args, **kwargs)\n",
    "        end = time()\n",
    "        logger.info('Elapsed time: {}'.format(\n",
    "            datetime.timedelta(seconds=end-start)))\n",
    "        return result\n",
    "    return wrapper"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "@timing\n",
    "def exp_stats(epochs=cfg.epochs, \n",
    "              all_train_metrics=None, \n",
    "              all_test_metrics=None,\n",
    "              n_models=cfg.n_models,\n",
    "              lr=cfg.lr,\n",
    "              n_val=25,\n",
    "              optimizer=cfg.optimizer):\n",
    "    \n",
    "    sess = new_session()\n",
    "    stat_metrics = pdict()\n",
    "    train_op = optimizer_dict[optimizer]\n",
    "    exit = False\n",
    "    \n",
    "    logger.info('Optimizing using {0}'.format(train_op.name))\n",
    "    for train_set in train_names:\n",
    "        logger.info('Using {} training set'.format(train_set))\n",
    "        all_train_metrics = []\n",
    "        while len(all_train_metrics) < n_models:\n",
    "            try:\n",
    "                logger.info('Starting training for model {0}.'.format(\n",
    "                    len(all_train_metrics)))\n",
    "                metrics = train_stats(\n",
    "                    sess, \n",
    "                    epochs=epochs, \n",
    "                    lr=lr,\n",
    "                    init_ops=init_ops,\n",
    "                    n_val=n_val,\n",
    "                    train_op=train_op,\n",
    "                    training_set_name=train_set)\n",
    "                all_train_metrics.append(metrics)\n",
    "\n",
    "            except KeyboardInterrupt:\n",
    "                print('Encountered a KeyboardInterrupt. '\n",
    "                      'Starting a IPython Shell.')\n",
    "                ipy.embed()\n",
    "                inp = ''\n",
    "                while inp.lower() not in ['y', 'n', 's']:\n",
    "                    inp = input(\"Continue training? [(Y)es/(N)o/(S)kip]\")\n",
    "                if inp.lower() == 'y':\n",
    "                    logger.info('Continuing training...')\n",
    "                    continue\n",
    "                elif inp.lower() == 's':\n",
    "                    logger.info('Skipping training set...')\n",
    "                    break\n",
    "                else:\n",
    "                    logger.info('Exiting')\n",
    "                    exit = True\n",
    "                    break\n",
    "            finally:     \n",
    "                stat_metrics[train_set] = all_train_metrics\n",
    "                \n",
    "        if exit:\n",
    "            break\n",
    "            \n",
    "    return stat_metrics"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Adam Optimizer with the Different Training Sets"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Getting the Metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2019-05-26 14:11:15 x7 leabratf[24947] INFO Optimizing using Adam_1\n",
      "2019-05-26 14:11:15 x7 leabratf[24947] INFO Using train_1e training set\n",
      "2019-05-26 14:11:15 x7 leabratf[24947] INFO Starting training for model 0.\n",
      "2019-05-26 14:40:07 x7 leabratf[24947] INFO Starting training for model 1.\n",
      "2019-05-26 15:09:01 x7 leabratf[24947] INFO Starting training for model 2.\n",
      "2019-05-26 15:37:54 x7 leabratf[24947] INFO Starting training for model 3.\n",
      "2019-05-26 16:06:49 x7 leabratf[24947] INFO Starting training for model 4.\n",
      "2019-05-26 16:35:37 x7 leabratf[24947] INFO Starting training for model 5.\n",
      "2019-05-26 17:04:34 x7 leabratf[24947] INFO Starting training for model 6.\n",
      "2019-05-26 17:33:30 x7 leabratf[24947] INFO Starting training for model 7.\n",
      "2019-05-26 18:02:26 x7 leabratf[24947] INFO Starting training for model 8.\n",
      "2019-05-26 18:31:23 x7 leabratf[24947] INFO Starting training for model 9.\n",
      "2019-05-26 19:00:20 x7 leabratf[24947] INFO Using train_2e training set\n",
      "2019-05-26 19:00:20 x7 leabratf[24947] INFO Starting training for model 0.\n",
      "2019-05-26 19:29:17 x7 leabratf[24947] INFO Starting training for model 1.\n",
      "2019-05-26 19:58:16 x7 leabratf[24947] INFO Starting training for model 2.\n",
      "2019-05-26 20:27:14 x7 leabratf[24947] INFO Starting training for model 3.\n",
      "2019-05-26 20:56:13 x7 leabratf[24947] INFO Starting training for model 4.\n",
      "2019-05-26 21:25:10 x7 leabratf[24947] INFO Starting training for model 5.\n",
      "2019-05-26 21:54:07 x7 leabratf[24947] INFO Starting training for model 6.\n",
      "2019-05-26 22:23:05 x7 leabratf[24947] INFO Starting training for model 7.\n",
      "2019-05-26 22:52:01 x7 leabratf[24947] INFO Starting training for model 8.\n",
      "2019-05-26 23:20:59 x7 leabratf[24947] INFO Starting training for model 9.\n",
      "2019-05-26 23:49:56 x7 leabratf[24947] INFO Using train_he training set\n",
      "2019-05-26 23:49:56 x7 leabratf[24947] INFO Starting training for model 0.\n",
      "2019-05-27 00:18:52 x7 leabratf[24947] INFO Starting training for model 1.\n",
      "2019-05-27 00:47:47 x7 leabratf[24947] INFO Starting training for model 2.\n",
      "2019-05-27 01:16:45 x7 leabratf[24947] INFO Starting training for model 3.\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "adam_train_metrics = exp_stats(\n",
    "    epochs=5000,\n",
    "    n_models=10,\n",
    "    n_val=50,\n",
    "    lr=0.0033,\n",
    "    optimizer='Adam')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['train_1e', 'train_2e', 'train_he', 'train_uni'])"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adam_train_metrics.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wrote to file /home/abdullah_rashed/work/projects/leabra-tf/data/processed/test_statistics/adam_train_metrics_5.2.pickle\n"
     ]
    }
   ],
   "source": [
    "import pickle\n",
    "dryrun = False\n",
    "\n",
    "exp_dir = DIR_DATA_PROC / 'test_statistics'\n",
    "if not exp_dir.exists():\n",
    "    exp_dir.mkdir()\n",
    "    \n",
    "adam_file_names = ['adam_train_metrics_5.2.pickle']\n",
    "adam_file_paths = [exp_dir / file for file in adam_file_names]\n",
    "adam_data = [adam_train_metrics]\n",
    "\n",
    "for i, file in enumerate(adam_file_paths):\n",
    "    if not dryrun:\n",
    "        if not file.exists():\n",
    "            file.touch()\n",
    "        assert file.exists()\n",
    "        with open(str(file), 'wb') as fp:\n",
    "            pickle.dump(adam_data[i], fp, protocol=2)\n",
    "        print('Wrote to file {0}'.format(str(file)))\n",
    "    else:\n",
    "        print('Dryrun: did not write to file {0}'.format(str(file)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 729,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10\n",
      "['loss', 'el_acc', 'ax_acc', 'sl_acc', 'sm_acc', 'epoch']\n",
      "10\n",
      "['1e', '2e', 'he', 'uni']\n"
     ]
    }
   ],
   "source": [
    "for file in adam_file_paths:\n",
    "    assert file.exists(), file\n",
    "    with open(str(file), 'rb') as fp:\n",
    "        data = pickle.load(fp)\n",
    "        print(len(data))\n",
    "        print(list(data[0].keys()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%%time\n",
    "sgd_train_metrics = exp_stats(\n",
    "    epochs=5000,\n",
    "    n_models=10,\n",
    "    n_val=50,\n",
    "    lr=0.1,\n",
    "    optimizer='sgd')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(sgd_train_metrics['train_1e'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 733,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wrote to file /home/abdullah_rashed/work/projects/leabra-tf/data/processed/test_statistics/sgd_train_metrics.pickle\n",
      "Wrote to file /home/abdullah_rashed/work/projects/leabra-tf/data/processed/test_statistics/sgd_test_metrics.pickle\n"
     ]
    }
   ],
   "source": [
    "dryrun = False\n",
    "\n",
    "sgd_file_names = ['sgd_train_metrics.pickle', 'sgd_test_metrics.pickle']\n",
    "sgd_file_paths = [exp_dir / file for file in sgd_file_names]\n",
    "sgd_data = [sgd_train_metrics, sgd_test_metrics]\n",
    "\n",
    "for i, file in enumerate(sgd_file_paths):\n",
    "    if not dryrun:\n",
    "        if not file.exists():\n",
    "            file.touch()\n",
    "        assert file.exists()\n",
    "        with open(str(file), 'wb') as fp:\n",
    "            pickle.dump(sgd_data[i], fp, protocol=2)\n",
    "        print('Wrote to file {0}'.format(str(file)))\n",
    "    else:\n",
    "        print('Dryrun: did not write to file {0}'.format(str(file)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "for name in met_op_names:\n",
    "    plt.plot(adam_test_metrics[0]['1e']['epoch'], adam_test_metrics[0]['1e'][name], label=name)\n",
    "plt.xlabel('Epochs')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 701,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "met = 'sm_acc'\n",
    "for test_stat in test_names:\n",
    "    for i, model in enumerate(adam_test_metrics):\n",
    "        plt.plot(model[test_stat]['epoch'], \n",
    "                 model[test_stat][met], \n",
    "                 label='Stat: {}'.format(test_stat),\n",
    "                )\n",
    "    \n",
    "handles, labels = plt.gca().get_legend_handles_labels()\n",
    "by_label = dict(zip(labels, handles))\n",
    "plt.legend(by_label.values(), by_label.keys())\n",
    "\n",
    "plt.xlabel('Epochs')\n",
    "# plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from leabratf.utils import set_plot_size\n",
    "\n",
    "@set_plot_size()\n",
    "def plot_df_metrics(metrics_df, metrics=None, title='Training History',\n",
    "                    epochs=None, key_by_model=False, model_average=False,\n",
    "                    epoch_vline=500):\n",
    "    # What metrics to plot\n",
    "    metrics = metrics or metrics_df.columns\n",
    "    # Empty lists for the long form data\n",
    "    long_epochs, long_metrics, long_hues, long_units = [], [], [], []\n",
    "    \n",
    "    # Loop through each model's data\n",
    "    for i, metrics_series in metrics_df.iterrows():\n",
    "        # Series data is in a string format, convert to floats and put them in a\n",
    "        # dict\n",
    "        if isinstance(metrics_series[metrics[0]], str):\n",
    "            metrics_dict = {key: [float(val)\n",
    "                                  for val in literal_eval(metrics_series[key])]\n",
    "                            for key in metrics}\n",
    "            \n",
    "        else:\n",
    "            metrics_dict = {key: [val for val in metrics_series[key]]\n",
    "                            for key in metrics}\n",
    "        \n",
    "        # How many epochs to plot\n",
    "        if not epochs:\n",
    "            len_metrics = [len(val) for val in metrics_dict.values()]\n",
    "            # Plot the number of epochs according to the data with the shortest\n",
    "            # number of epochs.\n",
    "            epochs = min(len_metrics)\n",
    "\n",
    "        # Add to the long form lists\n",
    "        for key in metrics:\n",
    "            label = key if not key_by_model else 'Model {0}'.format(i)\n",
    "            units = i if not key_by_model else key\n",
    "            long_epochs += list(range(epochs))\n",
    "            long_metrics += metrics_dict[key][:epochs]\n",
    "            long_hues += [label]*epochs\n",
    "            long_units += [units]*epochs\n",
    "\n",
    "    if model_average:\n",
    "        sns.lineplot(x=long_epochs, y=long_metrics, hue=long_hues, \n",
    "                     estimator='mean')\n",
    "    # Plot each line individually\n",
    "    else:\n",
    "        sns.lineplot(x=long_epochs, y=long_metrics, hue=long_hues, \n",
    "                     estimator=None, units=long_units)\n",
    "\n",
    "    # Title, axis, and 500 epoch line\n",
    "    plt.title(title)\n",
    "    plt.xlabel('Epochs')\n",
    "    if epoch_vline and epochs > epoch_vline:\n",
    "        plt.axvline(epoch_vline, linestyle='--', label='{0} Epochs'.format(\n",
    "            epoch_vline))\n",
    "        \n",
    "    # Prune down the number of labels to just the unique ones\n",
    "    handles, labels = plt.gca().get_legend_handles_labels()\n",
    "    by_label = dict(zip(labels, handles))\n",
    "    plt.legend(by_label.values(), by_label.keys())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Losses\n",
    "# min_loss_sgd_train = [min(met['loss']) for met in sgd_train_metrics]\n",
    "# min_loss_adam_train = [min(met['loss']) for met in adam_train_metrics]\n",
    "max_mets_sgd_train = {name : [max(met['sm_acc']) for met in sgd_train_metrics[name]] \n",
    "                      for name in sgd_train_metrics.keys()}\n",
    "max_mets_adam_train = {name : [max(met['sm_acc']) for met in adam_train_metrics[name]] \n",
    "                       for name in adam_train_metrics.keys()}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Adam', 'Adam', 'Adam', 'Adam', 'Adam', 'Adam', 'Adam', 'Adam',\n",
       "       'Adam', 'Adam', 'SGD', 'SGD', 'SGD', 'SGD', 'SGD', 'SGD', 'SGD',\n",
       "       'SGD', 'SGD', 'SGD'], dtype='<U4')"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "optimizer_labels = np.repeat(['Adam', 'SGD'], 10)\n",
    "optimizer_labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['train_1e', 'train_2e', 'train_he', 'train_uni'])"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adam_train_metrics.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['loss', 'el_acc', 'ax_acc', 'sl_acc', 'sm_acc', 'epoch'])"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adam_train_metrics['train_uni'][0].keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [],
   "source": [
    "# data_loss = min_loss_adam_train + min_loss_sgd_train\n",
    "data_dict = {key : max_mets_adam_train[key] + max_mets_sgd_train[key]\n",
    "            for key in max_mets_adam_train.keys()}\n",
    "# data_dict['Loss'] = data_loss\n",
    "data_dict['Optimizer'] = optimizer_labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [],
   "source": [
    "metric_labels = []\n",
    "metric_values = []\n",
    "optimizer_labels = []\n",
    "for key in max_mets_adam_train.keys():\n",
    "    metric_values += max_mets_adam_train[key] + max_mets_sgd_train[key]\n",
    "    metric_labels +=  [key] * 20\n",
    "    optimizer_labels += ['Adam'] * 10 + ['SGD'] * 10\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Values</th>\n",
       "      <th>Datasets</th>\n",
       "      <th>Optimizer</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>train_1e</td>\n",
       "      <td>Adam</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>train_1e</td>\n",
       "      <td>Adam</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.0</td>\n",
       "      <td>train_1e</td>\n",
       "      <td>Adam</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.0</td>\n",
       "      <td>train_1e</td>\n",
       "      <td>Adam</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.0</td>\n",
       "      <td>train_1e</td>\n",
       "      <td>Adam</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Values  Datasets Optimizer\n",
       "0     0.0  train_1e      Adam\n",
       "1     0.0  train_1e      Adam\n",
       "2     0.0  train_1e      Adam\n",
       "3     0.0  train_1e      Adam\n",
       "4     0.0  train_1e      Adam"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_dict = {'Values' : metric_values,\n",
    "             'Datasets' : metric_labels,\n",
    "             'Optimizer' : optimizer_labels}\n",
    "data_df = pd.DataFrame(data_dict)\n",
    "data_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plotting Results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Comparing Datasets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.swarmplot(x=\"Datasets\", y=\"Values\", hue=\"Optimizer\", data=data_df)\n",
    "plt.title('Sample Accuracy of Adam vs SGD')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
