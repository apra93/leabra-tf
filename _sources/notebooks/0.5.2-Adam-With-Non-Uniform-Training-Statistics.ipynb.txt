{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 0.5.2 Adam with Non-Uniform Training Statistics"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Boilerplate\n",
    "\n",
    "The following subsections are largely boilerplate code, so skip around as needed."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Jupyter Extensions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Load [watermark](https://github.com/rasbt/watermark) to see the state of the machine and environment that's running the notebook. To make sense of the options, take a look at the [usage](https://github.com/rasbt/watermark#usage) section of the readme."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wed May 22 2019 11:18:22 \n",
      "\n",
      "CPython 3.6.8\n",
      "IPython 7.3.0\n",
      "\n",
      "numpy 1.16.2\n",
      "matplotlib 3.0.3\n",
      "seaborn 0.9.0\n",
      "tensorflow 1.12.0\n",
      "\n",
      "compiler   : GCC 7.3.0\n",
      "system     : Linux\n",
      "release    : 4.4.0-130-generic\n",
      "machine    : x86_64\n",
      "processor  : x86_64\n",
      "CPU cores  : 12\n",
      "interpreter: 64bit\n",
      "Git hash   : 810f976398276557f16e1a3950c0699c4cefcbbb\n",
      "Git branch : master\n"
     ]
    }
   ],
   "source": [
    "# Load `watermark` extension\n",
    "%load_ext watermark\n",
    "# Display the status of the machine and packages. Add more as necessary.\n",
    "%watermark -v -n -m -g -b -t -p numpy,matplotlib,seaborn,tensorflow"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Load [autoreload](https://ipython.org/ipython-doc/3/config/extensions/autoreload.html) which will always reload modules marked with `%aimport`.\n",
    "\n",
    "This behavior can be inverted by running `autoreload 2` which will set everything to be auto-reloaded *except* for modules marked with `%aimport`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load `autoreload` extension\n",
    "%load_ext autoreload\n",
    "# Set autoreload behavior\n",
    "%autoreload 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Load `matplotlib` in one of the more `jupyter`-friendly [rich-output modes](https://ipython.readthedocs.io/en/stable/interactive/plotting.html). Some options (that may or may not have worked) are `inline`, `notebook`, and `gtk`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set the matplotlib mode.\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Imports"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Static imports that shouldn't necessarily change throughout the notebook."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Standard library imports\n",
    "import logging\n",
    "import os\n",
    "from pathlib import Path\n",
    "from copy import deepcopy\n",
    "from pprint import pprint\n",
    "\n",
    "# Third party\n",
    "import IPython as ipy\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import tensorflow as tf\n",
    "from pstar import pdict"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Local imports that may or may not be autoreloaded. This section contains things that will likely have to be re-imported multiple times, and have additions or subtractions made throughout the project."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Task script\n",
    "%aimport leabratf.tasks.combinatorics.combigen\n",
    "import leabratf.tasks.combinatorics.combigen as cg\n",
    "# Visualization for the task\n",
    "%aimport leabratf.visualization.combigen_heatmap\n",
    "import leabratf.visualization.combigen_heatmap as cgh\n",
    "# Metrics visulaization\n",
    "%aimport leabratf.visualization.metrics\n",
    "import leabratf.visualization.metrics as plt_metrics\n",
    "# Utility functions\n",
    "%aimport leabratf.utils\n",
    "from leabratf.utils import setup_logging\n",
    "%aimport leabratf.constants\n",
    "from leabratf.constants import DIR_DATA_PROC\n",
    "%aimport leabratf.tasks.combinatorics.default_configuration\n",
    "from leabratf.tasks.combinatorics.default_configuration import default_config"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Initial Setup"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Set [seaborn defaults](https://seaborn.pydata.org/generated/seaborn.set.html) for matplotlib."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "sns.set()\n",
    "sns.set_context(\"notebook\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Set up the logger configuration to something more useful than baseline. Creates log files for the different log levels in the `logs` directory.\n",
    "\n",
    "See `logging.yml` for the exact logging configuration."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Run base logger setup\n",
    "setup_logging()\n",
    "# Define a logger object\n",
    "logger = logging.getLogger('leabratf')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Default Configuration"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define the base experiment configuration\n",
    "cfg = default_config()\n",
    "# Overwrite any configuration values here\n",
    "cfg.tf_device = '/device:CPU:0'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'_config': True,\n",
      " '_name': 'test',\n",
      " 'batch_size': 500,\n",
      " 'dims': 2,\n",
      " 'dir_checkpoints': PosixPath('/home/abdullah_rashed/work/projects/leabra-tf/models/checkpoints'),\n",
      " 'dir_tensorboard': PosixPath('/home/abdullah_rashed/work/projects/leabra-tf/data/tensorboard'),\n",
      " 'epochs': 500,\n",
      " 'line_stats': [[1, 1, 1, 1, 1], [1, 1, 1, 1, 1]],\n",
      " 'lr': 0.01,\n",
      " 'n_epochs_acc': 25,\n",
      " 'n_hidden_1': 100,\n",
      " 'n_inputs': 100,\n",
      " 'n_lines': 2,\n",
      " 'n_models': 10,\n",
      " 'n_outputs': 40,\n",
      " 'n_samples': 500,\n",
      " 'n_test': 500,\n",
      " 'n_train': 100,\n",
      " 'n_updates': 2,\n",
      " 'n_val': 50,\n",
      " 'optimizer': 'sgd',\n",
      " 'size': 5,\n",
      " 'slots': 4,\n",
      " 'tf_device': '/device:CPU:0'}\n",
      "<class 'pstar.pstar.pdict'>\n"
     ]
    }
   ],
   "source": [
    "# Define a config dict constructor based on the cfg above\n",
    "default_nb_config = lambda **kwargs: default_config(**deepcopy(cfg).update(**kwargs))\n",
    "# Testing set config\n",
    "testing_set_config = default_nb_config(_name='test', batch_size=cfg.n_test, n_samples=cfg.n_test)\n",
    "print(testing_set_config, type(testing_set_config), sep='\\n')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Datasets\n",
    "\n",
    "Here we will introduce new line sampling statistics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Uniform, same as before. Not actually needed but here for \n",
    "# comparative purposes\n",
    "uniform = [[1,1,1,1,1], [1,1,1,1,1]]\n",
    "# One element is twice as likely to occur as any other element \n",
    "one_elem = [[2,1,1,1,1], [1,1,1,1,1]]\n",
    "# Two elements are twice as likely to occur as any other element\n",
    "two_elem = [[2,1,1,1,1], [1,1,1,1,2]]\n",
    "# Half the elements are twice as likely to occur as the other half\n",
    "half_elem = [[2,1,2,1,2], [1,2,1,2,1]]\n",
    "\n",
    "# String names for the stats\n",
    "train_names = ['train_1e', 'train_2e', 'train_he', 'train_uni']\n",
    "stats = [one_elem, two_elem, half_elem, uniform]\n",
    "# Arrange these into a dictionary\n",
    "stats_dict = pdict({name : stat for name, stat in zip(train_names, stats)})\n",
    "\n",
    "# Training Set experiment configurations\n",
    "training_set_configs = pdict({name : default_nb_config(line_stats=stat, \n",
    "                                                      batch_size=cfg.batch_size,\n",
    "                                                      n_samples=cfg.n_samples,\n",
    "                                                      _name=name)\n",
    "                            for name, stat in stats_dict.items()})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "metadata": {},
   "outputs": [],
   "source": [
    "def np_datasets(configs):\n",
    "    datasets = pdict()\n",
    "    inner_config = configs\n",
    "    if hasattr(inner_config, '_config') and inner_config._config:\n",
    "        inner_config = pdict({inner_config._name : inner_config})\n",
    "        \n",
    "    for name, exp_cfg in inner_config.items():\n",
    "        # Generate the datasets\n",
    "        y_data = cg.generate_labels(n_samples=exp_cfg.n_samples, \n",
    "                                    slots=exp_cfg.slots, \n",
    "                                    size=exp_cfg.size, \n",
    "                                    dims=exp_cfg.dims, \n",
    "                                    n_lines=exp_cfg.n_lines,\n",
    "                                    line_stats=exp_cfg.line_stats)\n",
    "        x_data = cg.inverse_transform(y_data)\n",
    "        # Add them to the datasets pdict\n",
    "        datasets[name] = (x_data, y_data)\n",
    "    return datasets\n",
    "    \n",
    "# Single pdict of x,y datasets\n",
    "dataset_configs = pdict({testing_set_config._name: testing_set_config}).update(\n",
    "    training_set_configs)\n",
    "np_datasets = np_datasets(dataset_configs)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Background\n",
    "\n",
    "This section goes over some of the background information for the notebook using results from previous notebooks. This first section shows the task as always, but then will also go over the previous training curves."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### The Combigen Task\n",
    "\n",
    "Quickly remind ourselves what the task looks like before diving in."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 40 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cgh.visualize_combigen(5)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Adam Optimizer Performance Thus Far\n",
    "\n",
    "In [nb-0.7](0.7-Replicating-Results-with-the-Updated-Task.ipynb) we showed that Adam Optimizer still performed better than the standard model."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setting Up the Graph\n",
    "\n",
    "This next section will define the computational graph that will be used to generate the metrics down below. It is largely code copied from nb-0.3, so skip around as needed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Cleanup any residual nodes\n",
    "tf.reset_default_graph()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Make the Different Datasets\n",
    "\n",
    "Define the various `tf.Dataset`s that will be used including the ones with the different statistics."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "metadata": {},
   "outputs": [],
   "source": [
    "def make_tf_datasets(datasets, configs, init_ops=None):\n",
    "    # The first step of the setup is that each of the datasets (training, validation, and \n",
    "    # testing) are turned into their own `Dataset` objects.\n",
    "    tf_datasets = pdict(\n",
    "        {name : tf.data.Dataset.from_tensor_slices(\n",
    "            datasets[name]).repeat().batch(configs[name].batch_size)\n",
    "         for name in datasets.keys()})\n",
    "    \n",
    "    # Next, let's define the iterators for each of the datasets, and then add their \n",
    "    # initializations to the `init_ops` list.\n",
    "    # Training iterator\n",
    "    iterators = pdict({name : data.make_initializable_iterator()\n",
    "                      for name, data in tf_datasets.items()})\n",
    "\n",
    "    # Add the initiatlizations to the init opts\n",
    "    init_ops = init_ops or []\n",
    "    init_ops += [iter.initializer for iter in iterators.values()]\n",
    "    \n",
    "    first_dataset = list(tf_datasets.values())[0] \n",
    "    output_types, output_shapes = first_dataset.output_types, first_dataset.output_shapes\n",
    "    \n",
    "    # And finally, the interesting part. Rather than creating separate next elements for \n",
    "    # the model, the `tf.data` API has a string handler iterator so we can contextually \n",
    "    # switch the active `Dataset` object, resulting in different values being used for `x` \n",
    "    # and `y`.\n",
    "\n",
    "    # The way this is done is by defining a `tf.placeholder` variable, which is used \n",
    "    # first to create a string handler iterator, and later to hold the dataset-indicating \n",
    "    # string handle. The string handler iterator is what then changes the values of `x` and \n",
    "    # `y`, naturally also supplying them using the `get_next` method.\n",
    "    # The placeholder variable of type string\n",
    "    handle = tf.placeholder(tf.string, shape=[])\n",
    "    \n",
    "    # Iterator from string handle\n",
    "    handle_iterator = tf.data.Iterator.from_string_handle(\n",
    "        handle, output_types, output_shapes)\n",
    "\n",
    "    # x and y that will be used in the graph\n",
    "    x, y = handle_iterator.get_next()\n",
    "    \n",
    "    return x, y, iterators, handle, init_ops"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### TF Variables\n",
    "\n",
    "Straight forward section where we define the weights and biases. One thing to note is that the weights are initialized using the `tf.contrib.layers.xavier_initializer`. \n",
    "\n",
    "Additionally, create an empty list that will contain the initialization operations to be performed at the start of a session."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Weights and biases\n",
    "weights = {\n",
    "    'h1': tf.get_variable(name='w_h1', shape=[cfg.n_inputs, cfg.n_hidden_1],\n",
    "                      initializer=tf.contrib.layers.xavier_initializer()),\n",
    "    'out': tf.get_variable(name='w_out', shape=[cfg.n_hidden_1, cfg.n_outputs],\n",
    "                      initializer=tf.contrib.layers.xavier_initializer()),\n",
    "}\n",
    "biases = {\n",
    "    'b1': tf.get_variable(name=\"b_1\", shape=[cfg.n_hidden_1], \n",
    "                      initializer=tf.zeros_initializer()),\n",
    "    'out': tf.get_variable(name=\"b_out\", shape=[cfg.n_outputs], \n",
    "                      initializer=tf.zeros_initializer()),\n",
    "}\n",
    "\n",
    "init_ops = []"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model and Metrics\n",
    "\n",
    "The architecture is the same as previous notebooks. See `nb-0.3` for more details."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "metadata": {},
   "outputs": [],
   "source": [
    "def oreilly_model(inputs, config):\n",
    "    # Reshape for hidden layer\n",
    "    inputs = tf.reshape(inputs, shape=[-1, config.n_inputs])\n",
    "    # Single hidden layer\n",
    "    inputs = tf.sigmoid(tf.add(tf.matmul(inputs, weights['h1']), biases['b1']))\n",
    "    # Output layer\n",
    "    inputs = tf.add(tf.matmul(inputs, weights['out']), biases['out'])\n",
    "    # Reshape for labels\n",
    "    return tf.reshape(inputs, shape=[-1, config.slots, config.size, config.dims])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "metadata": {},
   "outputs": [],
   "source": [
    "with tf.device(cfg.tf_device):\n",
    "    # Get the relevant dataset nodes\n",
    "    x, y, iterators, handler, init_ops = make_tf_datasets(\n",
    "        np_datasets, dataset_configs, init_ops)\n",
    "\n",
    "    # Build the model\n",
    "    logits = oreilly_model(x, config=cfg)\n",
    "    # Ensure y is cast to the same type as logits\n",
    "    labels = tf.cast(y, logits.dtype)\n",
    "    \n",
    "    # We will keep this in for now\n",
    "    # Define alpha as placeholder variable\n",
    "    alpha_ph = tf.placeholder(tf.float32, shape=[])\n",
    "\n",
    "    # Define loss and optimizer\n",
    "    loss_op = tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(\n",
    "        logits=logits, labels=labels))\n",
    "\n",
    "    # Define some intermediate nodes\n",
    "    predictions = tf.sigmoid(logits)\n",
    "    rounded_predictions = tf.round(predictions)\n",
    "    equal_labels_and_preds = tf.equal(rounded_predictions, labels)\n",
    "    \n",
    "    # O'Reilly Accuracy \n",
    "    axis_acc = tf.reduce_all(equal_labels_and_preds, axis=(2))\n",
    "    slot_acc = tf.reduce_all(axis_acc, axis=(2))\n",
    "    sample_acc = tf.reduce_all(slot_acc, axis=(1))\n",
    " \n",
    "    # Elemental Accuracy \n",
    "    el_acc_op = tf.reduce_mean(tf.cast(equal_labels_and_preds, tf.float32))\n",
    "    # Axis Accuracy\n",
    "    axis_acc_op = tf.reduce_mean(tf.cast(axis_acc, tf.float32))\n",
    "    # Slot Accuracy\n",
    "    slot_acc_op = tf.reduce_mean(tf.cast(slot_acc, tf.float32))\n",
    "    # Sample Accuracy\n",
    "    sample_acc_op = tf.reduce_mean(tf.cast(sample_acc, tf.float32))\n",
    "    \n",
    "    # metric ops\n",
    "    met_op_names = ['loss', 'el_acc', 'ax_acc', 'sl_acc', 'sm_acc']\n",
    "    met_ops = [loss_op, el_acc_op, axis_acc_op, slot_acc_op, sample_acc_op]\n",
    "    # Put them in a dict\n",
    "    met_op_dict = pdict({name : op for name, op in zip(met_op_names, met_ops)})\n",
    "\n",
    "    # Generic metrics dict\n",
    "    generic_metrics_dict = lambda : pdict({name : [] \n",
    "                                           for name in met_op_names+['epoch']})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "### Varying the Optimizer\n",
    "\n",
    "Let's create several different training operations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "metadata": {},
   "outputs": [],
   "source": [
    "with tf.device(cfg.tf_device):\n",
    "    # Adam\n",
    "    train_op_adam = tf.train.AdamOptimizer(alpha_ph).minimize(loss_op)\n",
    "    # Adadelta \n",
    "    train_op_adadelta = tf.train.AdadeltaOptimizer(alpha_ph).minimize(loss_op)\n",
    "    # RMSProp\n",
    "    train_op_rmsprop = tf.train.RMSPropOptimizer(alpha_ph).minimize(loss_op)\n",
    "    # SGD\n",
    "    train_op_sgd = tf.train.GradientDescentOptimizer(alpha_ph).minimize(loss_op)\n",
    "    \n",
    "# And now add these to a dictionary\n",
    "optimizer_dict = pdict({\n",
    "    'Adam' : train_op_adam,\n",
    "    'Adadelta' : train_op_adadelta,\n",
    "    'RMSProp' : train_op_rmsprop,\n",
    "    'sgd' : train_op_sgd,\n",
    "})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### New Session Function\n",
    "\n",
    "In the event that we do not want to immediately close sessions, we won't be using the context handler but will still need to grab new sessions as necessary. So let's quickly write a function that will properly run `sess.close()` if a previous session exists and then return a new `tf.Session` instance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "metadata": {},
   "outputs": [],
   "source": [
    "def new_session(*args, **kwargs):\n",
    "    # Try to close the globally defined session if it isn't already\n",
    "    try:\n",
    "        if not sess._closed:\n",
    "            sess.close()\n",
    "    # If it doesn't exist, then just pass\n",
    "    except NameError:\n",
    "        pass\n",
    "    # Return the new instance\n",
    "    return tf.Session(*args, **kwargs)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Defining the Training Function\n",
    "\n",
    "Let's define a function that runs the training routine and accepts the number of epochs as the inputs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "metadata": {},
   "outputs": [],
   "source": [
    "def train_stats(sess, \n",
    "                lr=cfg.lr, \n",
    "                epochs=cfg.epochs,\n",
    "                train_op=optimizer_dict[cfg.optimizer], \n",
    "                init_ops=None,\n",
    "                n_train=training_set_configs['train_uni'].n_train,\n",
    "                training_set_name='train_uni',\n",
    "                testing_set_name='test',\n",
    "                n_val=25,\n",
    "                verbose=False):\n",
    "    log_level = logger.info if verbose else logger.debug\n",
    "    log_level(f'Beginning training using learning rate, {lr}, {train_op.name} '\n",
    "              f'training routine, for {epochs} epochs, on {training_set_name} '\n",
    "              f'training set. Testing using {testing_set_name} dataset.')\n",
    "    # Ensure this is an int\n",
    "    epochs = int(epochs)\n",
    "    # Dict with the various metrics we care about while training\n",
    "    training_metrics = generic_metrics_dict()\n",
    "    \n",
    "    # Run the initialization ops\n",
    "    init_ops = init_ops or []\n",
    "    init_ops += [tf.global_variables_initializer(), \n",
    "                 tf.local_variables_initializer()]\n",
    "    sess.run(init_ops)\n",
    "    \n",
    "    # Define training and validation handlers\n",
    "    handles = pdict({name : sess.run(iterators[name].string_handle())\n",
    "                    for name in iterators.keys()})\n",
    "        \n",
    "    for epoch in range(epochs):\n",
    "        for i in range(n_train):\n",
    "            # Training op and compute metrics\n",
    "            _ = sess.run(\n",
    "                train_op, \n",
    "                feed_dict={alpha_ph: lr, handler: handles[training_set_name]})\n",
    "                \n",
    "        if not epoch % n_val or epoch == epochs - 1:\n",
    "            metrics = sess.run(\n",
    "                met_ops,\n",
    "                feed_dict={handler: handles[testing_set_name]})\n",
    "            # Record\n",
    "            for key, metric in zip(met_op_names, metrics):\n",
    "                training_metrics[key].append(metric)\n",
    "            training_metrics['epoch'].append(epoch)\n",
    "            log_level('Completed epoch {0}'.format(epoch))\n",
    "            \n",
    "    return training_metrics"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Defining The Training Routine"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Pulled from https://codereview.stackexchange.com/questions/169870/decorator-to-measure-execution-time-of-a-function\n",
    "from functools import wraps\n",
    "from time import time\n",
    "import datetime\n",
    "\n",
    "def timing(f):\n",
    "    @wraps(f)\n",
    "    def wrapper(*args, **kwargs):\n",
    "        start = time()\n",
    "        result = f(*args, **kwargs)\n",
    "        end = time()\n",
    "        logger.info('Elapsed time: {}'.format(\n",
    "            datetime.timedelta(seconds=end-start)))\n",
    "        return result\n",
    "    return wrapper"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "metadata": {},
   "outputs": [],
   "source": [
    "@timing\n",
    "def exp_stats(epochs=cfg.epochs, \n",
    "              all_train_metrics=None, \n",
    "              all_test_metrics=None,\n",
    "              n_models=cfg.n_models,\n",
    "              lr=cfg.lr,\n",
    "              n_val=25,\n",
    "              optimizer=cfg.optimizer,\n",
    "              training_sets=train_names,\n",
    "              *args, **kwargs):\n",
    "    \n",
    "    sess = new_session()\n",
    "    stat_metrics = pdict()\n",
    "    train_op = optimizer_dict[optimizer]\n",
    "    exit = False\n",
    "    \n",
    "    logger.info('Optimizing using {0}'.format(train_op.name))\n",
    "    for train_set in training_sets:\n",
    "        logger.info('Using {} training set'.format(train_set))\n",
    "        all_train_metrics = []\n",
    "        while len(all_train_metrics) < n_models:\n",
    "            try:\n",
    "                logger.info('Starting training for model {0}.'.format(\n",
    "                    len(all_train_metrics)))\n",
    "                train_metrics = train_stats(\n",
    "                    sess, \n",
    "                    epochs=epochs, \n",
    "                    lr=lr,\n",
    "                    init_ops=init_ops,\n",
    "                    n_val=n_val,\n",
    "                    train_op=train_op,\n",
    "                    training_set_name=train_set,\n",
    "                    *args, **kwargs)\n",
    "                all_train_metrics.append(train_metrics)\n",
    "\n",
    "            except KeyboardInterrupt:\n",
    "                print('Encountered a KeyboardInterrupt. '\n",
    "                      'Starting a IPython Shell.')\n",
    "                ipy.embed()\n",
    "                inp = ''\n",
    "                while inp.lower() not in ['y', 'n', 's']:\n",
    "                    inp = input(\"Continue training? [(Y)es/(N)o/(S)kip]\")\n",
    "                if inp.lower() == 'y':\n",
    "                    logger.info('Continuing training...')\n",
    "                    continue\n",
    "                elif inp.lower() == 's':\n",
    "                    logger.info('Skipping training set...')\n",
    "                    break\n",
    "                else:\n",
    "                    logger.info('Exiting')\n",
    "                    exit = True\n",
    "                    break\n",
    "            finally:     \n",
    "                stat_metrics[train_set] = all_train_metrics\n",
    "                \n",
    "        if exit:\n",
    "            break\n",
    "            \n",
    "    return stat_metrics"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Adam Optimizer with the Different Training Sets"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Getting the Metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2019-05-26 14:11:15 x7 leabratf[24947] INFO Optimizing using Adam_1\n",
      "2019-05-26 14:11:15 x7 leabratf[24947] INFO Using train_1e training set\n",
      "2019-05-26 14:11:15 x7 leabratf[24947] INFO Starting training for model 0.\n",
      "2019-05-26 14:40:07 x7 leabratf[24947] INFO Starting training for model 1.\n",
      "2019-05-26 15:09:01 x7 leabratf[24947] INFO Starting training for model 2.\n",
      "2019-05-26 15:37:54 x7 leabratf[24947] INFO Starting training for model 3.\n",
      "2019-05-26 16:06:49 x7 leabratf[24947] INFO Starting training for model 4.\n",
      "2019-05-26 16:35:37 x7 leabratf[24947] INFO Starting training for model 5.\n",
      "2019-05-26 17:04:34 x7 leabratf[24947] INFO Starting training for model 6.\n",
      "2019-05-26 17:33:30 x7 leabratf[24947] INFO Starting training for model 7.\n",
      "2019-05-26 18:02:26 x7 leabratf[24947] INFO Starting training for model 8.\n",
      "2019-05-26 18:31:23 x7 leabratf[24947] INFO Starting training for model 9.\n",
      "2019-05-26 19:00:20 x7 leabratf[24947] INFO Using train_2e training set\n",
      "2019-05-26 19:00:20 x7 leabratf[24947] INFO Starting training for model 0.\n",
      "2019-05-26 19:29:17 x7 leabratf[24947] INFO Starting training for model 1.\n",
      "2019-05-26 19:58:16 x7 leabratf[24947] INFO Starting training for model 2.\n",
      "2019-05-26 20:27:14 x7 leabratf[24947] INFO Starting training for model 3.\n",
      "2019-05-26 20:56:13 x7 leabratf[24947] INFO Starting training for model 4.\n",
      "2019-05-26 21:25:10 x7 leabratf[24947] INFO Starting training for model 5.\n",
      "2019-05-26 21:54:07 x7 leabratf[24947] INFO Starting training for model 6.\n",
      "2019-05-26 22:23:05 x7 leabratf[24947] INFO Starting training for model 7.\n",
      "2019-05-26 22:52:01 x7 leabratf[24947] INFO Starting training for model 8.\n",
      "2019-05-26 23:20:59 x7 leabratf[24947] INFO Starting training for model 9.\n",
      "2019-05-26 23:49:56 x7 leabratf[24947] INFO Using train_he training set\n",
      "2019-05-26 23:49:56 x7 leabratf[24947] INFO Starting training for model 0.\n",
      "2019-05-27 00:18:52 x7 leabratf[24947] INFO Starting training for model 1.\n",
      "2019-05-27 00:47:47 x7 leabratf[24947] INFO Starting training for model 2.\n",
      "2019-05-27 01:16:45 x7 leabratf[24947] INFO Starting training for model 3.\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "adam_train_metrics = exp_stats(\n",
    "    epochs=5000,\n",
    "    n_models=10,\n",
    "    n_val=50,\n",
    "    lr=0.0033,\n",
    "    optimizer='Adam')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wrote to file /home/abdullah_rashed/work/projects/leabra-tf/data/processed/test_statistics/adam_train_metrics_5.2.pickle\n"
     ]
    }
   ],
   "source": [
    "import pickle\n",
    "dryrun = False\n",
    "\n",
    "exp_dir = DIR_DATA_PROC / 'test_statistics'\n",
    "if not exp_dir.exists():\n",
    "    exp_dir.mkdir()\n",
    "    \n",
    "adam_file_names = ['adam_train_metrics_5.2.pickle']\n",
    "adam_file_paths = [exp_dir / file for file in adam_file_names]\n",
    "adam_data = [adam_train_metrics]\n",
    "\n",
    "for i, file in enumerate(adam_file_paths):\n",
    "    if not dryrun:\n",
    "        if not file.exists():\n",
    "            file.touch()\n",
    "        assert file.exists()\n",
    "        with open(str(file), 'wb') as fp:\n",
    "            pickle.dump(adam_data[i], fp, protocol=2)\n",
    "        print('Wrote to file {0}'.format(str(file)))\n",
    "    else:\n",
    "        print('Dryrun: did not write to file {0}'.format(str(file)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 729,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10\n",
      "['loss', 'el_acc', 'ax_acc', 'sl_acc', 'sm_acc', 'epoch']\n",
      "10\n",
      "['1e', '2e', 'he', 'uni']\n"
     ]
    }
   ],
   "source": [
    "for file in adam_file_paths:\n",
    "    assert file.exists(), file\n",
    "    with open(str(file), 'rb') as fp:\n",
    "        data = pickle.load(fp)\n",
    "        print(len(data))\n",
    "        print(list(data[0].keys()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%%time\n",
    "sgd_train_metrics = exp_stats(\n",
    "    epochs=5000,\n",
    "    n_models=10,\n",
    "    n_val=50,\n",
    "    lr=0.1,\n",
    "    optimizer='sgd')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(sgd_train_metrics['train_1e'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['loss', 'el_acc', 'ax_acc', 'sl_acc', 'sm_acc', 'epoch'])"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "control_model.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "control_models = adam_train_metrics['train_uni']\n",
    "for i, model in enumerate(control_models):\n",
    "    plt.plot(model.epoch[:10], model.loss[:10], label=f'Model {i}')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 733,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wrote to file /home/abdullah_rashed/work/projects/leabra-tf/data/processed/test_statistics/sgd_train_metrics.pickle\n",
      "Wrote to file /home/abdullah_rashed/work/projects/leabra-tf/data/processed/test_statistics/sgd_test_metrics.pickle\n"
     ]
    }
   ],
   "source": [
    "dryrun = False\n",
    "\n",
    "sgd_file_names = ['sgd_train_metrics.pickle', 'sgd_test_metrics.pickle']\n",
    "sgd_file_paths = [exp_dir / file for file in sgd_file_names]\n",
    "sgd_data = [sgd_train_metrics, sgd_test_metrics]\n",
    "\n",
    "for i, file in enumerate(sgd_file_paths):\n",
    "    if not dryrun:\n",
    "        if not file.exists():\n",
    "            file.touch()\n",
    "        assert file.exists()\n",
    "        with open(str(file), 'wb') as fp:\n",
    "            pickle.dump(sgd_data[i], fp, protocol=2)\n",
    "        print('Wrote to file {0}'.format(str(file)))\n",
    "    else:\n",
    "        print('Dryrun: did not write to file {0}'.format(str(file)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "for name in met_op_names:\n",
    "    plt.plot(adam_test_metrics[0]['1e']['epoch'], adam_test_metrics[0]['1e'][name], label=name)\n",
    "plt.xlabel('Epochs')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 701,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "met = 'sm_acc'\n",
    "for test_stat in test_names:\n",
    "    for i, model in enumerate(adam_test_metrics):\n",
    "        plt.plot(model[test_stat]['epoch'], \n",
    "                 model[test_stat][met], \n",
    "                 label='Stat: {}'.format(test_stat),\n",
    "                )\n",
    "    \n",
    "handles, labels = plt.gca().get_legend_handles_labels()\n",
    "by_label = dict(zip(labels, handles))\n",
    "plt.legend(by_label.values(), by_label.keys())\n",
    "\n",
    "plt.xlabel('Epochs')\n",
    "# plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Losses\n",
    "# min_loss_sgd_train = [min(met['loss']) for met in sgd_train_metrics]\n",
    "# min_loss_adam_train = [min(met['loss']) for met in adam_train_metrics]\n",
    "max_mets_sgd_train = {name : [max(met['sm_acc']) for met in sgd_train_metrics[name]] \n",
    "                      for name in sgd_train_metrics.keys()}\n",
    "max_mets_adam_train = {name : [max(met['sm_acc']) for met in adam_train_metrics[name]] \n",
    "                       for name in adam_train_metrics.keys()}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Adam', 'Adam', 'Adam', 'Adam', 'Adam', 'Adam', 'Adam', 'Adam',\n",
       "       'Adam', 'Adam', 'SGD', 'SGD', 'SGD', 'SGD', 'SGD', 'SGD', 'SGD',\n",
       "       'SGD', 'SGD', 'SGD'], dtype='<U4')"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "optimizer_labels = np.repeat(['Adam', 'SGD'], 10)\n",
    "optimizer_labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['train_1e', 'train_2e', 'train_he', 'train_uni'])"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adam_train_metrics.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['loss', 'el_acc', 'ax_acc', 'sl_acc', 'sm_acc', 'epoch'])"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adam_train_metrics['train_uni'][0].keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [],
   "source": [
    "# data_loss = min_loss_adam_train + min_loss_sgd_train\n",
    "data_dict = {key : max_mets_adam_train[key] + max_mets_sgd_train[key]\n",
    "            for key in max_mets_adam_train.keys()}\n",
    "# data_dict['Loss'] = data_loss\n",
    "data_dict['Optimizer'] = optimizer_labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [],
   "source": [
    "metric_labels = []\n",
    "metric_values = []\n",
    "optimizer_labels = []\n",
    "for key in max_mets_adam_train.keys():\n",
    "    metric_values += max_mets_adam_train[key] + max_mets_sgd_train[key]\n",
    "    metric_labels +=  [key] * 20\n",
    "    optimizer_labels += ['Adam'] * 10 + ['SGD'] * 10\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Values</th>\n",
       "      <th>Datasets</th>\n",
       "      <th>Optimizer</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>train_1e</td>\n",
       "      <td>Adam</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>train_1e</td>\n",
       "      <td>Adam</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.0</td>\n",
       "      <td>train_1e</td>\n",
       "      <td>Adam</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.0</td>\n",
       "      <td>train_1e</td>\n",
       "      <td>Adam</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.0</td>\n",
       "      <td>train_1e</td>\n",
       "      <td>Adam</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Values  Datasets Optimizer\n",
       "0     0.0  train_1e      Adam\n",
       "1     0.0  train_1e      Adam\n",
       "2     0.0  train_1e      Adam\n",
       "3     0.0  train_1e      Adam\n",
       "4     0.0  train_1e      Adam"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_dict = {'Values' : metric_values,\n",
    "             'Datasets' : metric_labels,\n",
    "             'Optimizer' : optimizer_labels}\n",
    "data_df = pd.DataFrame(data_dict)\n",
    "data_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plotting Results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Comparing Datasets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.swarmplot(x=\"Datasets\", y=\"Values\", hue=\"Optimizer\", data=data_df)\n",
    "plt.title('Sample Accuracy of Adam vs SGD')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Debugging the Increasing Validation Loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2019-05-28 14:14:29 x7 leabratf[24947] INFO Optimizing using Adam_1\n",
      "2019-05-28 14:14:29 x7 leabratf[24947] INFO Using train_uni training set\n",
      "2019-05-28 14:14:29 x7 leabratf[24947] INFO Starting training for model 0.\n",
      "2019-05-28 14:14:29 x7 leabratf[24947] INFO Beginning training using learning rate, 0.0033, Adam_1 training routine, for 500 epochs, on train_uni training set.\n",
      "2019-05-28 14:14:31 x7 leabratf[24947] INFO Completed epoch 0\n",
      "2019-05-28 14:14:35 x7 leabratf[24947] INFO Completed epoch 10\n",
      "2019-05-28 14:14:39 x7 leabratf[24947] INFO Completed epoch 20\n",
      "2019-05-28 14:14:43 x7 leabratf[24947] INFO Completed epoch 30\n",
      "2019-05-28 14:14:47 x7 leabratf[24947] INFO Completed epoch 40\n",
      "2019-05-28 14:14:51 x7 leabratf[24947] INFO Completed epoch 50\n",
      "2019-05-28 14:14:55 x7 leabratf[24947] INFO Completed epoch 60\n",
      "2019-05-28 14:14:58 x7 leabratf[24947] INFO Completed epoch 70\n",
      "2019-05-28 14:15:02 x7 leabratf[24947] INFO Completed epoch 80\n",
      "2019-05-28 14:15:06 x7 leabratf[24947] INFO Completed epoch 90\n",
      "2019-05-28 14:15:10 x7 leabratf[24947] INFO Completed epoch 100\n",
      "2019-05-28 14:15:14 x7 leabratf[24947] INFO Completed epoch 110\n",
      "2019-05-28 14:15:18 x7 leabratf[24947] INFO Completed epoch 120\n",
      "2019-05-28 14:15:22 x7 leabratf[24947] INFO Completed epoch 130\n",
      "2019-05-28 14:15:26 x7 leabratf[24947] INFO Completed epoch 140\n",
      "2019-05-28 14:15:30 x7 leabratf[24947] INFO Completed epoch 150\n",
      "2019-05-28 14:15:33 x7 leabratf[24947] INFO Completed epoch 160\n",
      "2019-05-28 14:15:37 x7 leabratf[24947] INFO Completed epoch 170\n",
      "2019-05-28 14:15:41 x7 leabratf[24947] INFO Completed epoch 180\n",
      "2019-05-28 14:15:45 x7 leabratf[24947] INFO Completed epoch 190\n",
      "2019-05-28 14:15:49 x7 leabratf[24947] INFO Completed epoch 200\n",
      "2019-05-28 14:15:53 x7 leabratf[24947] INFO Completed epoch 210\n",
      "2019-05-28 14:15:56 x7 leabratf[24947] INFO Completed epoch 220\n",
      "2019-05-28 14:16:00 x7 leabratf[24947] INFO Completed epoch 230\n",
      "2019-05-28 14:16:04 x7 leabratf[24947] INFO Completed epoch 240\n",
      "2019-05-28 14:16:08 x7 leabratf[24947] INFO Completed epoch 250\n",
      "2019-05-28 14:16:12 x7 leabratf[24947] INFO Completed epoch 260\n",
      "2019-05-28 14:16:16 x7 leabratf[24947] INFO Completed epoch 270\n",
      "2019-05-28 14:16:20 x7 leabratf[24947] INFO Completed epoch 280\n",
      "2019-05-28 14:16:23 x7 leabratf[24947] INFO Completed epoch 290\n",
      "2019-05-28 14:16:27 x7 leabratf[24947] INFO Completed epoch 300\n",
      "2019-05-28 14:16:31 x7 leabratf[24947] INFO Completed epoch 310\n",
      "2019-05-28 14:16:35 x7 leabratf[24947] INFO Completed epoch 320\n",
      "2019-05-28 14:16:39 x7 leabratf[24947] INFO Completed epoch 330\n",
      "2019-05-28 14:16:43 x7 leabratf[24947] INFO Completed epoch 340\n",
      "2019-05-28 14:16:47 x7 leabratf[24947] INFO Completed epoch 350\n",
      "2019-05-28 14:16:50 x7 leabratf[24947] INFO Completed epoch 360\n",
      "2019-05-28 14:16:54 x7 leabratf[24947] INFO Completed epoch 370\n",
      "2019-05-28 14:16:58 x7 leabratf[24947] INFO Completed epoch 380\n",
      "2019-05-28 14:17:02 x7 leabratf[24947] INFO Completed epoch 390\n",
      "2019-05-28 14:17:06 x7 leabratf[24947] INFO Completed epoch 400\n",
      "2019-05-28 14:17:10 x7 leabratf[24947] INFO Completed epoch 410\n",
      "2019-05-28 14:17:13 x7 leabratf[24947] INFO Completed epoch 420\n",
      "2019-05-28 14:17:17 x7 leabratf[24947] INFO Completed epoch 430\n",
      "2019-05-28 14:17:21 x7 leabratf[24947] INFO Completed epoch 440\n",
      "2019-05-28 14:17:25 x7 leabratf[24947] INFO Completed epoch 450\n",
      "2019-05-28 14:17:29 x7 leabratf[24947] INFO Completed epoch 460\n",
      "2019-05-28 14:17:33 x7 leabratf[24947] INFO Completed epoch 470\n",
      "2019-05-28 14:17:37 x7 leabratf[24947] INFO Completed epoch 480\n",
      "2019-05-28 14:17:40 x7 leabratf[24947] INFO Completed epoch 490\n",
      "2019-05-28 14:17:44 x7 leabratf[24947] INFO Completed epoch 499\n",
      "2019-05-28 14:17:44 x7 leabratf[24947] INFO Elapsed time: 0:03:14.617946\n"
     ]
    }
   ],
   "source": [
    "control_metrics = exp_stats(\n",
    "    epochs=500,\n",
    "    n_models=1,\n",
    "    n_val=10,\n",
    "    lr=0.0033,\n",
    "    optimizer='Adam',\n",
    "    training_sets=['train_uni'],\n",
    "    verbose=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "control_metrics['train_uni'][0][0]['loss']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXMAAAEBCAYAAACKUEVYAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAIABJREFUeJzt3Xl8VOW9+PHPOWdmMlnJQgghCSCrEVAUt4orqKgo0ttbvZfb5d7a+ru1tYu1ra1W69YWu2mvtLbVq23l2l2quOBCtYpKUUDZZCcLCSSZ7MlkZs45z++PSQIhk8ySzCSZ+b5fL1+YmXPO8zwzyXee+Z5n0ZRSCiGEEGOaPtIVEEIIMXQSzIUQIglIMBdCiCQgwVwIIZKABHMhhEgCEsyFECIJSDAXQogkIMFcCCGSgARzIYRIAhLMhRAiCUgwF0KIJCDBXAghkoAEcyGESAKORBTS1NSBbUe/OGNBQRYeT3scajR6SZtTg7Q5NcTaZl3XyMvLjOqchARz21YxBfOec1ONtDk1SJtTQ6LaLGkWIYRIAhLMhRAiCSQkzXIipRRNTfX4/V3AwF9B6up0bNtOXMVGgejbrOFyucnLK0TTtLjVSwgxuo1IMG9vb0HTNIqKStG0gb8cOBw6pplawTzaNitl09zcQHt7C9nZuXGsmRBiNAsbzKurq/nCF77Q+3NbWxvt7e3885//jLlQr7ed/PyiQQO5iIym6WRn59HYeFSCuRApLGwwLy0t5W9/+1vvz/fffz+WZQ2pUNu2MIwR+VKQlAzDgW0P7T0RQoxtUXWN/X4/zz77LB/72MeGXLDkd4ePvJZiKKymGtp/9yW6Xv9f7JajI10dEaOogvn69espKipizpw58arPiPnXf72GAwf2jXQ1hEg4s2IzyttKYN9bdPzxNrzrf4nVeHjA45VtY3c0oVRq3c8a7aLKdfzlL3+JqVdeUJDV5+e6Oh2HI7LPkUiPGw6GEXm94imWOui6TmFhdhxqkxhjue6xGi1trm3Yi7NwMsUr7qRl47O0vreOzn1vkzH7HHLPvRZlm/iPVuCv6/6vvhIV8DF+6U3kzF8cVVmjpc2JlKg2RxzMjx49yqZNm3jggQeiLsTjae8zC8q27YhGbCR6NItl9a3Xrl07ePDBH9HV5cXtTucrX7mV8vI5NDU18t3v3kFTkweAM888my996Wts2/Y+P/3pA9i2wjRNPv3pz3DZZVdEVYdY22zbNvX1bVGfNxoUFmaP2brHarS0WVkm3spdOGdfSJPXAad+lMxZl+Hf/jKd21+mc/fG3mO1tCz0gjIcsy8isPNVWg9X4CuJvA2jpc2JFGubdV3r1wkOJ+Jg/vTTT3PRRReRl5cXdcXC2bCtljc/qO33uKaBGuJM2PNPLWbhvOKozwsEAtx++zf41rfu5KyzzuHdd//J7bd/gz/8YQ0vvfQCEydO5KGHfg5Aa2srAKtX/4brrlvBFVcsRSlFe3tqrUMhxh6r/gCYfoxJ5b2Pae4s0s78KK5Tr8A8tBktPRs9vwwtI7f3/ox5cBPK2zpS1RYhRPx9/umnnx6WG59jRWVlBU6nk7POOgcI9r6dTieVlRXMmTOPTZs2smrVQ2zY8AYZGRkAnHHGmTz55BM88cSj7Ny5g+zs1PtKKYafUipu+WmrZheg4Sie3e85zZWOc9ZCHGWnomfm9bnRrrlzsMdAMLebj+B9+WGU3zvSVYm7iHvm69ati1slFs4L3XseyUlDSqmQo0Q0DebOPZXHH1/Npk0bWbfueZ588gl+8YvHuO66FSxceCGbNm3kwQcf4KyzzuXGG28agdqLZOJ760ms+kNkLv/OsF/bqvkQvaAMzR3dV3otPXtM9MzNii2YB98lMKkc15zo8vtjzcjf7RulpkyZit/vZ/PmdwHYvPldTNOkrGwKNTWHyczM4tJLl3DzzV9l9+4PsW2bysoKSkpKWb78Y3z84//Orl07RrgVYjQyq7fjO3ooomOVUpgH3sWu24/dWjes9VCmH+vo3j4plkhp6eOiCua+zc/Qtu21qMsZKru5BoDAh6+hhpqzHeVk5s5xvvKVL2AYRu/P3/veD/vcAL3vvpU4nU62bHmP3//+SQzDgVI2X//6t9B1nT//+fds3vweTqcDp9PFV7/69RFsjRiNVMCH9+WH8Uw8CeeV3wx7vN1Ug/K2AGBWvo9r7mXDVherbj9YJo6Ygnk2yts24DfYEwV2vIJnu03Gv52C5koPe7zdVo/yezEKJkddt+NZzbWgadieKuz6gxgTpg3peqOZBPNuf/7zsyEf/+UvH+/32NKly1i6dFm/x2+5Jfwfpxjd7K42zH3v4Dz5IjSHa9ivb1ZsgUAXXdW7cfg60NIG34DAOrwdAM2dPfzBvOZD0DSM4llRn6un54DlB9MHTvegxyrbCgZ+FIFdf8d12lVhjrfxvvgQdoeHrBU/RnNlRF0/CH6rsZtrcUw7B7NiM4EPX0vqYC5pFjGmmEf2Etj7VlyubTXV0Pn0PfjeWo15YFNcygjsfQt0Bygb83D4NJx5eCfauCIcM8/DqvkQFegatrpYNbvQx0+NKVhq6TkAEaVaVFcboEDT8X/wIsr0D3q8ue9t7KZq8Hvxb38l6rr1KdfXgTFhGs7p5xDYtzGpb4RKMBdjiv+9NXS99uiw54/N6u10/u3eYE8zLROzatuwXh/A9rZiVW/HOWcxujsTs3LwMpRlYtV8iKNkDo4p88E2I/oAiIQyfVh1+2NKsUBwNAtEGMw7g2minAVLgjNN97w5SL38+N79K/r4qRhlpxLY9lLMH2B2c3C4s55bjLP8YjB9BPZvHPykMUyCuRhT7MYqUDa+zaHTYidSpg/z8M5Be4P+nevxvvAT9KwCMpbfiWPyfMzqbahhXkvf3P9PUDbO2eeTftJpWFUfDDrk0KrbD6YPo2QOxsSZ4EzHqnh/WOpiHdkLtoUx6eSYzj/WMw8/IaYn5591yvnoE6bj3/ocyjZDHhvY+XdUu4e0sz9O2oJrUb52AjvXx1TH44O5XjgNPb+UwIevx3StsUCCuRgz7M4WlLc1mD/euyGi3nnXm7/D+9wDtP/2i3hf+h8Ce99C+TqAYG62663V+N78LUbpXDKW3Y6ePR5H2TzwdWA3HBzW+gf2vYWeX4aRX0bGjDNQ3hZsT9WAx1uHd4Cm4Zh0MpruwFE2FzPMB0CkgvlyA2Ni9PlyCN4ABbC7Iu+ZG1m5pJ1+Dardg7mvfw9Z+Tvxb3kWo2QOjtI5GBOmY5TM6U7N+KKuo91UAw4XWlY+mqbhPPli7PqDWA2Hor7WWCDBXIwZdmMw8KWdtwJ0I2zv3KzdjbnnTRwzF+KcuRCrbj9df/8V7b/9Ep3P/RDv8z8ksP1lnHMvJ33JV3pHWRilcwBtWFMtdstR7LoDOGd+BID0aacH61g5cE/bPLwTvfCk3pukjsnzUZ3N2A2VQ66PWbMLfcJJaGFuXg5EcweDeSRpFru7Z25k5mJMPg09vwz/1rX9PpT877+A8rWTds7Hex9znbEsmJrZFX2P2m6pRR9X3LtvgnPmR8BwxnStsUCCuRgzbE8wiDlK5+Esv2TQ3rmyTHxv/gYtezzuCz6F+4JPk/kfPyHj2jtwnboEu70B68he0s7/FO7zVqDpx/4UdHc2+oSThjWYB/a9DWg4pp8bbENWLvr4qVgDlKH8ndh1B3CUHFuh1CibB2iYlVuHVBfl92LXH4w5Xw4ER/o40yPPmTvd6C43mqbhmr8Uu7kW8+B7vcfYnc34t63DMe1sjPFTex93FM/GKJ6N//3nw944PZHdXIuee2wyopaWiWPa2QT2vY0KRN/TH+0kmIsxw/JUoWXmobmzcM2/CnQD/5bQvXP/tnXYTTW4z/sEmiMNCO7KZBTNIO2c68i87gdkfeYRXKcsCnm+o3Qedt0BVNfQ19dRShHY+zbGpJPRs/KPlTH5VKy6fSHLMGs+BGVjHBfM9fQc9AnTBu3NR8I6sjd47SEEcwjmzSPKmXe2oGWM6/3ZMe1stJyi7t55cCKPf/MzYFmkndV/yRDX6ctQnc2D3jjtV6bpQ7V50PP6zix3ll8MgS7MYbwR6v/w9UGXDE6UlA/mt9xyM2vW/KXPY0opPv7xZWzdunnQc7/4xRvZsOGNkM+df/6ZdHZ2Dls9RTDNoueXAaBn5OIsv5jAnv69c7utAf/mv+GYekZwFEgImqah6QNPs3CUzQMUZvX2ode7/iCq9SjOGR85oYxTQYUuwzq8AxwujKLpfc+ZfBp2/UHszuaY62PW7ALdgVE0I+ZrQPfEoUhy5t4W9PRjwVzTdVzzr8JuqMCq3o7dcpTArtdxll+EPq6o3/lGySlhb5yeyG4+Aqg+PXMAo2gGeu4k/B++FtF1wjEP78T3j8fxbfjdsFxvKFI+mC9duoznn+/bu9uy5T0Mw2D+/DNGqFbiRMoKYDfVYhSU9T7mmr80ZO/c99ZqANLO+4+Yy9MLpwWHKFYPPdUS2PsWGA4c084MXUaIVItVvQOj+GQ0w9nn8Z4PJ6vyg5jrY9XswiiaPuRJUXp6DqozsjTL8T1zAOfMhWiZ+fi3rsW36S9gGLjO6D8RD4IfvGlnLAveON0T2RyD40eynHgtZ/lF2HUHsAa5+RwJZVvB3zVNw6r9EKuhYkjXG6pRMQM0sGcDgd3/6Pe4pmlDXk/BOftCnLMWDvj8hRdezE9+8gMOHjzASScFZ4c999wzXHXVNQC8++4/+fWvf4Hf78OyLD71qc9w6aVLYq7PO++8xS9/+TC2bZObm8fXv/5tSkvLqKw8xP33343P14VlWVx55TWsWPFJ3njjNX7961+g6waWZfLVr36DM844M3xBScZuqgFl9fbM4bje+Y5XcZ1+DXrOBMxDWzArtpB2zvXoWQUxl6fpOo7SuVhV21DKjnnzcWWbmPs34pg8v9/knGAZ83qHKPaUYbd7sFuOkFZ+cb/r6fllaJn5mJXv4zz5wujr4+vA9lTgOj104IyG5s5BHQ2/O5ftbcFIn9v3XMOB67Qrez94Xadfg54x8IbkRtmp6OOn4Nu6FseshWi6MeCx0B3MNQ09p39P3zlzIb6NfwrOCF34ybD1H0hg53rspsO4L7qBrg1P4t/2EumXfC7m6w1VyvfMnU4nl112BS+8EOzddXZ28MYbr3PllVcDMGvWyfz854/y+OP/x4MP/pxVqx7qXb88Wk1Njdx3353ceed9/OY3v+eyy5Zw9913APDXv/6Zj3xkIU8++Qd+97s/cvXV1wLw6KO/5Gtfu40nnvg/nnjiKWbPjm1c8FhnN1YDoJ+wVsfxvXMV8NH11pPoeaU45w192rujbB7K2zro8MFwrOqdqK42HDPPC13G5FNRXW3Yx/XqrMM7gZ5RNX1pmoZj8qmY1dtRViD6+tTuAaWGnC8H0DJyUF1tg47HV6Yf/N5+PXMA58kXormz0dKywk7x1zQtmDtvrYso320316JlF4b89qG5s3BMOzM4TDXGG6G2txXfu08Hh1HOOh/n7Asw978zpPTXUI2Knrlz1sKQvedELYG7dOm13Hrrzdx44xd49dWXOfXU0ygsnABAc3MT3//+PVRXV2IYDlpbW6isrGDu3HlRl7Njx3amT5/V+w3gqquW8eMfr6Szs4P5809n1aqHsCyT+fMX9Pa+Fyw4k4cf/imXXHIp5557HtOmDS3POVZZnkowHP1yqsf3zpUZQLV7cC+7fdB8eKSM0mBv0qzahjF+SkzXCOx7C9Iyg/nxAcvQMCs/wCg8KVje4R1o6TnoeaUhz3FMnk9g12tYtbtxlM4NecxAzJpdYDj75eJjoblzQCmUr713EtGJeka7hHpec6ThvvxLaBDR4luOqaej55Xi3/oczgE+HHucOJLlRK5TFmPuewfviz8h/bKbo14C2P/uXyHQRdp5K4IfNPMuJ7DjVQI7Xg15EzcRUr5nDjBz5iwKCsazcePbPP/8M30W0frxj3/A6acv4Le//QNPPPF/FBYW4ffHOqxJMdACcxdfvJhf/OIxSkpKefLJJ7j33jsB+NKXvsZtt92Jw+HkO9+5jWeeeTrGssc2u7EKPa805Ndr12lXga5j7n8H5+wLcEycOSxl6hm56AVTsGLMm6tAF+ahzTinnYVmhP5w0dNz0AtPwqwK5sCVUliHd2KUzBlwNUKjpBwMZ0yjWqzaXRgTZ/bLxcciklmgPbM/9RA9cwDHxJnB2a2RlKfpOMsvxm46POiEMWXbwTHmgwRzY+JM3Is/j3V0P53PfA+7rSGiOgBYDRXBG7ZzFmPklQCg50zAMWV+cAZrlEMoh4sE825Lly7jf//3V1RVVXL++Rf1Pt7W1kZxcTGaprFp0zscPhz7V+45c05l3749VFQcAuCFF9Yyc+ZsMjIyqa6uIj+/gKuvXsZ//dfn2LkzuAZHZeUhpk+fwXXX/TuXX34lu3btHFI7xyKlFLanqs/Nz+PpmXm45l2BlpmP65zrhrVsR9k8rCP7UP7oRyaZhzaD6R8wxXJ8GXbdAeyuNuzGapS3FUfJKQMerznSMCaVY1ZsjeqekupqD76OxcOTquuZBTrYiBa7e/anlj5wPjwaju7Uk1k98Bo1qr0BLHPQYA7gnH4O6Uu/jt3ZTOeaeyOaGaqUwvfW6uDWeguW973evCXB5QfitBBcOKMizTIaXHbZlaxa9TOuvfZfcDqP9Vo+//kv8uMfr+TJJ3/D9OkzmD498l7fihUf6+1dud1unnrqr9xxxz3cffftWJZFbm4ed955LwDr17/MSy+9iMsVLPvLX/4aAL/4xcO9KZ6srCy+9a07h6vJY4bytqC62vrly4+Xdva/4lqwfMAecKyMsnmwdS3m4Z04T4ruxnNg71toWQVhhwA6Jp+Gf/PfsKq3H5v6XtI/X97nnCnz8VV9gN1ci5E3KWxdlLLxdY/6GcpkoeNFsnJiT3tC5cxjKnPcRLTM/ODQzVMuCXlMz0gWIzf86+Ionk3GtbfjfeEndD7zfdIv+8KAKTEAc/9GrCN7SLvgP/stX2wUz0YvmEJg20vBJZQjWOd9OEkw75aTk8P69Rv6PX7WWefy+9+HTm08/PCvBrzem2++G/Lxc889j3PP7d9T+9SnPsOnPvWZfvcJvv/9H4WretLrmfmp54fOIfcY7kAOBHPLznSsqm1RBXP/zr9jVW/HdeZHw46E0Qundq9X/gHK1x5cGOq4yUWhOCafhg+wKt8PG8xVwEfX33+Feeg9nCdfiD7E8eU9Igrm3p6e+fDsh6tpGo7SOQQObUbZdp+Zuz16dhcK1zPvYeSVkHHtHXhf/CneFx8k7YJP4zr5on7HqYAP38Y/oBdMwTm7/0iintx512u/xqreNuiHQjxE9Nvv8/n43ve+x9tvv01aWhrz58/n3nvvjXfdhADoHQ881F1nYqHpDhwlp2BWbYt4Vx3z0BZ8G36LUXZqcLRNuDI0HaNnGKTlxzn7grDn6FkF6PllBA5swnnKJQOusWK3N+J96SHshkrSzv13nPMuH7Yeo5aWCZoWtmeuubOH5YZ0D6NkDoHdb2A3HAq52YTdXBssM4qbmnpmHhnXfAvvK6vw/eNx/Bv/FPxQzZ3Y/W9xcPXNjibci28K+SEC4Jh+Dto//4R/20ujM5j/8Ic/JC0tjXXr1qFpGg0Nkd8sEGKobE8VWmZ+2F154sUom4d56D3s5preG14DsY7uw/vqL9DHTyX90i9EHMQck0/D3Pd28P9LIhuh4py1EN87v6f9ya8ER4SdsqhP/ay6A3hf+hkq0EX6FV/GMTn0bNhYaZqO5s4OewNUSx+eFEsPo/t+gnl4xwDB/Ah6BKmnE2mudNKv+AqBD/+B3VCJ3VKLWfk+avexWd6OGecOeoNdMxw45yzGv+kvwSn+hYkbShz2N62jo4M1a9bw+uuv936ijx8/fsgFR9rLEeGNhY1qzcqt6PllMU3ksRur0Ae4+ZkIjrJ5wZRG1QeDBnO7+QjeFx9Ey8wl/YqvojnTIi+jdC7BoU4axqTZEZ3jnLcEo2gG/h2vEtj1OoEdr2IUn4xzzmKwLbpefwwtYxwZV92BESZFFSstPSfsDdDhypf30NNz0AvKguPxT7+mf5lNNTiivL/RQ9Md/dbrUb4O7OZa7LaG7mUeBucqvwT/5mcJbF8HCZwXEjaYV1VVkZuby8MPP8zGjRvJzMzky1/+MmeeGfssxJ7ZjA7H0IdHCbAsEz3MjLiRZB7eiffFB9ELp5Gx/DtRfYgr04/dXItryulxrOHg9KwC9LwSzKrtuE69MuQxdmcznS/8GDSNjCu/FtwjMwqaOwtj4mzQtIi3cdM0DaNoBulFM7A/8u8Edv+DwM6/0/XKKgCMopm4L7856rpEVe/0HOxBc+at6DkThr1co2QOge2voExf70JqENzDtee+w3DR0jIximZEvJaN5s7COWth3LYeHEjYYG6aJlVVVZxyyil885vf5P333+e///u/efnll8nKiiwnVVDQ9zilCmhrayEvb3zYm0MOR+qNnoymzUrZtLS0UFhYQGHh8NxkGk62v4vqPz6B5kzDrj9AZuNOMk8+t99xA9XdV3uAdmWTe9IsskawffqsBbS8+zwF45zorr75advnpeaZn0FXK8X/cTfuksj+6E9ss7Xi2wAY7ljSSdkw+d9Ri6+jc/8WAvVVjDv7arQ4d5iO5ubjq9kX8v1TStHubSFzfCEF3c8P1+9o55yzOPLBi2R1VpEx/dgHvbeyig4gb+p0Mkbw98W+5nP464LLfiTq7zJsMJ80aRIOh4Orrw5Obz/ttNPIy8vj4MGDzJsX2SxIj6cd2z4+FeDGNNs4fLgSGDhFoOs69jBv3TXaRd9mDZfLDbiprw+/HGmidb21GrO5jvSrv4nvzd9R/+qTdOSd3GfyT2Fh9oB1D+z/EIAOZyHeEWyfWTAbrGeoePjzwdy9Mx3N5UZzpmO3NWA3VpG+5Eu0uSbSFkE9B2szbUNsZ+5syJ1NQ1MXMHwbQIfi19Ix25tDtkX5vSjTTxfp1Ne3Dd7mKKn0UtAdeHa+S0fOsQ9P/6H9ALRp4+gY6b8H10TcEFObdV3r1wkOJ2wwz8/P55xzzmHDhg2cf/75HDx4EI/Hw5QpsU1vhuDXw/z88F+9hvPNHyuSqc3mkb0Etr+C85TFOCaVo876GF0v/w+BPW+GHPoViuWpAsOFFmLBpEQyJp2Ma8FyVHsjKtCFCniDwaqzFWUHcF90w7DfYBwLtPQcCHShTH+/dVB6x5gP8w1Q6J44NXEm1gmTh+zm2uDvyxAWWRurIrrVfvfdd/Ptb3+blStX4nA4eOCBB8jJiV8eTox9yvQHb8Bl5ZN29r8C4Jh6RnBd6vfW4JzxkYiWYA2uYV464FCwRNF0o9+MP3HcWPOutn4B1PbGL5hDMG/u3/Rn7M6W3uUCgmuyTIx5lcuxLKJgXlZWxu9+N/KLr4uxw//eGlTLEdKvurV3ESVN00g7++N41/6AwI5Xwq6Up5TC8lTiPGlBIqosYqAfP3HohGA+3LM/T+QoDQZzq2YnevfGH3Zzbcjhiqkg9T6+RNxZdQfwf/ACztkX9lvVzzHpZIyyefi2PofydQx6HdXRBL4O9PzETxYSkRlsFmjv7M84BXO9YEr3BiLBVIsy/ai2hmEdyTKWSDAXw0pZJl2v/y9a+jjSzr0+5DFpZ/0r+Drwv//CoNeyG4MzP0dyjLkYnOYeJJh3toBmxG2yl6brOCaVYx3eGVyMraVnq7joJwwlAwnmYlj5tzyL3VSNO8RCRD2M8VNwzDgX/7aXsDuaBrzWsWn8EsxHq56euR1iFmhwwlBOXPPXRulcVEcjdkvtgFvFpQoJ5mLY2N5W/FvXBqc8D7CRco+0M/8FbCu4K/tA1/NUomUVRDyJRiSe5kwDhyvkLNB4TOU/Uc9SwVb1ju5groXcFDoVSDAXw8bcvxFsC9f8/lOsT6TnTAjuEPTh6wQaa0IeYzdWjcjiWiI6WnrOgDnzeOXLe+g5E9CyC7EO78RuqkHLHj/kjarHKgnmYtgE9r6NXlCGkT/4YlQ9XGcsA8PJkT8/gFV3oM9zyvRjtxyRfPkYoLkHCOadLehx7plDcFSLWbMLu6k6ZVMsIMFcDBO75Qh2/QGcMwbfVed4esY40i/7Ara3g84199L11mqU3xu8XtNhUAo9X4L5aKel9185USkb5W2Ne88cujfyCHRhN9XEtFpispBgLoZFYO/bgIZjRv91VwbjKDuVsv/3IM5TFhHY/godf7ods2JLcANn5ObnWKCn5/QOQ+yhutpB2XHPmUPPzknBxdtSuWcuOw2JIVNKEdj3Dsakk9Ez86I+X3dn4j7/kzhnfoSufzyOd91DaO5scKShxWHFPTG8gjnztj7LWh8bYx7/meKaOwu9cCp2/cGUDubSMxdDZtcfQLUexdk9Cy9WRtEMMv7lblxnfQwV8GIUnpSS07LHGs2dA8qC4za9jue6LKH0rAcfyb6fyUp65mLIAnvfBsOBY1rsa9z30AwHaadfg3PW+SCBfEzo2d9TeVt75xb0BHM9ATlzANdpV2GUzIlqq7hkI38tYkiUbWLu34hj8vxhHQ+uZ+YlLBCIoTk2cejYiBYV50W2+tXBlY5jUuJ29RmNJJiLIbGqd6K62nDMHFqKRYxdPQH7+OGJdmcLOFwwwEbTYvhJMBdDEtj3NqRlJnwncjF69KZZuo4NT1TeVrT0cbLPbwJJMBcDUl3teNf/EquhIvTzgS7MQ+/hPOksNEP2c01VmvtYzrxHImZ/ir4kmIsBmZXvY+57m85nf4BZu7v/84c2g+mXFEuK03QDLS2rbzBP0OxPcYwEczEgq+EQGC70zFy8z/8Is3Jrn+cD+95GyyrAmDhzZCooRo0T12dRndIzTzQJ5inEPLSF9j/chjJ9ER1vN1Sgj59M+jXfQs8rwbvuf4I5coIjF6zqHThnnCtjwUVwSn93zlxZJsrXLsE8weSvMIWY1dtQLUew6g+FPVbZNlZDBcb4KejpOWRc/U2MiTPoWv8r/DteCa6QqGwcUazFIpLX8T3znn8TNSxRBEU0aWjRokW4XC7S0tIAuPXWW7ngggviWjEx/OzGagCso/s23d//AAAaLElEQVRxFM8e/NiWI2D6MMZPBYLjeNOv/Bpdr/4C34YnwZUR1QqJIrlp7pzeceY9Y8wlZ55YEc8A/dnPfsasWbPiWRcRR0oprO5t2Oy6/WGPtxsOAaAXTu19THO4cF/2Rbpe/1/MvRtwzgi/brlIDVp6Dvg6gimWOG/kLEKT6fwpQnU0gt8LugPr6L4+iyKFYjVUgOHst5+iphu4L74Ba+Z5GJMG792L1HH8WHM7zhs5i9AiDua33norSikWLFjALbfcQk5O/FdDE8OnZ3Nkx0lnYu5/B9XRiJZVMPDxDYfQC8rQdKPfc5qm4yidE7e6irGnZ0q/8rYet8iWxIhEiiiYr169muLiYvx+P/fffz/33HMPP/rRjyIupKAg9sVvCguzYz53rIpHm5v21OMFCs+9gtr975DpPUzWSVNDHquUzSFPJdnzLmJ8gl5/eZ/Htq6uidQAOWkmnXgx3VlMmJjf77hkanOkEtXmiIJ5cXFwjWCXy8WKFSv4/Oc/H1UhHk87tq2irlxhYTb19f13/U5m8Wqzt2o/WlYBbe5SMJw07duBtzD0FHy7uRbl9+LPnJSQ11/e57HP7gqGkuYjRzE99eDO6de+ZGtzJGJts65rUXeCww5N7OzspK2te/yoUjz//POUl5dHXTkxsuzGavT8UjTDgTF+KtYgN0GtEDc/hRhMzyYUytuasO3iRF9he+Yej4ebb74Zy7KwbZvp06dz1113JaJuYpgoy8RursU1ZT4AetF0AjteQVkmmtH/V8CqPwSGI6X3UxRRcqaD7kB5W7E7WzAKTxrpGqWcsMG8rKyMNWvWJKIuIk7s5lpQFnp+KQDGhOkEPngR21OJMWFa/+MbDqHnT0bTZbCTiIymaWjpOdjeNllka4TIDNAU0DOSpWene2PCdICQqRalumd+SopFRElLz0a11UGgS2Z/jgAJ5inAbqwG3YGeWwSAnpWPlpkXOpi3Bv8Y9fFTEl1NMcZp6TlY3bOM9QRs5Cz6kmCeAqzGavS84j5pE2PCdKyj/YN5z7otPdP4hYiU5g7OAgVZl2UkSFJ0FFKmD9XeiN3eiOoI/msUz8IxKbZRRHZjNcYJa7EYE6ZjHnwX29uKftzkjuCytw50WXNFRKlnFijI7M+RIMF8lLCbj+Db+AcO1e3F9rb3P0B3kHHt7VGPElC+DlRHI0ZBWd/Ldd/4tOv2o085/Vg9GirQ88vk5qeI2vGdAumZJ578xY4wFfDh3/Is/g9eAIeL7Dnn43PkoGfmo2UVoGflg8NF55p78b6yisx/uRstLTPi6/fmMLtHsvQwCqeCpgdXUOwO5koprIZDOKefM2ztE6mjd/q+pvVuJScSR4L5CFFKYR58F9/bT6E6GnHMOp+0sz9O4ZTSkDPG0i+9ic5nvkfXa4/ivvxLEW+Ue+JIlh6aIw29oKzPTVDVWgd+L7rky0UMNHdO77+aLrfjEk2C+QiwW47QteFJrOrt6AVluBd/HkeYrdeMCdNJO/ff8L21msAHL+A67arIyvJUQ1omWkZuyGsG9r6Fsm00Xe+d+SnDEkUsenrmki8fGRLMR0Dncz9E+TpJO+8/cJ6yKOTKhKE451yKVbsb3z//jF40A8fE8OvLW03VGPmlIXvyxoTpBHaux24+jJFfFhzJojvQ80r7X0iIMHpugEowHxnyXSjBlK8D1e4h7YxluOZeFnEgh+AsO/dFn0HLLqTrlZ/37uwyYFnK7l2TJRSjqHvyUPcQxeDMz9KQU/yFCKcnTy43P0eGBPMEs9saANCyx8d0vubKIP2yL6B87XSt/yXKtgc8VrV5ghOATsiX914rpwjSMrHrDnTf/KyQ8eUiZprDhT5+iqzLMkIkmCdYTzDXcwpjvoZRMJm0hZ/EOrwD/5ZnBy6reySLMUDPXNO04OShuv2otnrwd8pKiWJIMv/lblxzFo90NVKSBPMEUz3BPCu2nnkP5+wLccw4F/+WZ7DbPSGP6dnzU88beAKQUTQdu6kGs2ZX8GfpmQsxJkkwTzC7rR6cbohirHgomqaRdvbHAQ3/5mdCl9VYjZZdiOZKH/A6wUW3FIGdfwfdkJmfQoxREswTzG5rQM8ujHic+GD0rAKcJ19EYPeb2K11/ctqrB4wxdIjuASudtzNT+eQ6yWESDwJ5gmm2hrQY7z5GYrr9KtB1/Cd0DtXph+75ciAI1l6aK4M9NzgtoCSYhFi7JJgnkBKKez2hphHsoSiZ+bhLF+EuXcDdsuR3seDG1LYA45k6XON7vXNZdlbIcYuCeYJpHztwaGCwxjMAVzzl4LuxPfe33of6xnJoheEnwBkTJwR/DfErkNCiLFBZockkOodYx77sMRQ9IxxOOcsJvDBi1inX4ORNyk4ksVwoOcUhT3fOXMhekaupFmEGMOi6pk//PDDzJ49mz179sSrPkmtd4z5MPfMAVzzrwJnGv73gvu12o3V6LklEc0w1QwHjsmnDXudhBCJE3Ew37FjB1u3bmXSJNmx/Xh2eyPtq2/BrN0d9ljVVg/EJ5jr7mxccy7FPPBPrMaqYDCPIMUihEgOEQVzv9/PPffcw1133TUsQ+qSSWDnelRHI9bhnWGPtdsagisYujLiUhfXqVeAMx3fhtWozuawwxKFEMkjomD+0EMPsWzZMsrKwo+MSCXK9BP48HUA7KbDYY+32xqGPPNzMJo7C9e8y7FqPwT6r2EuhEheYW+AbtmyhW3btnHrrbfGXEhBQVbM5xYWjt4dS9reX097VxtGVj5aa03YulZ5G3GOLwl73FDabF/yMSp3voLd1UHhzJNxZI3e1+94o/l9jhdpc2pIVJvDBvNNmzZx4MABFi8OLp5z5MgRbrjhBr7//e9z/vnnR1SIx9OObauoK1dYmB1y153RQClF5ztr0fMmYUxdgH/rc9TVetAcrgGPDzTVQfGcQds0HG12nvkxzAObaOw00Lyj8/U73mh+n+NF2pwaYm2zrmtRd4LDBvMbb7yRG2+8sffnRYsW8cgjjzBrVviNEZKZfXQfdkMFaed/KpgDVzZ2yxGMgskhj1feVrD86MM8LDEU1ymLcJ2yKO7lCCFGD5k0FCP/jlfAlY5z5nm9U+YHy5ur9vgNSxRCiKgnDa1fvz4e9RhT7I4mzAPv4pyzGM3pRh83ETQDu3HgYG63BoclDudUfiGE6CE98xgEdr0Gyu5dhF8zHOi5RYP2zG3pmQsh4kiCeZSUZRLY9RpG2Tz0ccemyut5JViDpVlaG9Dc2WhOdyKqKYRIMRLMo2Qe3ITytuCae2mfx/W8ElRrPcr0hTxvuFdLFEKI40kwj5J/+yto44owSuf2eTy4NZvCbqoNeZ7dVi8pFiFE3Egwj4JVfxC7bj+uOZeiaX1fup7t1kLlzZWyUW2ehAxLFEKkJgnmUfBvfwUcaThnLez3nJ5TBLoDq3sd8eOpzhawTUmzCCHiRoJ5hKzGKsz9G3HOWhhyoSxNN9Bzi0P2zHuXvo3juixCiNQmm1OEoWwT/9bn8W/+G5orI7gy4QD0vBKso3v7X6N76VstR4K5ECI+UjaYK2WjOprQMvMHXNbX8lTR9dqj2J4KHNPOJm3hJ9DTcwa8pp43CXP/Oyi/F82V3vu49MyFEPGWssHc984fCGxbh5Y+DmNSOcakk3FMKkfLmQC2hX/rWvybn0VzZ+K+7Is4Tzoz7DV7p/U312B0b5IMwe3itPRxAy7CJYQQQ5WSwdys3Epg2zocUxeAw4l1eBfm/nfwAVpmPjhcqJYjOGaci/u8T6C5I1u9zMjrHtHSeLhPMLfb6uXmpxAirlIumNudzXS99hh6QRnuRf8PzeFCKYXdUot1eBdWzS7sdg9pl38J59Qzorq2ll0Ihgur6TDO48tsa+gT3IUQYrilVDBXyqbr779CmT7SF3++N+2haRpG7iSM3EnQvd5KLDRdR8/rO6JF2TaqvRF9+jlDrr8QQgwkpYYm+t9/AevwTtLO+49g4I4DPa8E+7ix5qqzCZQlaRYhRFylTDC36vbj3/RXHNPOwjn7wriVo+eVojqbUb4O4LiRLBLMhRBxlBLBXPk78b76CFpmLu4L/nPAoYjDwcgP9vitpppg2d1jzCWYCyHiKemDuVKKrjd+i2r3kL7ov9HSMuNant47oiWYagn2zDW0rIK4liuESG1JH8zNA5sw97+Da8FyjIkz416ellUATnfvTVC7rR4tMxfNcIY5UwghYpf8wbxiM1pmHq75VyekPE3T0XMn9QZz1dYgqyUKIeIuoqGJN910E9XV1ei6TkZGBt/5zncoLy+Pd92Ghe2pRC+YgqYn7nNLzyvBqno/WH5bA8bEWQkrWwiRmiIK5itXriQ7OxuAV155hW9/+9s8/fTTca3YcFCmH7v5CK6pCxJarpFfgrnnDezOZlRHo9z8FELEXUTd1Z5ADtDe3h7X0SDDyW6qAWWjF0xOaLk9N0Gtqm2glKRZhBBxF/EM0Ntvv50NGzaglOLRRx+NZ52GjeWpAMBIdDDvXnDLrAymWmTCkBAi3jSllIrmhDVr1vDcc8/x61//Ol51GjYN6x6j7YP1TL31d/22eYsnpRQVP/5UcJldfxdlX/g5ztyihJUvhEg9Ua/Nsnz5cu68806amprIy8uL6ByPpx3bjuozA4DCwmzq69uiPq9H5+H9aHmlNDR0xHyNmOVOQh3dB5pGk8+FFmE7htrmsUjanBqkzZHTdY2CgshWa+09J9wBHR0d1NYe23F+/fr1jBs3jtzc3KgrmEhKKSxPZcJTLD2MvGCqRcvMR9NTaj0zIcQICBtlvF4vX/7yl/F6vei6zrhx43jkkUdG/U1Q1d4Afi96ftmIlK/nB2+CykgWIUQihA3m48eP549//GMi6jKsLE8VAEbBCAXz7hEtcvNTCJEISTsD1PZUAdrI9cy7g7meM2FEyhdCpJakTebankq0cUVozrQRKV/PGEf65V9GL5IdhoQQ8Ze0wdzyVGIUTh3ROjimnj6i5QshUkdSplmU34tqqx+xFIsQQiRaUgZzq7H75uf4kRmWKIQQiZaUwdz2VAKg50swF0KkhiQN5lWQlomWGdkMVSGEGOuSMpj3zPwc7RObhBBiuCRdMFe2jd14OOHL3gohxEhKumButx4Byz9iMz+FEGIkjLlg3vX2U3hfe2zA5+2GnpufEsyFEKljTAVzZZsEPnwdc88bWHUHQh5jN1aBbvROpxdCiFQwpoK5dXQ/BLoA8L23JvQxnir03EloRtJObhVCiH7GVjCv3g6ajuu0q7CqPgjZO7c9leiSLxdCpJgxFczN6u3oE6bhOv0atLSsfr1z29uK6myWm59CiJQzZoK53dWGXX8IR+k8NFc6ztOu6Nc7t7vXMNcLpoxUNYUQYkSMmWBuVe8AFI6yuQC4Tlncr3feO41feuZCiBQzZoK5Wb0N0jLRx58EELJ3bnkq0TJy0d3ZI1lVIYRIuDERzJVSWNU7cJTMQdOPVfnE3rndWCUzP4UQKWlMBHO7sRrV2YyjdG6fx4/vnZu1u7GbajEkmAshUlDYwdhNTU184xvfoLKyEpfLxZQpU7jnnnvIz89PRP2A7iGJgHFCMIdg7zzw/ot0vf4YKEvy5UKIlBS2Z65pGp/97GdZt24dzz77LGVlZfzoRz9KRN16mdXb0fNK0LP6f4D09M5Vax0gNz+FEKkpbDDPzc3lnHPO6f15/vz51NTUxLVSx1OmD+vI7pC98h49uXMMF3rOxITVTQghRouo5rzbts1TTz3FokWLoiqkoCArquOPl9VRSbtlUjD3bDIKBxqlkk370v/GbDpCbtG4mMsaLQoHbGfykjanBmlz/EQVzO+9914yMjL4xCc+EVUhHk87tq2iOgeCL4Jnxz/BcNKeXkZHfdvAB4+fC+PnUj/YMWNAYWH2mG9DtKTNqUHaHDld16LuBEcczFeuXElFRQWPPPIIup64QTBW9XaM4tloDlfCyhRCiLEmoqj805/+lO3bt7Nq1SpcrsQFVbOlHru5FkfpvISVKYQQY1HYnvnevXt55JFHmDp1Kv/2b/8GQGlpKatWrYp75ToPbAXAKBv45qcQQogIgvnMmTPZvXt3IurSj/fAVrTMfPTcSSNSvhBCjBWjdgaosi28Bz/AUToHTdNGujpCCDGqjdpgbtcdwPZ1Yki+XAghwhq1wdzs3lXIUXLKSFdFCCFGvVEbzK0je0grno7mjn3CkRBCpIpRu+uxa/5S8idOoHWkKyKEEGPAqO2ZO0rnklY8faSrIYQQY8KoDeZCCCEiJ8FcCCGSgARzIYRIAhLMhRAiCUgwF0KIJCDBXAghkoAEcyGESAISzIUQIglIMBdCiCQgwVwIIZKABHMhhEgCEsyFECIJSDAXQogkEDaYr1y5kkWLFjF79mz27NmTiDoJIYSIUthgvnjxYlavXk1JSUki6iOEECIGYTenOPPMMxNRDyGEEEOQkJ2GCgpi3/qtsDB7GGsyNkibU4O0OTUkqs0JCeYeTzu2raI+r7Awm/r6tjjUaPSSNqcGaXNqiLXNuq5F3QmW0SxCCJEEJJgLIUQSCBvM77vvPi688EKOHDnCf/3Xf7F06dJE1EsIIUQUwubM77jjDu64445E1EUIIUSMJM0ihBBJQIK5EEIkAQnmQgiRBCSYCyFEEpBgLoQQSUCCuRBCJAEJ5kIIkQQkmAshRBKQYC6EEElAgrkQQiQBCeZCCJEEJJgLIUQSkGAuhBBJQIK5EEIkAQnmQgiRBCSYCyFEEpBgLoQQSUCCuRBCJAEJ5kIIkQQiCuYHDx7k+uuvZ8mSJVx//fUcOnQoztUSQggRjYiC+V133cWKFStYt24dK1as4M4774x3vfi/l/fwh5d3x70cIYRIBo5wB3g8Hnbu3Mnjjz8OwNVXX829995LY2Mj+fn5catYl9/iL3/fS5qhoWsamgZooNH9/0kq53Arra3eka5GQkmbU0O826yNssAwITedwsLshJUXNpjX1tZSVFSEYRgAGIbBhAkTqK2tjTiYFxRkRV2x5ZfM4M1ttTz23K6ozxVCiJGWn+PmN/MmJSyghw3mw8Hjace2VVTn5Gc4+e1dS6g50oJSoAClVO//J6v8vAwamzpHuhoJJW1ODXFtsxp9UWFcVhoA9fVtUZ+r61rUneCwwby4uJijR49iWRaGYWBZFnV1dRQXF0ddwWjl5bgxfYG4lzOaFBZmk26Mrq+L8SZtTg2p2OZECnsDtKCggPLyctauXQvA2rVrKS8vj2u+XAghRHQiSrN897vf5bbbbuPnP/85OTk5rFy5Mt71EkIIEYWIgvn06dP505/+FO+6CCGEiJHMABVCiCQgwVwIIZKABHMhhEgCCRlnruuxD0cayrljlbQ5NUibU0MsbY7lHE2pUTjaXgghRFQkzSKEEElAgrkQQiQBCeZCCJEEJJgLIUQSkGAuhBBJQIK5EEIkAQnmQgiRBCSYCyFEEpBgLoQQSWBUBvODBw9y/fXXs2TJEq6//noOHTo00lUaFitXrmTRokXMnj2bPXv29D4+WHvH8mvR1NTE5z73OZYsWcI111zDF7/4RRobGwHYunUry5YtY8mSJXzmM5/B4/H0njfYc2PBTTfdxLJly1i+fDkrVqxg167gPrbJ+j4f7+GHH+7z+53M7/OiRYu44ooruPbaa7n22mt54403gBFssxqFPvnJT6o1a9YopZRas2aN+uQnPznCNRoemzZtUjU1NeqSSy5Ru3fv7n18sPaO5deiqalJvfPOO70//+AHP1Df+ta3lG3b6tJLL1WbNm1SSim1atUqddtttyml1KDPjRWtra29///yyy+r5cuXK6WS933usX37dnXDDTeoiy++WO3evTvp3+cT/46VGrxd8W7zqAvmDQ0NasGCBco0TaWUUqZpqgULFiiPxzPCNRs+x/8SDNbeZHstXnzxRfXpT39avf/++2rp0qW9j3s8HjV//nyllBr0ubHo6aefVh/96EeT/n32+XzquuuuU5WVlb2/38n+PocK5iPZ5oSsmhiN2tpaioqKMAwDAMMwmDBhArW1tUm57+hg7VVKJc1rYds2Tz31FIsWLaK2tpZJkyb1Ppefn49t2zQ3Nw/6XG5u7khUPSa33347GzZsQCnFo48+mvTv80MPPcSyZcsoKyvrfSwV3udbb70VpRQLFizglltuGdE2j8qcuUg+9957LxkZGXziE58Y6aokxP33389rr73GV7/6VR544IGRrk5cbdmyhW3btrFixYqRrkpCrV69mmeeeYa//OUvKKW45557RrQ+oy6YFxcXc/ToUSzLAsCyLOrq6iguLh7hmsXHYO1Nltdi5cqVVFRU8OCDD6LrOsXFxdTU1PQ+39jYiKZp5ObmDvrcWLR8+XI2btzIxIkTk/Z93rRpEwcOHGDx4sUsWrSII0eOcMMNN1BRUZHU73PP++NyuVixYgWbN28e0d/tURfMCwoKKC8vZ+3atQCsXbuW8vLyMfN1M1qDtTcZXouf/vSnbN++nVWrVuFyuQCYO3cuXV1dvPvuuwD8/ve/58orrwz73FjQ0dFBbW1t78/r169n3LhxSf0+33jjjbz55pusX7+e9evXM3HiRB577DE++9nPJu373NnZSVtbGwBKKZ5//nnKy8tH9Hd7VG5OsX//fm677TZaW1vJyclh5cqVTJs2baSrNWT33XcfL730Eg0NDeTl5ZGbm8tzzz03aHvH8muxd+9err76aqZOnYrb7QagtLSUVatWsXnzZu666y58Ph8lJSX88Ic/ZPz48QCDPjfaNTQ0cNNNN+H1etF1nXHjxvHNb36TOXPmJO37fKJFixbxyCOPMGvWrKR9n6uqqrj55puxLAvbtpk+fTp33HEHEyZMGLE2j8pgLoQQIjqjLs0ihBAiehLMhRAiCUgwF0KIJCDBXAghkoAEcyGESAISzIUQIglIMBdCiCQgwVwIIZLA/weSWS56OgkFQAAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(control_metrics['train_uni'][0][0]['loss'], label='Loss')\n",
    "plt.plot(control_metrics['train_uni'][1][0]['epoch'],\n",
    "         control_metrics['train_uni'][1][0]['loss'], label='Val Loss')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1, 4, 5, 5)\n",
      "(500, 4, 5, 5)\n"
     ]
    }
   ],
   "source": [
    "training_set_name = 'train_uni'\n",
    "with tf.Session() as sess:\n",
    "    sess.run(init_ops)\n",
    "    # Define training and validation handlers\n",
    "    handles = pdict({name : sess.run(iterators[name].string_handle())\n",
    "                    for name in iterators.keys()})\n",
    "    x_train, y_train = sess.run([x,y], feed_dict={\n",
    "        alpha_ph: 0.001, handler: handles[training_set_name]})\n",
    "    print(x_train.shape)\n",
    "    x_test, y_test = sess.run([x,y], feed_dict={\n",
    "        alpha_ph: 0.001, handler: handles.test})\n",
    "    print(x_test.shape)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 8 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 8 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cgh.heatmap(y_train[0].reshape(1, *y_train[0].shape), \n",
    "            x_train[0].reshape(1, *x_train[0].shape))\n",
    "plt.show()\n",
    "cgh.heatmap(y_test[0].reshape(1, *y_test[0].shape),\n",
    "            x_test[0].reshape(1, *x_test[0].shape))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2019-05-28 15:33:48 x7 leabratf[24947] INFO Optimizing using Adam\n",
      "2019-05-28 15:33:48 x7 leabratf[24947] INFO Using train_uni training set\n",
      "2019-05-28 15:33:48 x7 leabratf[24947] INFO Starting training for model 0.\n",
      "2019-05-28 15:33:48 x7 leabratf[24947] INFO Beginning training using learning rate, 0.0033, Adam training routine, for 100 epochs, on train_uni training set. Testing using test dataset.\n",
      "2019-05-28 15:33:49 x7 leabratf[24947] INFO Completed epoch 0\n",
      "2019-05-28 15:33:51 x7 leabratf[24947] INFO Completed epoch 10\n",
      "2019-05-28 15:33:53 x7 leabratf[24947] INFO Completed epoch 20\n",
      "2019-05-28 15:33:55 x7 leabratf[24947] INFO Completed epoch 30\n",
      "2019-05-28 15:33:57 x7 leabratf[24947] INFO Completed epoch 40\n",
      "2019-05-28 15:33:59 x7 leabratf[24947] INFO Completed epoch 50\n",
      "2019-05-28 15:34:01 x7 leabratf[24947] INFO Completed epoch 60\n",
      "2019-05-28 15:34:03 x7 leabratf[24947] INFO Completed epoch 70\n",
      "2019-05-28 15:34:05 x7 leabratf[24947] INFO Completed epoch 80\n",
      "2019-05-28 15:34:07 x7 leabratf[24947] INFO Completed epoch 90\n",
      "2019-05-28 15:34:09 x7 leabratf[24947] INFO Completed epoch 99\n",
      "2019-05-28 15:34:09 x7 leabratf[24947] INFO Elapsed time: 0:00:20.926532\n"
     ]
    }
   ],
   "source": [
    "control_metrics = exp_stats(\n",
    "    epochs=100,\n",
    "    n_models=1,\n",
    "    n_val=10,\n",
    "    lr=0.0033,\n",
    "    optimizer='Adam',\n",
    "    training_sets=['train_uni'],\n",
    "    verbose=True,)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(control_metrics['train_uni'][0][0]['loss'], label='Loss')\n",
    "plt.plot(control_metrics['train_uni'][1][0]['epoch'],\n",
    "         control_metrics['train_uni'][1][0]['loss'], label='Val Loss')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The batch sizes were totally wrong between the training and test sets. Fixing them in the exp configs all the way at the top of the notebook solved the problem."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Rerunning the Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2019-05-28 15:37:58 x7 leabratf[24947] INFO Optimizing using Adam\n",
      "2019-05-28 15:37:58 x7 leabratf[24947] INFO Using train_1e training set\n",
      "2019-05-28 15:37:58 x7 leabratf[24947] INFO Starting training for model 0.\n",
      "2019-05-28 15:38:09 x7 leabratf[24947] INFO Using train_2e training set\n",
      "2019-05-28 15:38:09 x7 leabratf[24947] INFO Starting training for model 0.\n",
      "2019-05-28 15:38:19 x7 leabratf[24947] INFO Using train_he training set\n",
      "2019-05-28 15:38:19 x7 leabratf[24947] INFO Starting training for model 0.\n",
      "2019-05-28 15:38:29 x7 leabratf[24947] INFO Using train_uni training set\n",
      "2019-05-28 15:38:29 x7 leabratf[24947] INFO Starting training for model 0.\n",
      "2019-05-28 15:38:40 x7 leabratf[24947] INFO Elapsed time: 0:00:41.911544\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 1min 39s, sys: 17.3 s, total: 1min 56s\n",
      "Wall time: 41.9 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "adam_train_metrics = exp_stats(\n",
    "    epochs=50,\n",
    "    n_models=1,\n",
    "    n_val=10,\n",
    "    lr=0.0033,\n",
    "    optimizer='Adam')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "control_models = adam_train_metrics['train_uni']\n",
    "for i, model in enumerate(control_models):\n",
    "    plt.plot(model.epoch[:10], model.loss[:10], label=f'Model {i}')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
